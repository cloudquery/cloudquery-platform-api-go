// Package cloudquery_platform_api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package cloudquery_platform_api

import (
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BasicAuthScopes  = "basicAuth.Scopes"
	BearerAuthScopes = "bearerAuth.Scopes"
	CookieAuthScopes = "cookieAuth.Scopes"
)

// Defines values for APIKeyRole.
const (
	APIKeyRoleAdminRead    APIKeyRole = "admin:read"
	APIKeyRoleAdminWrite   APIKeyRole = "admin:write"
	APIKeyRoleCi           APIKeyRole = "ci"
	APIKeyRoleGeneralRead  APIKeyRole = "general:read"
	APIKeyRoleGeneralWrite APIKeyRole = "general:write"
)

// Defines values for AlertSeverity.
const (
	AlertSeverityHigh   AlertSeverity = "high"
	AlertSeverityLow    AlertSeverity = "low"
	AlertSeverityMedium AlertSeverity = "medium"
)

// Defines values for AlertState.
const (
	AlertStateInactive  AlertState = "inactive"
	AlertStatePending   AlertState = "pending"
	AlertStateTriggered AlertState = "triggered"
	AlertStateUnknown   AlertState = "unknown"
)

// Defines values for AssetViewRunType.
const (
	AssetViewRunTypeClientTable AssetViewRunType = "client_table"
	AssetViewRunTypeS3Source    AssetViewRunType = "s3_source"
)

// Defines values for CompletedNotificationStatus.
const (
	CompletedNotificationStatusCompleted CompletedNotificationStatus = "completed"
)

// Defines values for CompletedSingleAccountNotificationStatus.
const (
	CompletedSingleAccountNotificationStatusCompletedAccount CompletedSingleAccountNotificationStatus = "completed_account"
)

// Defines values for ConnectorStatus.
const (
	ConnectorStatusAuthenticated ConnectorStatus = "authenticated"
	ConnectorStatusCreated       ConnectorStatus = "created"
	ConnectorStatusFailed        ConnectorStatus = "failed"
	ConnectorStatusRevoked       ConnectorStatus = "revoked"
)

// Defines values for ContentType.
const (
	ContentTypeImagejpeg ContentType = "image/jpeg"
	ContentTypeImagepng  ContentType = "image/png"
	ContentTypeImagewebp ContentType = "image/webp"
)

// Defines values for CustomColumnColumnType.
const (
	CustomColumnColumnTypeBoolean  CustomColumnColumnType = "Boolean"
	CustomColumnColumnTypeDateTime CustomColumnColumnType = "DateTime"
	CustomColumnColumnTypeFloat    CustomColumnColumnType = "Float"
	CustomColumnColumnTypeInteger  CustomColumnColumnType = "Integer"
	CustomColumnColumnTypeString   CustomColumnColumnType = "String"
)

// Defines values for CustomColumnSortBy.
const (
	CustomColumnSortByColumnName  CustomColumnSortBy = "column_name"
	CustomColumnSortByColumnType  CustomColumnSortBy = "column_type"
	CustomColumnSortByCreatedAt   CustomColumnSortBy = "created_at"
	CustomColumnSortByCreatedBy   CustomColumnSortBy = "created_by"
	CustomColumnSortByDescription CustomColumnSortBy = "description"
	CustomColumnSortById          CustomColumnSortBy = "id"
	CustomColumnSortByLabel       CustomColumnSortBy = "label"
	CustomColumnSortByTableName   CustomColumnSortBy = "table_name"
	CustomColumnSortByTeamName    CustomColumnSortBy = "team_name"
	CustomColumnSortByUpdatedAt   CustomColumnSortBy = "updated_at"
	CustomColumnSortByValueExpr   CustomColumnSortBy = "value_expr"
	CustomColumnSortByValueType   CustomColumnSortBy = "value_type"
)

// Defines values for CustomColumnSortDirection.
const (
	CustomColumnSortDirectionAsc  CustomColumnSortDirection = "asc"
	CustomColumnSortDirectionDesc CustomColumnSortDirection = "desc"
)

// Defines values for CustomColumnValueType.
const (
	CustomColumnValueTypeExpression CustomColumnValueType = "expression"
	CustomColumnValueTypeExternal   CustomColumnValueType = "external"
)

// Defines values for DeployedNotificationStatus.
const (
	DeployedNotificationStatusDeployed DeployedNotificationStatus = "deployed"
)

// Defines values for FailedNotificationStatus.
const (
	FailedNotificationStatusFailed FailedNotificationStatus = "failed"
)

// Defines values for LocalUserProvider.
const (
	LocalUserProviderLocal LocalUserProvider = "local"
	LocalUserProviderSaml  LocalUserProvider = "saml"
)

// Defines values for PlatformPolicySortDirection.
const (
	PlatformPolicySortDirectionAsc  PlatformPolicySortDirection = "asc"
	PlatformPolicySortDirectionDesc PlatformPolicySortDirection = "desc"
)

// Defines values for PluginCategory.
const (
	PluginCategoryCloudFinops          PluginCategory = "cloud-finops"
	PluginCategoryCloudInfrastructure  PluginCategory = "cloud-infrastructure"
	PluginCategoryCustomerSupport      PluginCategory = "customer-support"
	PluginCategoryDataWarehouses       PluginCategory = "data-warehouses"
	PluginCategoryDatabases            PluginCategory = "databases"
	PluginCategoryEngineeringAnalytics PluginCategory = "engineering-analytics"
	PluginCategoryFinance              PluginCategory = "finance"
	PluginCategoryFleetManagement      PluginCategory = "fleet-management"
	PluginCategoryHumanResources       PluginCategory = "human-resources"
	PluginCategoryMarketingAnalytics   PluginCategory = "marketing-analytics"
	PluginCategoryOther                PluginCategory = "other"
	PluginCategoryProductAnalytics     PluginCategory = "product-analytics"
	PluginCategoryProjectManagement    PluginCategory = "project-management"
	PluginCategorySalesMarketing       PluginCategory = "sales-marketing"
	PluginCategorySecurity             PluginCategory = "security"
	PluginCategoryShipmentTracking     PluginCategory = "shipment-tracking"
)

// Defines values for PluginKind.
const (
	PluginKindDestination PluginKind = "destination"
	PluginKindSource      PluginKind = "source"
	PluginKindTransformer PluginKind = "transformer"
)

// Defines values for PluginPackageType.
const (
	PluginPackageTypeDocker PluginPackageType = "docker"
	PluginPackageTypeNative PluginPackageType = "native"
)

// Defines values for PluginPriceCategory.
const (
	PluginPriceCategoryApi      PluginPriceCategory = "api"
	PluginPriceCategoryDatabase PluginPriceCategory = "database"
	PluginPriceCategoryFree     PluginPriceCategory = "free"
)

// Defines values for PluginReleaseStage.
const (
	PluginReleaseStageComingSoon PluginReleaseStage = "coming-soon"
	PluginReleaseStageDeprecated PluginReleaseStage = "deprecated"
	PluginReleaseStageGa         PluginReleaseStage = "ga"
	PluginReleaseStagePreview    PluginReleaseStage = "preview"
)

// Defines values for PluginReleaseStageCreate.
const (
	PluginReleaseStageCreateComingSoon PluginReleaseStageCreate = "coming-soon"
	PluginReleaseStageCreateGa         PluginReleaseStageCreate = "ga"
	PluginReleaseStageCreatePreview    PluginReleaseStageCreate = "preview"
)

// Defines values for PluginReleaseStageUpdate.
const (
	PluginReleaseStageUpdateComingSoon PluginReleaseStageUpdate = "coming-soon"
	PluginReleaseStageUpdateDeprecated PluginReleaseStageUpdate = "deprecated"
	PluginReleaseStageUpdateGa         PluginReleaseStageUpdate = "ga"
	PluginReleaseStageUpdatePreview    PluginReleaseStageUpdate = "preview"
)

// Defines values for PluginTier.
const (
	PluginTierFree     PluginTier = "free"
	PluginTierOpenCore PluginTier = "open-core"
	PluginTierPaid     PluginTier = "paid"
)

// Defines values for RevokedNotificationStatus.
const (
	RevokedNotificationStatusRevoked RevokedNotificationStatus = "revoked"
)

// Defines values for Role.
const (
	RoleAdminRead    Role = "admin:read"
	RoleAdminWrite   Role = "admin:write"
	RoleGeneralRead  Role = "general:read"
	RoleGeneralWrite Role = "general:write"
)

// Defines values for StartedNotificationStatus.
const (
	StartedNotificationStatusStarted StartedNotificationStatus = "started"
)

// Defines values for TableSchemaColumnKind.
const (
	TableSchemaColumnKindAny      TableSchemaColumnKind = "any"
	TableSchemaColumnKindArray    TableSchemaColumnKind = "array"
	TableSchemaColumnKindBool     TableSchemaColumnKind = "bool"
	TableSchemaColumnKindDate     TableSchemaColumnKind = "date"
	TableSchemaColumnKindDatetime TableSchemaColumnKind = "datetime"
	TableSchemaColumnKindEnum     TableSchemaColumnKind = "enum"
	TableSchemaColumnKindMap      TableSchemaColumnKind = "map"
	TableSchemaColumnKindNumber   TableSchemaColumnKind = "number"
	TableSchemaColumnKindString   TableSchemaColumnKind = "string"
	TableSchemaColumnKindTuple    TableSchemaColumnKind = "tuple"
	TableSchemaColumnKindUnknown  TableSchemaColumnKind = "unknown"
	TableSchemaColumnKindUuid     TableSchemaColumnKind = "uuid"
)

// Defines values for TableSortDirection.
const (
	TableSortDirectionAsc  TableSortDirection = "asc"
	TableSortDirectionDesc TableSortDirection = "desc"
)

// Defines values for TeamPlan.
const (
	TeamPlanEnterprise TeamPlan = "enterprise"
	TeamPlanFree       TeamPlan = "free"
	TeamPlanPaid       TeamPlan = "paid"
	TeamPlanTrial      TeamPlan = "trial"
)

// Defines values for PluginSortBy.
const (
	PluginSortByCreatedAt PluginSortBy = "created_at"
	PluginSortByDownloads PluginSortBy = "downloads"
	PluginSortByName      PluginSortBy = "name"
	PluginSortByUpdatedAt PluginSortBy = "updated_at"
)

// Defines values for FilterMode.
const (
	FilterModeColumn FilterMode = "column"
	FilterModeSearch FilterMode = "search"
	FilterModeSmart  FilterMode = "smart"
)

// Defines values for VersionSortBy.
const (
	VersionSortByCreatedAt VersionSortBy = "created_at"
)

// Defines values for ListPluginsParamsSortBy.
const (
	ListPluginsParamsSortByCreatedAt ListPluginsParamsSortBy = "created_at"
	ListPluginsParamsSortByDownloads ListPluginsParamsSortBy = "downloads"
	ListPluginsParamsSortByName      ListPluginsParamsSortBy = "name"
	ListPluginsParamsSortByUpdatedAt ListPluginsParamsSortBy = "updated_at"
)

// Defines values for ListPluginVersionsParamsSortBy.
const (
	ListPluginVersionsParamsSortByCreatedAt ListPluginVersionsParamsSortBy = "created_at"
)

// Defines values for TableListColumnsParamsFilterMode.
const (
	TableListColumnsParamsFilterModeColumn TableListColumnsParamsFilterMode = "column"
	TableListColumnsParamsFilterModeSearch TableListColumnsParamsFilterMode = "search"
	TableListColumnsParamsFilterModeSmart  TableListColumnsParamsFilterMode = "smart"
)

// Defines values for TableColumnListValuesParamsFilterMode.
const (
	TableColumnListValuesParamsFilterModeColumn TableColumnListValuesParamsFilterMode = "column"
	TableColumnListValuesParamsFilterModeSearch TableColumnListValuesParamsFilterMode = "search"
	TableColumnListValuesParamsFilterModeSmart  TableColumnListValuesParamsFilterMode = "smart"
)

// Defines values for TableListRowsParamsFilterMode.
const (
	TableListRowsParamsFilterModeColumn TableListRowsParamsFilterMode = "column"
	TableListRowsParamsFilterModeSearch TableListRowsParamsFilterMode = "search"
	TableListRowsParamsFilterModeSmart  TableListRowsParamsFilterMode = "smart"
)

// Defines values for TableRowByIdParamsFilterMode.
const (
	TableRowByIdParamsFilterModeColumn TableRowByIdParamsFilterMode = "column"
	TableRowByIdParamsFilterModeSearch TableRowByIdParamsFilterMode = "search"
	TableRowByIdParamsFilterModeSmart  TableRowByIdParamsFilterMode = "smart"
)

// Defines values for TogglePolicyParamsStatus.
const (
	TogglePolicyParamsStatusActive TogglePolicyParamsStatus = "active"
	TogglePolicyParamsStatusPaused TogglePolicyParamsStatus = "paused"
)

// Defines values for ExecuteAdHocQueryTeamParamsFilterMode.
const (
	ExecuteAdHocQueryTeamParamsFilterModeColumn ExecuteAdHocQueryTeamParamsFilterMode = "column"
	ExecuteAdHocQueryTeamParamsFilterModeSearch ExecuteAdHocQueryTeamParamsFilterMode = "search"
	ExecuteAdHocQueryTeamParamsFilterModeSmart  ExecuteAdHocQueryTeamParamsFilterMode = "smart"
)

// Defines values for ExecuteSavedQueryTeamParamsFilterMode.
const (
	ExecuteSavedQueryTeamParamsFilterModeColumn ExecuteSavedQueryTeamParamsFilterMode = "column"
	ExecuteSavedQueryTeamParamsFilterModeSearch ExecuteSavedQueryTeamParamsFilterMode = "search"
	ExecuteSavedQueryTeamParamsFilterModeSmart  ExecuteSavedQueryTeamParamsFilterMode = "smart"
)

// Defines values for ListReportsParamsVisibility.
const (
	ListReportsParamsVisibilityPrivate ListReportsParamsVisibility = "private"
	ListReportsParamsVisibilityPublic  ListReportsParamsVisibility = "public"
)

// Defines values for ListSyncUpgradesParamsSortBy.
const (
	ListSyncUpgradesParamsSortByCreatedAt   ListSyncUpgradesParamsSortBy = "created_at"
	ListSyncUpgradesParamsSortByKind        ListSyncUpgradesParamsSortBy = "kind"
	ListSyncUpgradesParamsSortByNewVersion  ListSyncUpgradesParamsSortBy = "new_version"
	ListSyncUpgradesParamsSortByPath        ListSyncUpgradesParamsSortBy = "path"
	ListSyncUpgradesParamsSortByPrevVersion ListSyncUpgradesParamsSortBy = "prev_version"
)

// Defines values for TableListColumnsTeamParamsFilterMode.
const (
	TableListColumnsTeamParamsFilterModeColumn TableListColumnsTeamParamsFilterMode = "column"
	TableListColumnsTeamParamsFilterModeSearch TableListColumnsTeamParamsFilterMode = "search"
	TableListColumnsTeamParamsFilterModeSmart  TableListColumnsTeamParamsFilterMode = "smart"
)

// Defines values for TableColumnListValuesTeamParamsFilterMode.
const (
	TableColumnListValuesTeamParamsFilterModeColumn TableColumnListValuesTeamParamsFilterMode = "column"
	TableColumnListValuesTeamParamsFilterModeSearch TableColumnListValuesTeamParamsFilterMode = "search"
	TableColumnListValuesTeamParamsFilterModeSmart  TableColumnListValuesTeamParamsFilterMode = "smart"
)

// Defines values for TableListRowsTeamParamsFilterMode.
const (
	TableListRowsTeamParamsFilterModeColumn TableListRowsTeamParamsFilterMode = "column"
	TableListRowsTeamParamsFilterModeSearch TableListRowsTeamParamsFilterMode = "search"
	TableListRowsTeamParamsFilterModeSmart  TableListRowsTeamParamsFilterMode = "smart"
)

// Defines values for TableRowByIdTeamParamsFilterMode.
const (
	TableRowByIdTeamParamsFilterModeColumn TableRowByIdTeamParamsFilterMode = "column"
	TableRowByIdTeamParamsFilterModeSearch TableRowByIdTeamParamsFilterMode = "search"
	TableRowByIdTeamParamsFilterModeSmart  TableRowByIdTeamParamsFilterMode = "smart"
)

// Defines values for GetTeamUsageSummaryParamsMetrics.
const (
	GetTeamUsageSummaryParamsMetricsCloudVcpuSeconds     GetTeamUsageSummaryParamsMetrics = "cloud_vcpu_seconds"
	GetTeamUsageSummaryParamsMetricsCloudVramByteSeconds GetTeamUsageSummaryParamsMetrics = "cloud_vram_byte_seconds"
	GetTeamUsageSummaryParamsMetricsNetworkEgressBytes   GetTeamUsageSummaryParamsMetrics = "network_egress_bytes"
	GetTeamUsageSummaryParamsMetricsPaidRows             GetTeamUsageSummaryParamsMetrics = "paid_rows"
)

// Defines values for GetTeamUsageSummaryParamsAggregationPeriod.
const (
	GetTeamUsageSummaryParamsAggregationPeriodDay   GetTeamUsageSummaryParamsAggregationPeriod = "day"
	GetTeamUsageSummaryParamsAggregationPeriodMonth GetTeamUsageSummaryParamsAggregationPeriod = "month"
)

// Defines values for GetGroupedTeamUsageSummaryParamsMetrics.
const (
	GetGroupedTeamUsageSummaryParamsMetricsCloudVcpuSeconds     GetGroupedTeamUsageSummaryParamsMetrics = "cloud_vcpu_seconds"
	GetGroupedTeamUsageSummaryParamsMetricsCloudVramByteSeconds GetGroupedTeamUsageSummaryParamsMetrics = "cloud_vram_byte_seconds"
	GetGroupedTeamUsageSummaryParamsMetricsNetworkEgressBytes   GetGroupedTeamUsageSummaryParamsMetrics = "network_egress_bytes"
	GetGroupedTeamUsageSummaryParamsMetricsPaidRows             GetGroupedTeamUsageSummaryParamsMetrics = "paid_rows"
)

// Defines values for GetGroupedTeamUsageSummaryParamsAggregationPeriod.
const (
	GetGroupedTeamUsageSummaryParamsAggregationPeriodDay   GetGroupedTeamUsageSummaryParamsAggregationPeriod = "day"
	GetGroupedTeamUsageSummaryParamsAggregationPeriodMonth GetGroupedTeamUsageSummaryParamsAggregationPeriod = "month"
)

// Defines values for GetGroupedTeamUsageSummaryParamsGroupBy.
const (
	GetGroupedTeamUsageSummaryParamsGroupByPlugin        GetGroupedTeamUsageSummaryParamsGroupBy = "plugin"
	GetGroupedTeamUsageSummaryParamsGroupByPriceCategory GetGroupedTeamUsageSummaryParamsGroupBy = "price_category"
	GetGroupedTeamUsageSummaryParamsGroupBySyncId        GetGroupedTeamUsageSummaryParamsGroupBy = "sync_id"
)

// APIKey API Key to interact with CloudQuery Cloud under specific team
type APIKey struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// CreatedBy email of the user that created the API key
	CreatedBy *string `json:"created_by,omitempty"`

	// Expired Whether the API key has expired or not
	Expired bool `json:"expired"`

	// ExpiresAt Timestamp at which API key will stop working
	ExpiresAt time.Time `json:"expires_at"`

	// APIKeyID ID of the API key
	APIKeyID APIKeyID `json:"id"`

	// Key API key. Will be shown only in the response when creating the key.
	Key *string `json:"key,omitempty"`

	// LastAccessAt Timestamp at which API key was last used - accurate to the day only.
	LastAccessAt *time.Time `json:"last_access_at,omitempty"`

	// Name Name of the API key
	Name  APIKeyName       `json:"name"`
	Roles []APIKeyTeamRole `json:"roles"`
}

// APIKeyID ID of the API key
type APIKeyID = openapi_types.UUID

// APIKeyName Name of the API key
type APIKeyName = string

// APIKeyRole defines model for APIKeyRole.
type APIKeyRole string

// APIKeyTeamRole defines model for APIKeyTeamRole.
type APIKeyTeamRole struct {
	Role APIKeyRole `json:"role"`

	// Team The unique name for the team.
	Team *TeamName `json:"team,omitempty"`
}

// AcceptTeamInvitationRequest defines model for AcceptTeamInvitation_request.
type AcceptTeamInvitationRequest struct {
	Token openapi_types.UUID `json:"token"`
}

// AddLocalUserRequest defines model for AddLocalUser_request.
type AddLocalUserRequest struct {
	Email    string  `json:"email"`
	Name     string  `json:"name"`
	Password *string `json:"password,omitempty"`

	// Roles Global roles for the user
	Roles                interface{}            `json:"roles"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Alert An alert instance that can be triggered by a query
type Alert struct {
	// CreatedAt Timestamp when the alert was created
	CreatedAt interface{} `json:"created_at"`

	// Enabled Indicates if the alert is enabled
	Enabled interface{} `json:"enabled"`

	// ID Unique identifier for the alert
	ID interface{} `json:"id"`

	// LastEvaluatedAt Timestamp when the alert was last evaluated
	LastEvaluatedAt *interface{} `json:"last_evaluated_at,omitempty"`

	// Message Alert message content
	Message interface{} `json:"message"`

	// NumDestinations Number of notification destinations this alert is configured to send to
	NumDestinations interface{} `json:"num_destinations"`

	// QueryID Reference to the associated query
	QueryID  interface{}   `json:"query_id"`
	Severity AlertSeverity `json:"severity"`
	State    AlertState    `json:"state"`

	// TotalViolations Number of violations that triggered the alert
	TotalViolations interface{} `json:"total_violations"`

	// TriggeredAt Timestamp when the alert was triggered
	TriggeredAt *interface{} `json:"triggered_at,omitempty"`

	// UpdatedAt Timestamp when the alert was last updated
	UpdatedAt interface{} `json:"updated_at"`
}

// AlertCreate Create an alert
type AlertCreate struct {
	// Enabled Indicates if the alert is enabled
	Enabled bool   `json:"enabled"`
	Message string `json:"message"`

	// NotificationDestinations List of notification destinations to send alerts to
	NotificationDestinations []NotificationDestinationID `json:"notification_destinations,omitempty"`
	Severity                 AlertSeverity               `json:"severity"`
}

// AlertDetail An alert instance that can be triggered by a query including notification destinations for the alert
type AlertDetail struct {
	// CreatedAt Timestamp when the alert was created
	CreatedAt time.Time `json:"created_at"`

	// Enabled Indicates if the alert is enabled
	Enabled bool `json:"enabled"`

	// ID Unique identifier for the alert
	ID openapi_types.UUID `json:"id"`

	// LastEvaluatedAt Timestamp when the alert was last evaluated
	LastEvaluatedAt *time.Time `json:"last_evaluated_at,omitempty"`

	// Message Alert message content
	Message string `json:"message"`

	// NotificationDestinations List of notification destinations this alert is configured to send to
	NotificationDestinations []NotificationDestinationListItem `json:"notification_destinations"`

	// QueryID Reference to the associated query
	QueryID  openapi_types.UUID `json:"query_id"`
	Severity AlertSeverity      `json:"severity"`
	State    AlertState         `json:"state"`

	// TotalViolations Number of violations that triggered the alert
	TotalViolations int64 `json:"total_violations"`

	// TriggeredAt Timestamp when the alert was triggered
	TriggeredAt *time.Time `json:"triggered_at,omitempty"`

	// UpdatedAt Timestamp when the alert was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// AlertSeverity defines model for AlertSeverity.
type AlertSeverity string

// AlertState defines model for AlertState.
type AlertState string

// AlertTestResponse Alert Test Response
type AlertTestResponse struct {
	// DestinationID The ID of the notification destination.
	DestinationID string `json:"destination_id"`

	// Error An error message if the test failed, otherwise null.
	Error *string `json:"error,omitempty"`

	// Response Notification Destination Test Response
	Response NotificationDestinationTestResponse `json:"response"`
}

// AlertUpdate Alert Update Definition
type AlertUpdate struct {
	// Enabled Indicates if the alert is enabled
	Enabled *interface{} `json:"enabled,omitempty"`
	Message *interface{} `json:"message,omitempty"`

	// NotificationDestinations List of notification destinations to send alerts to
	NotificationDestinations *interface{}   `json:"notification_destinations,omitempty"`
	Severity                 *AlertSeverity `json:"severity,omitempty"`
}

// AssetViewGetStatus200Response defines model for AssetViewGetStatus_200_response.
type AssetViewGetStatus200Response struct {
	// IsRunning Whether the assetview is currently running
	IsRunning bool `json:"is_running"`
}

// AssetViewListLogs200Response defines model for AssetViewListLogs_200_response.
type AssetViewListLogs200Response struct {
	Items    []AssetViewRun `json:"items"`
	Metadata ListMetadata   `json:"metadata"`
}

// AssetViewRun defines model for AssetViewRun.
type AssetViewRun struct {
	// CreatedAt The time the run was created
	CreatedAt time.Time `json:"created_at"`

	// ErrorMessage The error message if the run failed
	ErrorMessage *string `json:"error_message,omitempty"`

	// FinishedAt The time the run was finished
	FinishedAt *time.Time `json:"finished_at,omitempty"`

	// ID ID of the run
	ID openapi_types.UUID `json:"id"`

	// TriggeredBy The user who triggered the run
	TriggeredBy *string `json:"triggered_by,omitempty"`

	// Type Type of assetview run
	Type AssetViewRunType `json:"type"`
}

// AssetViewRunType Type of assetview run
type AssetViewRunType string

// AuditLogEvent defines model for AuditLogEvent.
type AuditLogEvent struct {
	// CreatedAt The timestamp when the event was created
	CreatedAt time.Time `json:"created_at"`

	// EntityDisplayName The display name of the entity that was affected
	EntityDisplayName *string `json:"entity_display_name"`

	// EventDetails Additional details about the event
	EventDetails *map[string]interface{} `json:"event_details,omitempty"`

	// EventType The type of event that was logged
	EventType string `json:"event_type"`

	// Id The unique identifier of the audit log event
	Id openapi_types.UUID `json:"id"`

	// IsSuccess Whether the event was successful
	IsSuccess *bool `json:"is_success,omitempty"`

	// TeamName The name of the team associated with the event
	TeamName *string `json:"team_name"`

	// User CloudQuery User
	User User `json:"user"`

	// UserIpAddress The IP address of the user who performed the action
	UserIpAddress string `json:"user_ip_address"`
}

// AuthenticateLocalUser200Response defines model for AuthenticateLocalUser_200_response.
type AuthenticateLocalUser200Response struct {
	IDToken string `json:"id_token"`
}

// AuthenticateLocalUserRequest defines model for AuthenticateLocalUser_request.
type AuthenticateLocalUserRequest struct {
	Email                string                 `json:"email"`
	Password             string                 `json:"password"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BaseNotification defines model for BaseNotification.
type BaseNotification struct {
	Status string `json:"status"`
}

// BasicError Basic Error
type BasicError struct {
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// BatchTableSchemaItem defines model for BatchTableSchemaItem.
type BatchTableSchemaItem struct {
	DefaultColumns []string    `json:"default_columns"`
	Schema         TableSchema `json:"schema"`

	// TableName Table name
	TableName string `json:"table_name"`
}

// BatchTableSchemas200Response defines model for BatchTableSchemas_200_response.
type BatchTableSchemas200Response struct {
	Items []BatchTableSchemaItem `json:"items"`
}

// ChangeLocalUserPasswordRequest defines model for ChangeLocalUserPassword_request.
type ChangeLocalUserPasswordRequest struct {
	Email                string                 `json:"email"`
	NewPassword          string                 `json:"new_password"`
	OldPassword          string                 `json:"old_password"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CompletedNotification defines model for CompletedNotification.
type CompletedNotification struct {
	AdditionalStackIds  *[]string                   `json:"additional_stack_ids,omitempty"`
	AdminRoleArn        string                      `json:"admin_role_arn"`
	FailedAccounts      *float32                    `json:"failed_accounts,omitempty"`
	OrganizationalUnits []string                    `json:"organizational_units"`
	SkippedAccounts     []string                    `json:"skipped_accounts"`
	Status              CompletedNotificationStatus `json:"status"`
	SyncRoleName        string                      `json:"sync_role_name"`
}

// CompletedNotificationStatus defines model for CompletedNotification.Status.
type CompletedNotificationStatus string

// CompletedSingleAccountNotification defines model for CompletedSingleAccountNotification.
type CompletedSingleAccountNotification struct {
	StackId     string                                   `json:"stack_id"`
	Status      CompletedSingleAccountNotificationStatus `json:"status"`
	SyncRoleArn string                                   `json:"sync_role_arn"`
}

// CompletedSingleAccountNotificationStatus defines model for CompletedSingleAccountNotification.Status.
type CompletedSingleAccountNotificationStatus string

// Connector Connector definition
type Connector struct {
	// CreatedAt Time the connector was created
	CreatedAt time.Time `json:"created_at"`

	// ID unique ID of the connector
	ID openapi_types.UUID `json:"id"`

	// Name Name of the connector
	Name string `json:"name"`

	// Status The status of the connector
	Status ConnectorStatus `json:"status"`

	// Type Type of the connector
	Type string `json:"type"`
}

// ConnectorAuthFinishRequestAWS AWS connector authentication request, filled in after the user has authenticated through AWS
type ConnectorAuthFinishRequestAWS struct {
	// ExternalID External ID in the role definition. Optional. If not provided the previously suggested external ID will be used. Empty string will remove the external ID.
	ExternalID *string `json:"external_id,omitempty"`

	// RoleARN ARN of role created by the user
	RoleARN string `json:"role_arn"`
}

// ConnectorAuthFinishRequestOAuth OAuth connector authentication request, filled in after the user has authenticated through OAuth
type ConnectorAuthFinishRequestOAuth struct {
	// BaseURL Base of the URL the callback url was constructed from
	BaseURL interface{} `json:"base_url"`

	// Env Environment variables used in the spec.
	Env *interface{} `json:"env,omitempty"`

	// ReturnURL URL the user was redirected to (including new parameter values) after the OAuth flow is complete
	ReturnURL            interface{}            `json:"return_url"`
	Spec                 *interface{}           `json:"spec,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ConnectorAuthRequestAWS AWS connector authentication request to start the authentication process
type ConnectorAuthRequestAWS struct {
	// Env Environment variables used in the spec.
	Env *interface{} `json:"env,omitempty"`

	// PluginKind Kind of the plugin
	PluginKind interface{} `json:"plugin_kind"`

	// PluginName Name of the plugin
	PluginName interface{} `json:"plugin_name"`

	// PluginTeam Team that owns the plugin we are authenticating the connector for
	PluginTeam interface{} `json:"plugin_team"`

	// PluginVersion Version of the plugin
	PluginVersion *interface{} `json:"plugin_version,omitempty"`

	// SkipDependentTables Whether to skip dependent tables, setting from the outer spec
	SkipDependentTables *interface{} `json:"skip_dependent_tables,omitempty"`

	// SkipTables Tables to skip authentication, setting from the outer spec
	SkipTables *interface{} `json:"skip_tables,omitempty"`
	Spec       *interface{} `json:"spec,omitempty"`

	// Tables Tables to authenticate, setting from the outer spec
	Tables               *interface{}           `json:"tables,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ConnectorAuthRequestGCP GCP connector authentication request to start the authentication process
type ConnectorAuthRequestGCP struct {
	// PluginKind Kind of the plugin
	PluginKind string `json:"plugin_kind"`

	// PluginName Name of the plugin
	PluginName string `json:"plugin_name"`

	// PluginTeam Team that owns the plugin we are authenticating the connector for
	PluginTeam string `json:"plugin_team"`
}

// ConnectorAuthRequestOAuth OAuth connector authentication request to start the authentication process
type ConnectorAuthRequestOAuth struct {
	// BaseURL Base of the URL the callback url will be constructed from
	BaseURL interface{} `json:"base_url"`

	// Env Environment variables used in the spec.
	Env *interface{} `json:"env,omitempty"`

	// Flavor Override default flavor
	Flavor *interface{} `json:"flavor,omitempty"`

	// PluginKind Kind of the plugin
	PluginKind interface{} `json:"plugin_kind"`

	// PluginName Name of the plugin
	PluginName interface{} `json:"plugin_name"`

	// PluginTeam Team that owns the plugin we are authenticating the connector for
	PluginTeam interface{} `json:"plugin_team"`

	// PluginVersion Version of the plugin
	PluginVersion *interface{} `json:"plugin_version,omitempty"`

	// SkipDependentTables Whether to skip dependent tables, setting from the outer spec
	SkipDependentTables *interface{} `json:"skip_dependent_tables,omitempty"`

	// SkipTables Tables to skip authentication, setting from the outer spec
	SkipTables *interface{} `json:"skip_tables,omitempty"`
	Spec       *interface{} `json:"spec,omitempty"`

	// Tables Tables to authenticate, setting from the outer spec
	Tables               *interface{}           `json:"tables,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ConnectorAuthResponseAWS AWS connector authentication response to start the authentication process
type ConnectorAuthResponseAWS struct {
	// RedirectURL URL to redirect the user to, to authenticate
	RedirectURL string `json:"redirect_url"`

	// RoleTemplateURL URL to the role template, to present to the user
	RoleTemplateURL string `json:"role_template_url"`

	// SuggestedExternalID External ID suggested to enter into the role definition
	SuggestedExternalID string `json:"suggested_external_id"`

	// SuggestedPolicyARNs List of AWS policy ARNs suggested to grant inside the role definition
	SuggestedPolicyARNs []string `json:"suggested_policy_arns"`
}

// ConnectorAuthResponseGCP GCP connector authentication response to start the authentication process
type ConnectorAuthResponseGCP struct {
	// ServiceAccount CloudQuery GCP Service Account to grant access to
	ServiceAccount string `json:"service_account"`
}

// ConnectorAuthResponseOAuth OAuth connector authentication response to start the authentication process
type ConnectorAuthResponseOAuth struct {
	// RedirectURL URL to redirect the user to, to authenticate
	RedirectURL string `json:"redirect_url"`
}

// ConnectorCreate Connector creation request
type ConnectorCreate struct {
	// Name Name of the connector
	Name string `json:"name"`

	// Type Type of the connector
	Type string `json:"type"`
}

// ConnectorCredentialsResponseAWS AWS connector credentials response
type ConnectorCredentialsResponseAWS struct {
	AccessKeyId     interface{} `json:"access_key_id"`
	CanExpire       interface{} `json:"can_expire"`
	Expires         interface{} `json:"expires"`
	SecretAccessKey interface{} `json:"secret_access_key"`
	SessionToken    interface{} `json:"session_token"`
	Source          interface{} `json:"source"`
}

// ConnectorCredentialsResponseOAuth OAuth connector credentials response
type ConnectorCredentialsResponseOAuth struct {
	AccessToken interface{}  `json:"access_token"`
	Expires     *interface{} `json:"expires,omitempty"`
}

// ConnectorID ID of the Connector
type ConnectorID = openapi_types.UUID

// ConnectorIdentityResponseAWS AWS connector identity response
type ConnectorIdentityResponseAWS struct {
	// RoleARN Role ARN to assume
	RoleARN interface{} `json:"role_arn"`
}

// ConnectorStatus The status of the connector
type ConnectorStatus string

// ConnectorUpdate defines model for ConnectorUpdate.
type ConnectorUpdate struct {
	// Name Name of the connector
	Name *string `json:"name,omitempty"`
}

// ContentType The HTTP Content-Type of the image or asset
type ContentType string

// CreateAWSOnboardingRequest defines model for CreateAWSOnboarding_request.
type CreateAWSOnboardingRequest struct {
	// SingleAccount Specifies the type of onboarding to create: either a single account onboarding or an organization onboarding
	SingleAccount bool `json:"single_account"`
}

// CreateLocalUserResetToken200Response defines model for CreateLocalUserResetToken_200_response.
type CreateLocalUserResetToken200Response struct {
	ResetToken string `json:"reset_token"`
}

// CreatePluginVersionDocs201Response defines model for CreatePluginVersionDocs_201_response.
type CreatePluginVersionDocs201Response struct {
	Names *[]PluginDocsPageName `json:"names,omitempty"`
}

// CreatePluginVersionDocsRequest defines model for CreatePluginVersionDocs_request.
type CreatePluginVersionDocsRequest struct {
	Pages []PluginDocsPageCreate `json:"pages"`
}

// CreatePluginVersionTables201Response defines model for CreatePluginVersionTables_201_response.
type CreatePluginVersionTables201Response struct {
	Names *[]PluginTableName `json:"names,omitempty"`
}

// CreatePluginVersionTablesRequest defines model for CreatePluginVersionTables_request.
type CreatePluginVersionTablesRequest struct {
	Tables []PluginTableCreate `json:"tables"`
}

// CreatePluginVersionRequest defines model for CreatePluginVersion_request.
type CreatePluginVersionRequest struct {
	// Checksums List of SHA-256 checksums for this plugin version, one for each supported target.
	Checksums []string `json:"checksums"`

	// Message A message describing what's new or changed in this version.
	// This message will be displayed to users in the plugin's changelog.
	// Supports limited markdown syntax.
	Message string `json:"message"`

	// PackageType The package type of the plugin assets
	PackageType PluginPackageType `json:"package_type"`

	// Protocols The CloudQuery protocols supported by this plugin version (only protocol 3 is supported by new plugins).
	Protocols PluginProtocols `json:"protocols"`

	// SpecJsonSchema The specification of the plugin. This is a JSON schema that describes the configuration of the plugin.
	SpecJsonSchema *PluginSpecJSONSchema `json:"spec_json_schema,omitempty"`

	// SupportedTargets The targets supported by this plugin version, formatted as <os>_<arch>
	SupportedTargets []string            `json:"supported_targets"`
	UIID             *openapi_types.UUID `json:"ui_id,omitempty"`
}

// CreatePolicy201Response defines model for CreatePolicy_201_response.
type CreatePolicy201Response struct {
	Data PlatformPolicy `json:"data"`
}

// CreateReportTemplate201Response defines model for CreateReportTemplate_201_response.
type CreateReportTemplate201Response struct {
	Data ReportTemplate `json:"data"`
}

// CreateReport201Response defines model for CreateReport_201_response.
type CreateReport201Response struct {
	Data Report `json:"data"`
}

// CreateSyncRunProgressRequest defines model for CreateSyncRunProgress_request.
type CreateSyncRunProgressRequest struct {
	// Errors Number of errors encountered so far
	Errors int64 `json:"errors"`

	// Rows Number of rows synced so far
	Rows int64 `json:"rows"`

	// ShardNum The shard number that this progress update is for
	ShardNum *int32 `json:"shard_num,omitempty"`

	// ShardTotal The total number of shards for this sync run
	ShardTotal *int32 `json:"shard_total,omitempty"`

	// Status The status of the sync run
	Status *SyncRunStatus `json:"status,omitempty"`

	// Warnings Number of warnings encountered so far
	Warnings int64 `json:"warnings"`
}

// CreateTeamAPIKeyRequest defines model for CreateTeamAPIKey_request.
type CreateTeamAPIKeyRequest struct {
	ExpiresAt time.Time `json:"expires_at"`

	// Name Name of the API key
	Name  APIKeyName        `json:"name"`
	Roles *[]APIKeyTeamRole `json:"roles,omitempty"`
}

// CreateTeamImages201Response defines model for CreateTeamImages_201_response.
type CreateTeamImages201Response struct {
	Items    []TeamImage  `json:"items"`
	Metadata ListMetadata `json:"metadata"`
}

// CreateTeamImagesRequest defines model for CreateTeamImages_request.
type CreateTeamImagesRequest struct {
	Images []TeamImageCreate `json:"images"`
}

// CreateTeamRequest defines model for CreateTeam_request.
type CreateTeamRequest struct {
	// DisplayName The team's display name
	DisplayName interface{} `json:"display_name"`

	// Name The unique name for the team.
	Name                 TeamName               `json:"name"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CreateUserToken201Response defines model for CreateUserToken_201_response.
type CreateUserToken201Response struct {
	// CustomToken Token to exchange for refresh token
	CustomToken string `json:"custom_token"`
}

// CreatedBy defines model for CreatedBy.
type CreatedBy struct {
	Email string `json:"email"`

	// UserID ID of the User
	UserID UserID `json:"id"`

	// Name The unique name for the user.
	Name UserName `json:"name"`
}

// CustomColumn A custom column that is configured manually by the user.
type CustomColumn struct {
	ColumnName  string                  `json:"column_name"`
	ColumnType  *CustomColumnColumnType `json:"column_type,omitempty"`
	CreatedAt   time.Time               `json:"created_at"`
	CreatedBy   CreatedBy               `json:"created_by"`
	Description *string                 `json:"description,omitempty"`

	// CustomColumnID The unique ID for the custom column.
	CustomColumnID CustomColumnID `json:"id"`
	Label          string         `json:"label"`

	// TableName Table this column applies to.
	TableName string `json:"table_name"`

	// TeamName The unique name for the team.
	TeamName TeamName `json:"team_name"`

	// ValueExpr Value expression.
	// For value_type=expression, this is the actual SQL query.
	// For value_type=external this is the default value.
	ValueExpr *string               `json:"value_expr,omitempty"`
	ValueType CustomColumnValueType `json:"value_type"`
}

// CustomColumnColumnType defines model for CustomColumnColumnType.
type CustomColumnColumnType string

// CustomColumnCreateOrUpdate Create or update a custom column
type CustomColumnCreateOrUpdate struct {
	ColumnName  string                  `json:"column_name"`
	ColumnType  *CustomColumnColumnType `json:"column_type,omitempty"`
	Description *string                 `json:"description,omitempty"`
	Label       string                  `json:"label"`

	// TableName Table this column applies to.
	TableName string `json:"table_name"`

	// ValueExpr Value expression.
	// For value_type=expression, this is the actual SQL query.
	// For value_type=external this is the default value.
	ValueExpr *string               `json:"value_expr,omitempty"`
	ValueType CustomColumnValueType `json:"value_type"`
}

// CustomColumnDataImport Import data into the specified custom column
type CustomColumnDataImport struct {
	Data                 interface{}            `json:"data"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CustomColumnDataImportAccepted defines model for CustomColumnDataImportAccepted.
type CustomColumnDataImportAccepted struct {
	// CreatedAt The time the data import was created
	CreatedAt time.Time `json:"created_at"`
}

// CustomColumnDataValues Edit one or more values within the specified custom column
type CustomColumnDataValues struct {
	Data                 interface{}            `json:"data"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CustomColumnID The unique ID for the custom column.
type CustomColumnID = openapi_types.UUID

// CustomColumnSortBy defines model for CustomColumnSortBy.
type CustomColumnSortBy string

// CustomColumnSortDirection defines model for CustomColumnSortDirection.
type CustomColumnSortDirection string

// CustomColumnValueType defines model for CustomColumnValueType.
type CustomColumnValueType string

// DeletePluginVersionDocsRequest defines model for DeletePluginVersionDocs_request.
type DeletePluginVersionDocsRequest struct {
	Names []PluginDocsPageName `json:"names"`
}

// DeletePluginVersionTablesRequest defines model for DeletePluginVersionTables_request.
type DeletePluginVersionTablesRequest struct {
	Names []PluginTableName `json:"names"`
}

// DeleteTeamInvitationRequest defines model for DeleteTeamInvitation_request.
type DeleteTeamInvitationRequest struct {
	Email openapi_types.Email `json:"email"`
}

// DeployedNotification defines model for DeployedNotification.
type DeployedNotification struct {
	DeploymentMode    string                     `json:"deployment_mode"`
	ManagementRoleArn string                     `json:"management_role_arn"`
	StackId           string                     `json:"stack_id"`
	Status            DeployedNotificationStatus `json:"status"`
}

// DeployedNotificationStatus defines model for DeployedNotification.Status.
type DeployedNotificationStatus string

// DisplayName A human-readable display name
type DisplayName = interface{}

// DockerError Error Returned from the Docker Authorization Handler to the Docker Registry
type DockerError struct {
	Details interface{} `json:"details"`
}

// Email defines model for Email.
type Email = openapi_types.Email

// ExecuteAdHocQueryTeamRequest defines model for ExecuteAdHocQueryTeam_request.
type ExecuteAdHocQueryTeamRequest struct {
	Query                interface{}            `json:"query"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// FailedNotification defines model for FailedNotification.
type FailedNotification struct {
	Reason string                   `json:"reason"`
	Status FailedNotificationStatus `json:"status"`
}

// FailedNotificationStatus defines model for FailedNotification.Status.
type FailedNotificationStatus string

// FieldError defines model for FieldError.
type FieldError struct {
	Errors      *[]string          `json:"errors,omitempty"`
	FieldErrors *map[string]string `json:"field_errors,omitempty"`
	Message     string             `json:"message"`
	Status      int                `json:"status"`
}

// Filter Saved filter
type Filter struct {
	CreatedAt   time.Time `json:"created_at"`
	Description *string   `json:"description,omitempty"`

	// Expression A table column filter.
	Expression FilterExpression `json:"expression"`

	// ID ID of the Filter
	ID   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`

	// QueryID The unique ID for the query.
	QueryID *QueryID `json:"query_id,omitempty"`

	// Table The name of the table.
	Table *TableName  `json:"table,omitempty"`
	Tags  []FilterTag `json:"tags,omitempty"`

	// UserID ID of the User
	UserID *UserID `json:"user_id,omitempty"`
}

// FilterCreate Saved filter
type FilterCreate struct {
	Description *string `json:"description,omitempty"`

	// Expression A table column filter.
	Expression FilterExpression `json:"expression"`
	Name       string           `json:"name"`

	// Public Whether the filter is visible to all users in the team, or only to the user who created it
	Public bool        `json:"public"`
	Tags   []FilterTag `json:"tags,omitempty"`
}

// FilterExpression A table column filter.
type FilterExpression = string

// FilterID The unique ID for the filter.
type FilterID = openapi_types.UUID

// FilterTag A table column filter tag.
type FilterTag = string

// FilterUpdate Filter Update Definition
type FilterUpdate struct {
	Description *string `json:"description,omitempty"`

	// Expression A table column filter.
	Expression *FilterExpression `json:"expression,omitempty"`
	Name       *string           `json:"name,omitempty"`
	Tags       *[]FilterTag      `json:"tags,omitempty"`
}

// FinalizePluginUIAssetUploadRequest defines model for FinalizePluginUIAssetUpload_request.
type FinalizePluginUIAssetUploadRequest struct {
	// UIID ID representing the finished upload
	UIID string `json:"ui_id"`
}

// GetConnectorAuthStatusAWS200Response defines model for GetConnectorAuthStatusAWS_200_response.
type GetConnectorAuthStatusAWS200Response struct {
	// ExternalID External ID used for the role
	ExternalID *string `json:"external_id,omitempty"`

	// RoleARN ARN of role created by the user
	RoleARN *string `json:"role_arn,omitempty"`
}

// GetConnectorAuthStatusGCP200Response defines model for GetConnectorAuthStatusGCP_200_response.
type GetConnectorAuthStatusGCP200Response struct {
	// ServiceAccount CloudQuery GCP Service Account to grant access to
	ServiceAccount *string `json:"service_account,omitempty"`
}

// GetCurrentUserMemberships200Response defines model for GetCurrentUserMemberships_200_response.
type GetCurrentUserMemberships200Response struct {
	Items    []MembershipWithTeam `json:"items"`
	Metadata ListMetadata         `json:"metadata"`
}

// GetCurrentUser200Response defines model for GetCurrentUser_200_response.
type GetCurrentUser200Response struct {
	CreatedAt        *time.Time              `json:"created_at,omitempty"`
	Email            string                  `json:"email"`
	EventIdentifiers *map[string]interface{} `json:"event_identifiers,omitempty"`
	GroupIdentifier  *string                 `json:"group_identifier,omitempty"`

	// ID ID of the User
	ID          openapi_types.UUID `json:"id"`
	LastLoginAt *time.Time         `json:"last_login_at,omitempty"`

	// Name The unique name for the user.
	Name *UserName `json:"name,omitempty"`

	// ProfileImageURL Profile image URL of user
	ProfileImageURL *string `json:"profile_image_url,omitempty"`

	// RegisteredTeamInternal Whether the team is internal or not
	RegisteredTeamInternal *bool `json:"registered_team_internal,omitempty"`

	// RegisteredTeamName The name of the team that the platform is registered with
	RegisteredTeamName *string    `json:"registered_team_name,omitempty"`
	UpdatedAt          *time.Time `json:"updated_at,omitempty"`
}

// GetCurrentUser401Response defines model for GetCurrentUser_401_response.
type GetCurrentUser401Response struct {
	Message string `json:"message"`

	// PasswordResetRequired Whether the user needs to reset their password
	PasswordResetRequired *bool `json:"password_reset_required,omitempty"`
	Status                int   `json:"status"`
}

// GetPlatformInfo200Response defines model for GetPlatformInfo_200_response.
type GetPlatformInfo200Response struct {
	PublicIps *[]string `json:"public_ips,omitempty"`
}

// GetPolicyViolationsHistory200Response defines model for GetPolicyViolationsHistory_200_response.
type GetPolicyViolationsHistory200Response struct {
	Details []PlatformPolicyViolationHistory `json:"details"`
}

// GetSyncRunConnectorCredentials200Response defines model for GetSyncRunConnectorCredentials_200_response.
type GetSyncRunConnectorCredentials200Response struct {
	// Aws AWS connector credentials response
	Aws *ConnectorCredentialsResponseAWS `json:"aws,omitempty"`

	// Oauth OAuth connector credentials response
	Oauth *ConnectorCredentialsResponseOAuth `json:"oauth,omitempty"`
}

// GetSyncRunConnectorIdentity200Response defines model for GetSyncRunConnectorIdentity_200_response.
type GetSyncRunConnectorIdentity200Response struct {
	// Aws AWS connector identity response
	Aws *ConnectorIdentityResponseAWS `json:"aws,omitempty"`
}

// GetSyncRunTables200Response defines model for GetSyncRunTables_200_response.
type GetSyncRunTables200Response struct {
	Items    []SyncRunTableStat `json:"items"`
	Metadata ListMetadata       `json:"metadata"`
}

// GetTeamMemberships200Response defines model for GetTeamMemberships_200_response.
type GetTeamMemberships200Response struct {
	Items    []MembershipWithUser `json:"items"`
	Metadata ListMetadata         `json:"metadata"`
}

// ImageURL defines model for ImageURL.
type ImageURL struct {
	DownloadUrl interface{} `json:"download_url"`

	// RequiredHeaders Required HTTP headers to include for the upload
	RequiredHeaders map[string]interface{} `json:"required_headers"`
	UploadUrl       interface{}            `json:"upload_url"`
}

// Index400Response defines model for Index_400_response.
type Index400Response struct {
	Errors               *[]string              `json:"errors,omitempty"`
	FieldErrors          *map[string]string     `json:"field_errors,omitempty"`
	Message              interface{}            `json:"message"`
	Status               interface{}            `json:"status"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Invitation defines model for Invitation.
type Invitation struct {
	CreatedAt time.Time `json:"created_at"`
	Email     Email     `json:"email"`
	Role      string    `json:"role"`

	// TeamName The unique name for the team.
	TeamName TeamName `json:"team_name"`
}

// InvitationWithToken defines model for InvitationWithToken.
type InvitationWithToken struct {
	CreatedAt time.Time `json:"created_at"`
	Email     Email     `json:"email"`
	Role      string    `json:"role"`

	// TeamName The unique name for the team.
	TeamName TeamName `json:"team_name"`

	// Token The token used to accept the invitation
	Token interface{} `json:"token"`
}

// ListAllAlerts200Response defines model for ListAllAlerts_200_response.
type ListAllAlerts200Response struct {
	Items    []AlertDetail `json:"items"`
	Metadata ListMetadata  `json:"metadata"`
}

// ListAllCustomColumns200Response defines model for ListAllCustomColumns_200_response.
type ListAllCustomColumns200Response struct {
	Items    []CustomColumn `json:"items"`
	Metadata ListMetadata   `json:"metadata"`
}

// ListAllFrameworks200Response defines model for ListAllFrameworks_200_response.
type ListAllFrameworks200Response struct {
	Frameworks []PlatformPolicyFramework `json:"frameworks"`
	Metadata   ListMetadata              `json:"metadata"`
}

// ListAllNotificationDestinations200Response defines model for ListAllNotificationDestinations_200_response.
type ListAllNotificationDestinations200Response struct {
	Items    []NotificationDestinationListItem `json:"items"`
	Metadata ListMetadata                      `json:"metadata"`
}

// ListAllQueriesTeam200Response defines model for ListAllQueriesTeam_200_response.
type ListAllQueriesTeam200Response struct {
	Items    []Query      `json:"items"`
	Metadata ListMetadata `json:"metadata"`
}

// ListAuditLogs200Response defines model for ListAuditLogs_200_response.
type ListAuditLogs200Response struct {
	Items    []AuditLogEvent `json:"items"`
	Metadata ListMetadata    `json:"metadata"`
}

// ListConnectors200Response defines model for ListConnectors_200_response.
type ListConnectors200Response struct {
	Items    []Connector  `json:"items"`
	Metadata ListMetadata `json:"metadata"`
}

// ListCurrentUserInvitations200Response defines model for ListCurrentUserInvitations_200_response.
type ListCurrentUserInvitations200Response struct {
	Items    []InvitationWithToken `json:"items"`
	Metadata ListMetadata          `json:"metadata"`
}

// ListFilterTags200Response defines model for ListFilterTags_200_response.
type ListFilterTags200Response struct {
	Items    []FilterTag  `json:"items"`
	Metadata ListMetadata `json:"metadata"`
}

// ListFilters200Response defines model for ListFilters_200_response.
type ListFilters200Response struct {
	Items    []Filter     `json:"items"`
	Metadata ListMetadata `json:"metadata"`
}

// ListLocalUsers200Response defines model for ListLocalUsers_200_response.
type ListLocalUsers200Response struct {
	Items    []LocalUser  `json:"items"`
	Metadata ListMetadata `json:"metadata"`
}

// ListMetadata defines model for ListMetadata.
type ListMetadata struct {
	LastPage   *int `json:"last_page,omitempty"`
	PageSize   int  `json:"page_size"`
	TimeMs     *int `json:"time_ms,omitempty"`
	TotalCount *int `json:"total_count,omitempty"`
}

// ListPlatformVersions200Response defines model for ListPlatformVersions_200_response.
type ListPlatformVersions200Response struct {
	Items    []PlatformVersion `json:"items"`
	Metadata ListMetadata      `json:"metadata"`
}

// ListPlugin defines model for ListPlugin.
type ListPlugin struct {
	// Category Supported categories for plugins
	Category  PluginCategory `json:"category"`
	CreatedAt time.Time      `json:"created_at"`

	// DisplayName The plugin's display name
	DisplayName string `json:"display_name"`

	// FreeRowsPerMonth Deprecated. Refer to `price_category` instead.
	// Deprecated:
	FreeRowsPerMonth int64   `json:"free_rows_per_month"`
	Homepage         *string `json:"homepage,omitempty"`

	// Kind The kind of plugin, ie. source or destination.
	Kind PluginKind `json:"kind"`

	// LatestVersion The version in semantic version format.
	LatestVersion *VersionName `json:"latest_version,omitempty"`
	Logo          string       `json:"logo"`

	// MinimumCloudVersion Minimum plugin version that is supported in CloudQuery managed syncs.
	MinimumCloudVersion *string `json:"minimum_cloud_version,omitempty"`

	// Name The unique name for the plugin.
	Name PluginName `json:"name"`

	// Official True if the plugin is maintained by CloudQuery, false otherwise
	Official bool `json:"official"`

	// PinnedVersion CloudQuery Pinned Plugin Version Info
	PinnedVersion *ListPluginPinnedVersion `json:"pinned_version,omitempty"`

	// PriceCategory Supported price categories for billing
	PriceCategory *PluginPriceCategory `json:"price_category,omitempty"`

	// Public Whether the plugin is listed in the CloudQuery Hub. If false, the plugin will not be shown in the CloudQuery Hub and will only be visible to members of the plugin's team.
	Public *bool `json:"public,omitempty"`

	// ReleaseStage Official plugins can go through three release stages: Coming Soon, Preview, and GA.
	// The Coming Soon stage is for plugins that are not yet ready for Preview, but users can subscribe to be notified when they are ready.
	// Both Preview and GA plugins follow semantic versioning. The main differences between the two stages are:
	// Preview plugins are still experimental and may have frequent breaking changes. Preview plugins might get deprecated due to lack of usage. Long Term Support with community Discord and bug fixes is only guaranteed for GA plugins. Premium plugins are often discounted or free during the Preview stage.
	ReleaseStage     PluginReleaseStage `json:"release_stage"`
	Repository       *string            `json:"repository,omitempty"`
	ShortDescription string             `json:"short_description"`

	// TeamName The unique name for the team.
	TeamName TeamName `json:"team_name"`

	// Tier This field is deprecated, refer to `price_category` instead.
	// This field is only kept for backward compatibility and may be removed in a future release.
	// Supported tiers for plugins.
	//   - free: Free tier, with no paid tables.
	//   - paid: Paid tier. These plugins may have paid tables, but can also have free tables. They require login to access.
	//   - open-core: This option is deprecated, values will either be free or paid.
	// Deprecated:
	Tier      PluginTier `json:"tier"`
	UpdatedAt time.Time  `json:"updated_at"`

	// USDPerRow Deprecated. Refer to `price_category` instead.
	// Deprecated:
	USDPerRow string `json:"usd_per_row"`
}

// ListPluginPinnedVersion CloudQuery Pinned Plugin Version Info
type ListPluginPinnedVersion struct {
	// Initialized Deprecated. Assume `true`.
	// Deprecated:
	Initialized bool `json:"initialized"`

	// Mirroring Deprecated. Assume `false`.
	// Deprecated:
	Mirroring bool `json:"mirroring"`

	// Name The version in semantic version format.
	Name VersionName `json:"name"`

	// Range A version range in semantic version format.
	Range VersionRange `json:"range"`
}

// ListPluginVersionDocs200Response defines model for ListPluginVersionDocs_200_response.
type ListPluginVersionDocs200Response struct {
	Items    []PluginDocsPage `json:"items"`
	Metadata ListMetadata     `json:"metadata"`
}

// ListPluginVersionTables200Response defines model for ListPluginVersionTables_200_response.
type ListPluginVersionTables200Response struct {
	Items    []PluginTable `json:"items"`
	Metadata ListMetadata  `json:"metadata"`
}

// ListPluginVersions200Response defines model for ListPluginVersions_200_response.
type ListPluginVersions200Response struct {
	Items    []PluginVersionList `json:"items"`
	Metadata ListMetadata        `json:"metadata"`
}

// ListPlugins defines model for ListPlugins.
type ListPlugins = []ListPlugin

// ListPluginsByTeam200Response defines model for ListPluginsByTeam_200_response.
type ListPluginsByTeam200Response struct {
	Items    []Plugin     `json:"items"`
	Metadata ListMetadata `json:"metadata"`
}

// ListPlugins200Response defines model for ListPlugins_200_response.
type ListPlugins200Response struct {
	Items    ListPlugins  `json:"items"`
	Metadata ListMetadata `json:"metadata"`
}

// ListPolicies200Response defines model for ListPolicies_200_response.
type ListPolicies200Response struct {
	Metadata ListMetadata     `json:"metadata"`
	Policies []PlatformPolicy `json:"policies"`
}

// ListPolicyRuleDetails200Response defines model for ListPolicyRuleDetails_200_response.
type ListPolicyRuleDetails200Response struct {
	Details  []PlatformPolicyRuleDetail `json:"details"`
	Metadata ListMetadata               `json:"metadata"`
}

// ListPolicyRules200Response defines model for ListPolicyRules_200_response.
type ListPolicyRules200Response struct {
	Metadata ListMetadata         `json:"metadata"`
	Rules    []PlatformPolicyRule `json:"rules"`
}

// ListQueryTagsTeam200Response defines model for ListQueryTagsTeam_200_response.
type ListQueryTagsTeam200Response struct {
	Items    []QueryTag   `json:"items"`
	Metadata ListMetadata `json:"metadata"`
}

// ListReportTemplates200Response defines model for ListReportTemplates_200_response.
type ListReportTemplates200Response struct {
	Metadata  ListMetadata     `json:"metadata"`
	Templates []ReportTemplate `json:"templates"`
}

// ListReports200Response defines model for ListReports_200_response.
type ListReports200Response struct {
	Metadata ListMetadata `json:"metadata"`
	Reports  []Report     `json:"reports"`
}

// ListSync defines model for ListSync.
type ListSync struct {
	// CPU CPU quota for the sync
	CPU interface{} `json:"cpu"`

	// CreatedAt Time when the sync was created
	CreatedAt interface{}  `json:"created_at"`
	CreatedBy *interface{} `json:"created_by,omitempty"`

	// Destinations List of destinations for the sync
	Destinations interface{} `json:"destinations"`

	// Disabled Whether the sync is disabled
	Disabled interface{} `json:"disabled"`

	// DisplayName A human-readable display name
	DisplayName DisplayName `json:"display_name"`

	// LastRun Managed Sync List Entry Last Run Info
	LastRun *ListSyncLastRun `json:"last_run,omitempty"`

	// Memory Memory quota for the sync
	Memory interface{} `json:"memory"`

	// Name Descriptive, unique name for the sync
	Name interface{} `json:"name"`

	// Schedule Cron schedule for the sync
	Schedule interface{} `json:"schedule"`

	// Source Unique name of the source
	Source interface{} `json:"source"`

	// UpdatedAt Time when the sync was updated
	UpdatedAt interface{} `json:"updated_at"`
}

// ListSyncDestinationSyncs200Response defines model for ListSyncDestinationSyncs_200_response.
type ListSyncDestinationSyncs200Response struct {
	Items    []ListSync   `json:"items"`
	Metadata ListMetadata `json:"metadata"`
}

// ListSyncDestinations200Response defines model for ListSyncDestinations_200_response.
type ListSyncDestinations200Response struct {
	Items    []SyncDestination `json:"items"`
	Metadata ListMetadata      `json:"metadata"`
}

// ListSyncLastRun Managed Sync List Entry Last Run Info
type ListSyncLastRun struct {
	// CompletedAt Time the sync run was completed
	CompletedAt *interface{} `json:"completed_at,omitempty"`

	// CreatedAt Time the sync run was created
	CreatedAt interface{} `json:"created_at"`

	// Errors Number of errors encountered during the sync
	Errors interface{} `json:"errors"`

	// ID unique ID of the run
	ID interface{} `json:"id"`

	// Migration Whether the sync run was a migration
	Migration interface{} `json:"migration"`

	// Status The status of the sync run
	Status SyncRunStatus `json:"status"`

	// StatusReason The reason for the status
	StatusReason *SyncRunStatusReason `json:"status_reason,omitempty"`

	// TotalRows Total number of rows in the sync
	TotalRows interface{} `json:"total_rows"`

	// Warnings Number of warnings encountered during the sync
	Warnings interface{} `json:"warnings"`
}

// ListSyncRuns200Response defines model for ListSyncRuns_200_response.
type ListSyncRuns200Response struct {
	Items    []SyncRun    `json:"items"`
	Metadata ListMetadata `json:"metadata"`
}

// ListSyncSources200Response defines model for ListSyncSources_200_response.
type ListSyncSources200Response struct {
	Items    []SyncSource `json:"items"`
	Metadata ListMetadata `json:"metadata"`
}

// ListSyncTransformerSyncs200Response defines model for ListSyncTransformerSyncs_200_response.
type ListSyncTransformerSyncs200Response struct {
	Items    []Sync       `json:"items"`
	Metadata ListMetadata `json:"metadata"`
}

// ListSyncTransformers200Response defines model for ListSyncTransformers_200_response.
type ListSyncTransformers200Response struct {
	Items    []SyncTransformer `json:"items"`
	Metadata ListMetadata      `json:"metadata"`
}

// ListSyncUpgrades200Response defines model for ListSyncUpgrades_200_response.
type ListSyncUpgrades200Response struct {
	Items    []SyncUpgrade `json:"items"`
	Metadata ListMetadata  `json:"metadata"`
}

// ListTables200Response defines model for ListTables_200_response.
type ListTables200Response struct {
	Items    []TableListItem `json:"items"`
	Metadata ListMetadata    `json:"metadata"`
}

// ListTeamAPIKeys200Response defines model for ListTeamAPIKeys_200_response.
type ListTeamAPIKeys200Response struct {
	// AllowedRoles List of allowed roles when creating a new API key
	AllowedRoles []APIKeyTeamRole `json:"allowed_roles"`
	Items        []APIKey         `json:"items"`
	Metadata     ListMetadata     `json:"metadata"`
}

// ListTeamInvitations200Response defines model for ListTeamInvitations_200_response.
type ListTeamInvitations200Response struct {
	Items    []Invitation `json:"items"`
	Metadata ListMetadata `json:"metadata"`
}

// ListUsersByTeam200Response defines model for ListUsersByTeam_200_response.
type ListUsersByTeam200Response struct {
	Items    []User       `json:"items"`
	Metadata ListMetadata `json:"metadata"`
}

// LocalUser defines model for LocalUser.
type LocalUser struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Email     string     `json:"email"`
	Enabled   bool       `json:"enabled"`

	// ID ID of the User
	ID          openapi_types.UUID `json:"id"`
	LastLoginAt *time.Time         `json:"last_login_at,omitempty"`

	// Name The unique name for the user.
	Name *UserName `json:"name,omitempty"`

	// ProfileImageURL Profile image URL of user
	ProfileImageURL *string           `json:"profile_image_url,omitempty"`
	Provider        LocalUserProvider `json:"provider"`

	// Roles Global roles for the user
	Roles []string `json:"roles"`

	// TrackingOptedIn Whether anonymous user tracking was opted into
	TrackingOptedIn *bool      `json:"tracking_opted_in,omitempty"`
	UpdatedAt       *time.Time `json:"updated_at,omitempty"`
}

// LocalUserProvider defines model for LocalUserProvider.
type LocalUserProvider string

// LocalUserWithTeams defines model for LocalUserWithTeams.
type LocalUserWithTeams struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Email     string     `json:"email"`
	Enabled   bool       `json:"enabled"`

	// ID ID of the User
	ID          openapi_types.UUID `json:"id"`
	LastLoginAt *time.Time         `json:"last_login_at,omitempty"`

	// Name The unique name for the user.
	Name *UserName `json:"name,omitempty"`

	// ProfileImageURL Profile image URL of user
	ProfileImageURL *string           `json:"profile_image_url,omitempty"`
	Provider        LocalUserProvider `json:"provider"`

	// Roles Global roles for the user
	Roles []string                 `json:"roles"`
	Teams []MembershipWithTeamName `json:"teams"`

	// TrackingOptedIn Whether anonymous user tracking was opted into
	TrackingOptedIn *bool      `json:"tracking_opted_in,omitempty"`
	UpdatedAt       *time.Time `json:"updated_at,omitempty"`
}

// LoginUserRequest defines model for LoginUser_request.
type LoginUserRequest struct {
	IDToken              interface{}            `json:"id_token"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ManageAddTeamMemberRequest defines model for ManageAddTeamMember_request.
type ManageAddTeamMemberRequest struct {
	Roles interface{} `json:"roles"`

	// UserID ID of the User
	UserID               openapi_types.UUID     `json:"user_id"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ManageGetPlatformRegistry200Response defines model for ManageGetPlatformRegistry_200_response.
type ManageGetPlatformRegistry200Response struct {
	// ActivationID Activation ID
	ActivationID *interface{} `json:"activation_id,omitempty"`

	// APIKeyLastFour Last 4 characters of the API key
	APIKeyLastFour *interface{} `json:"api_key_last_four,omitempty"`

	// InstallationID Installation ID
	InstallationID interface{} `json:"installation_id"`

	// LastActivatedAt Timestamp of the last activation
	LastActivatedAt *interface{} `json:"last_activated_at,omitempty"`

	// NextActivationAt Timestamp of the next activation
	NextActivationAt *interface{} `json:"next_activation_at,omitempty"`

	// OfflineLicenseExpiresAt Timestamp of the offline license expiration
	OfflineLicenseExpiresAt *interface{} `json:"offline_license_expires_at,omitempty"`

	// OfflineLicenseRegisteredTo Name the offline license is registered to
	OfflineLicenseRegisteredTo *interface{} `json:"offline_license_registered_to,omitempty"`

	// TeamName Name of the team that was activated
	TeamName             *interface{}           `json:"team_name,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ManageListAllTeams200Response defines model for ManageListAllTeams_200_response.
type ManageListAllTeams200Response struct {
	Items    []Team       `json:"items"`
	Metadata ListMetadata `json:"metadata"`
}

// ManageListTeamMembers200Response defines model for ManageListTeamMembers_200_response.
type ManageListTeamMembers200Response struct {
	Items    []MembershipWithUser `json:"items"`
	Metadata ListMetadata         `json:"metadata"`
}

// ManageRegisterPlatformWithOfflineLicense200Response defines model for ManageRegisterPlatformWithOfflineLicense_200_response.
type ManageRegisterPlatformWithOfflineLicense200Response struct {
	// ExpiresAt Timestamp of the offline license expiration
	ExpiresAt interface{} `json:"expires_at"`

	// RegisteredTo Name the offline license is registered to
	RegisteredTo         interface{}            `json:"registered_to"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ManageRegisterPlatformWithOfflineLicenseRequest defines model for ManageRegisterPlatformWithOfflineLicense_request.
type ManageRegisterPlatformWithOfflineLicenseRequest struct {
	// License Offline license
	License              interface{}            `json:"license"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ManageRegisterPlatform200Response defines model for ManageRegisterPlatform_200_response.
type ManageRegisterPlatform200Response struct {
	// TeamName Name of the team that was activated
	TeamName             interface{}            `json:"team_name"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ManageRegisterPlatform205Response defines model for ManageRegisterPlatform_205_response.
type ManageRegisterPlatform205Response struct {
	// ButtonText Text for the button
	ButtonText *interface{} `json:"button_text,omitempty"`

	// ButtonURL URL for the button
	ButtonURL *interface{} `json:"button_url,omitempty"`

	// Error Error message
	Error                interface{}            `json:"error"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ManageRegisterPlatformRequest defines model for ManageRegisterPlatform_request.
type ManageRegisterPlatformRequest struct {
	// APIKey Team API key to activate platform with
	APIKey               interface{}            `json:"api_key"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ManageRemoveTeamMemberRequest defines model for ManageRemoveTeamMember_request.
type ManageRemoveTeamMemberRequest struct {
	// UserID ID of the User
	UserID               openapi_types.UUID     `json:"user_id"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// MembershipWithTeam defines model for MembershipWithTeam.
type MembershipWithTeam struct {
	Roles []string `json:"roles"`

	// Team CloudQuery Team
	Team Team `json:"team"`
}

// MembershipWithTeamName defines model for MembershipWithTeamName.
type MembershipWithTeamName struct {
	CreatedAt time.Time `json:"created_at"`
	Roles     []string  `json:"roles"`

	// TeamName The unique name for the team.
	TeamName  TeamName  `json:"team_name"`
	UpdatedAt time.Time `json:"updated_at"`
}

// MembershipWithUser defines model for MembershipWithUser.
type MembershipWithUser struct {
	Roles []string `json:"roles"`

	// User CloudQuery User
	User User `json:"user"`
}

// NotificationDestination Notification Destination
type NotificationDestination struct {
	CreatedAt   time.Time         `json:"created_at"`
	Enabled     bool              `json:"enabled"`
	HTTPBody    *string           `json:"http_body,omitempty"`
	HTTPHeaders map[string]string `json:"http_headers,omitempty"`

	// NotificationDestinationID The unique ID for the notification destination.
	NotificationDestinationID NotificationDestinationID `json:"id"`
	Name                      string                    `json:"name"`
	UpdatedAt                 time.Time                 `json:"updated_at"`
	URL                       string                    `json:"url"`
}

// NotificationDestinationCreate defines model for NotificationDestinationCreate.
type NotificationDestinationCreate struct {
	Enabled     bool              `json:"enabled"`
	HTTPBody    *string           `json:"http_body,omitempty"`
	HTTPHeaders map[string]string `json:"http_headers,omitempty"`
	Name        string            `json:"name"`
	URL         string            `json:"url"`
}

// NotificationDestinationData Notification Destination Data
type NotificationDestinationData struct {
	HTTPBody    *string           `json:"http_body,omitempty"`
	HTTPHeaders map[string]string `json:"http_headers,omitempty"`
	URL         string            `json:"url"`
}

// NotificationDestinationID The unique ID for the notification destination.
type NotificationDestinationID = openapi_types.UUID

// NotificationDestinationListItem Notification Destination List Item
type NotificationDestinationListItem struct {
	CreatedAt time.Time `json:"created_at"`
	Enabled   bool      `json:"enabled"`

	// NotificationDestinationID The unique ID for the notification destination.
	NotificationDestinationID NotificationDestinationID `json:"id"`
	Name                      string                    `json:"name"`
	UpdatedAt                 time.Time                 `json:"updated_at"`
	URL                       string                    `json:"url"`
}

// NotificationDestinationTestResponse Notification Destination Test Response
type NotificationDestinationTestResponse struct {
	// HTTPBody Body of the HTTP response from the notification destination
	HTTPBody string `json:"http_body"`

	// HTTPHeaders Headers returned by the notification destination
	HTTPHeaders map[string]string `json:"http_headers"`

	// HTTPStatus HTTP status message returned by the notification destination
	HTTPStatus string `json:"http_status"`

	// HTTPStatusCode HTTP status code returned by the notification destination
	HTTPStatusCode int `json:"http_status_code"`

	// IsSuccess Indicates if the test was successful
	IsSuccess bool `json:"is_success"`
}

// NotificationDestinationUpdate Update Notification Destination
type NotificationDestinationUpdate struct {
	Enabled     *bool              `json:"enabled,omitempty"`
	HTTPBody    *string            `json:"http_body,omitempty"`
	HTTPHeaders *map[string]string `json:"http_headers,omitempty"`
	Name        *string            `json:"name,omitempty"`
	URL         *string            `json:"url,omitempty"`
}

// OnboardingAWS AWS OpenID onboarding
type OnboardingAWS struct {
	// Audience OpenID audience claim for the trust realshionship
	Audience  string    `json:"audience"`
	CreatedAt time.Time `json:"created_at"`

	// FailureReason CloudFormation stack errors
	FailureReason *string `json:"failure_reason,omitempty"`

	// OnboardingID ID of the cloud provider onboarding session
	OnboardingID OnboardingID `json:"id"`

	// IssuerURL URL of the OpenID server to use when setting up a trust relationship
	IssuerURL string `json:"issuer_url"`

	// ManagementRoleARN Role used to manage the platform onboarding
	ManagementRoleARN *string `json:"management_role_arn,omitempty"`

	// OrganizationalUnitIDs (organization mode) A list of Organizational Unit (OU) IDs included in this onboarding.
	OrganizationalUnitIDs *[]string `json:"organizational_units,omitempty"`

	// OnboardingStage Stage of the onboarding process
	OnboardingStage string `json:"stage"`

	// Subject OpenID subject claim for the trust relationship
	Subject string `json:"subject"`

	// SyncRoleName (organization mode) The name of the sync role used to sync a specific account within the organization.
	// Note: This is the role name only, not the full ARN.
	SyncRoleName *string   `json:"sync_role_name,omitempty"`
	UpdatedAt    time.Time `json:"updated_at"`
}

// OnboardingAWSAccounts AWS OpenID onboarding account structure
type OnboardingAWSAccounts struct {
	// ARN ARN of the account or OU
	ARN *interface{} `json:"arn,omitempty"`

	// Children Children accounts and OUs of the target account
	Children *interface{} `json:"children,omitempty"`

	// ID ID of the account or OU
	ID interface{} `json:"id"`

	// Name Display name of the account or OU
	Name *interface{} `json:"name,omitempty"`

	// Type Type of the account
	Type interface{} `json:"type"`
}

// OnboardingAWSCreateResponse AWS OpenID onboarding
type OnboardingAWSCreateResponse struct {
	// Audience OpenID audience claim for the trust realshionship
	Audience string `json:"audience"`

	// OnboardingID ID of the cloud provider onboarding session
	OnboardingID OnboardingID `json:"id"`

	// IssuerURL URL of the OpenID server to use when setting up a trust relationship
	IssuerURL string `json:"issuer_url"`

	// NotifyPath Path of the notify endpoint to use for status updates
	NotifyPath string `json:"notify_path"`

	// NotifyToken An authentication token that should be used for notifications
	NotifyToken string `json:"notify_token"`

	// Region An AWS region (such as 'us-east-1') where stack is deployed
	Region *string `json:"region,omitempty"`

	// StackName Stack name that should be used
	StackName *string `json:"stack_name,omitempty"`

	// Subject OpenID subject claim for the trust relationship
	Subject string `json:"subject"`

	// TemplateURL URL of the CloudFormation template to use for the authentication
	TemplateURL string `json:"template_url"`
}

// OnboardingAWSNotification defines model for OnboardingAWSNotification.
type OnboardingAWSNotification struct {
	union json.RawMessage
}

// OnboardingAWSProvision Stackset provisioning configuration
type OnboardingAWSProvision struct {
	// NotifyUrl URL that should be used for provisioning notifications (including scheme, hostname, and path)
	NotifyUrl interface{} `json:"notify_url"`

	// OrganizationalUnits OUs to provision roles into
	OrganizationalUnits interface{} `json:"organizational_units"`

	// SkipAccounts Account IDs to skip onboarding
	SkipAccounts *interface{} `json:"skip_accounts,omitempty"`
}

// OnboardingID ID of the cloud provider onboarding session
type OnboardingID = openapi_types.UUID

// OrganizationalUnitID ID of an organizational unit in AWS
type OrganizationalUnitID = interface{}

// PlatformCreateOrUpdatePolicy defines model for PlatformCreateOrUpdatePolicy.
type PlatformCreateOrUpdatePolicy struct {
	Description  interface{}  `json:"description"`
	FilterID     *interface{} `json:"filter_id,omitempty"`
	FrameworkIDs interface{}  `json:"framework_ids"`
	Name         interface{}  `json:"name"`
	Status       interface{}  `json:"status"`
}

// PlatformPolicy defines model for PlatformPolicy.
type PlatformPolicy struct {
	CreatedAt *interface{} `json:"created_at,omitempty"`

	// CreatedBy Deprecated: Use created_by2 instead
	CreatedBy          *interface{} `json:"created_by,omitempty"`
	CreatedBy2         *CreatedBy   `json:"created_by2,omitempty"`
	Description        interface{}  `json:"description"`
	EvaluatedResources *interface{} `json:"evaluated_resources,omitempty"`
	FilterID           *interface{} `json:"filter_id,omitempty"`
	FrameworkIDs       interface{}  `json:"framework_ids"`
	ID                 interface{}  `json:"id"`
	Name               interface{}  `json:"name"`
	RuleViolations     *interface{} `json:"rule_violations,omitempty"`
	Status             interface{}  `json:"status"`
	UpdatedAt          *interface{} `json:"updated_at,omitempty"`
	UpdatedBy          *CreatedBy   `json:"updated_by,omitempty"`
}

// PlatformPolicyFramework defines model for PlatformPolicyFramework.
type PlatformPolicyFramework struct {
	Description *interface{} `json:"description,omitempty"`
	ID          interface{}  `json:"id"`
	Label       interface{}  `json:"label"`
}

// PlatformPolicyFrameworkSortBy defines model for PlatformPolicyFrameworkSortBy.
type PlatformPolicyFrameworkSortBy = interface{}

// PlatformPolicyRule defines model for PlatformPolicyRule.
type PlatformPolicyRule struct {
	Category      *interface{} `json:"category,omitempty"`
	Description   *interface{} `json:"description,omitempty"`
	FrameworkID   *interface{} `json:"framework_id,omitempty"`
	FrameworkName *interface{} `json:"framework_name,omitempty"`
	ID            *interface{} `json:"id,omitempty"`
	LearnMoreLink *interface{} `json:"learn_more_link,omitempty"`
	Name          *interface{} `json:"name,omitempty"`
	Remediation   *interface{} `json:"remediation,omitempty"`
	Risk          *interface{} `json:"risk,omitempty"`
	Violations    *interface{} `json:"violations,omitempty"`
}

// PlatformPolicyRuleDetail defines model for PlatformPolicyRuleDetail.
type PlatformPolicyRuleDetail struct {
	Account *interface{} `json:"account,omitempty"`
	Cloud   *interface{} `json:"cloud,omitempty"`
	Name    *interface{} `json:"name,omitempty"`
	Region  *interface{} `json:"region,omitempty"`
	Tags    *interface{} `json:"tags,omitempty"`
}

// PlatformPolicyRuleDetailSortBy defines model for PlatformPolicyRuleDetailSortBy.
type PlatformPolicyRuleDetailSortBy = interface{}

// PlatformPolicyRuleSortBy defines model for PlatformPolicyRuleSortBy.
type PlatformPolicyRuleSortBy = interface{}

// PlatformPolicySortBy defines model for PlatformPolicySortBy.
type PlatformPolicySortBy = interface{}

// PlatformPolicySortDirection defines model for PlatformPolicySortDirection.
type PlatformPolicySortDirection string

// PlatformPolicyViolationHistory defines model for PlatformPolicyViolationHistory.
type PlatformPolicyViolationHistory struct {
	// CreatedAt Time the rule violations were logged.
	CreatedAt interface{} `json:"created_at"`
	ID        interface{} `json:"id"`

	// RuleViolations Number of rule violations logged.
	RuleViolations interface{} `json:"rule_violations"`
}

// PlatformSettings Platform settings definition
type PlatformSettings struct {
	// EnforceMfa Whether or not to require MFA for all users
	EnforceMfa bool `json:"enforce_mfa"`
}

// PlatformSettingsUpdate Platform settings partial update
type PlatformSettingsUpdate struct {
	// EnforceMfa Whether or not to require MFA for all users
	EnforceMfa *bool `json:"enforce_mfa,omitempty"`
}

// PlatformVersion defines model for PlatformVersion.
type PlatformVersion struct {
	// CreatedAt Time when the version was first installed
	CreatedAt time.Time `json:"created_at"`

	// Name Name of the version
	Name string `json:"name"`
}

// Plugin CloudQuery Plugin
type Plugin struct {
	// Category Supported categories for plugins
	Category  PluginCategory `json:"category"`
	CreatedAt time.Time      `json:"created_at"`

	// DisplayName The plugin's display name
	DisplayName string `json:"display_name"`

	// FreeRowsPerMonth Deprecated. Refer to `price_category` instead.
	// Deprecated:
	FreeRowsPerMonth int64   `json:"free_rows_per_month"`
	Homepage         *string `json:"homepage,omitempty"`

	// Kind The kind of plugin, ie. source or destination.
	Kind PluginKind `json:"kind"`
	Logo string     `json:"logo"`

	// MinimumCloudVersion Minimum plugin version that is supported in CloudQuery managed syncs.
	MinimumCloudVersion *string `json:"minimum_cloud_version,omitempty"`

	// Name The unique name for the plugin.
	Name PluginName `json:"name"`

	// Official True if the plugin is maintained by CloudQuery, false otherwise
	Official bool `json:"official"`

	// PriceCategory Supported price categories for billing
	PriceCategory *PluginPriceCategory `json:"price_category,omitempty"`

	// Public Whether the plugin is listed in the CloudQuery Hub. If false, the plugin will not be shown in the CloudQuery Hub and will only be visible to members of the plugin's team.
	Public *bool `json:"public,omitempty"`

	// ReleaseStage Official plugins can go through three release stages: Coming Soon, Preview, and GA.
	// The Coming Soon stage is for plugins that are not yet ready for Preview, but users can subscribe to be notified when they are ready.
	// Both Preview and GA plugins follow semantic versioning. The main differences between the two stages are:
	// Preview plugins are still experimental and may have frequent breaking changes. Preview plugins might get deprecated due to lack of usage. Long Term Support with community Discord and bug fixes is only guaranteed for GA plugins. Premium plugins are often discounted or free during the Preview stage.
	ReleaseStage     PluginReleaseStage `json:"release_stage"`
	Repository       *string            `json:"repository,omitempty"`
	ShortDescription string             `json:"short_description"`

	// TeamName The unique name for the team.
	TeamName TeamName `json:"team_name"`

	// Tier This field is deprecated, refer to `price_category` instead.
	// This field is only kept for backward compatibility and may be removed in a future release.
	// Supported tiers for plugins.
	//   - free: Free tier, with no paid tables.
	//   - paid: Paid tier. These plugins may have paid tables, but can also have free tables. They require login to access.
	//   - open-core: This option is deprecated, values will either be free or paid.
	// Deprecated:
	Tier      PluginTier `json:"tier"`
	UpdatedAt time.Time  `json:"updated_at"`

	// USDPerRow Deprecated. Refer to `price_category` instead.
	// Deprecated:
	USDPerRow string `json:"usd_per_row"`
}

// PluginAsset CloudQuery Plugin Asset
type PluginAsset struct {
	// Checksum The checksum of the plugin asset
	Checksum string `json:"checksum"`

	// Location The location to download the plugin asset from
	Location string `json:"location"`
}

// PluginCategory Supported categories for plugins
type PluginCategory string

// PluginCreate defines model for PluginCreate.
type PluginCreate struct {
	// Category Supported categories for plugins
	Category PluginCategory `json:"category"`

	// DisplayName The plugin's display name, as shown in the CloudQuery Hub.
	DisplayName string `json:"display_name"`

	// FreeRowsPerMonth Deprecated. Use `price_category` instead.
	// Deprecated:
	FreeRowsPerMonth *int64  `json:"free_rows_per_month,omitempty"`
	Homepage         *string `json:"homepage,omitempty"`

	// Kind The kind of plugin, ie. source or destination.
	Kind PluginKind `json:"kind"`

	// Logo URL to the plugin's logo. This will be shown in the CloudQuery Hub.
	Logo *string `json:"logo,omitempty"`

	// Name The unique name for the plugin.
	Name PluginName `json:"name"`

	// PriceCategory Supported price categories for billing
	PriceCategory *PluginPriceCategory `json:"price_category,omitempty"`

	// Public Whether the plugin is listed in the CloudQuery Hub. If false, the plugin will not be shown in the CloudQuery Hub and will only be visible to members of the team.
	Public bool `json:"public"`

	// ReleaseStage Official plugins can go through three release stages: Coming Soon, Preview, and GA.
	// The Coming Soon stage is for plugins that are not yet ready for Preview, but users can subscribe to be notified when they are ready.
	// Both Preview and GA plugins follow semantic versioning. The main differences between the two stages are:
	// Preview plugins are still experimental and may have frequent breaking changes. Preview plugins might get deprecated due to lack of usage. Long Term Support with community Discord and bug fixes is only guaranteed for GA plugins. Premium plugins are often discounted or free during the Preview stage.
	ReleaseStage *PluginReleaseStageCreate `json:"release_stage,omitempty"`
	Repository   *string                   `json:"repository,omitempty"`

	// ShortDescription Short description of the plugin. This will be shown in the CloudQuery Hub.
	ShortDescription string `json:"short_description"`

	// TeamName The unique name for the team.
	TeamName TeamName `json:"team_name"`

	// Tier This field is deprecated, refer to `price_category` instead.
	// This field is only kept for backward compatibility and may be removed in a future release.
	// Supported tiers for plugins.
	//   - free: Free tier, with no paid tables.
	//   - paid: Paid tier. These plugins may have paid tables, but can also have free tables. They require login to access.
	//   - open-core: This option is deprecated, values will either be free or paid.
	// Deprecated:
	Tier *PluginTier `json:"tier,omitempty"`

	// USDPerRow Deprecated. Use `price_category` instead.
	// Deprecated:
	USDPerRow *string `json:"usd_per_row,omitempty"`
}

// PluginDocsPage CloudQuery Plugin Documentation Page
type PluginDocsPage struct {
	// Content The content of the documentation page. Supports markdown.
	Content string `json:"content"`

	// Name The unique name for the plugin documentation page.
	Name PluginDocsPageName `json:"name"`
}

// PluginDocsPageCreate CloudQuery Plugin Documentation Page
type PluginDocsPageCreate struct {
	// Content The content of the documentation page. Supports markdown.
	Content string `json:"content"`

	// Name The unique name for the plugin documentation page.
	Name PluginDocsPageName `json:"name"`
}

// PluginDocsPageName The unique name for the plugin documentation page.
type PluginDocsPageName = string

// PluginKind The kind of plugin, ie. source or destination.
type PluginKind string

// PluginName The unique name for the plugin.
type PluginName = string

// PluginPackageType The package type of the plugin assets
type PluginPackageType string

// PluginPriceCategory Supported price categories for billing
type PluginPriceCategory string

// PluginProtocols The CloudQuery protocols supported by this plugin version (only protocol 3 is supported by new plugins).
type PluginProtocols = []int

// PluginReleaseStage Official plugins can go through three release stages: Coming Soon, Preview, and GA.
// The Coming Soon stage is for plugins that are not yet ready for Preview, but users can subscribe to be notified when they are ready.
// Both Preview and GA plugins follow semantic versioning. The main differences between the two stages are:
// Preview plugins are still experimental and may have frequent breaking changes. Preview plugins might get deprecated due to lack of usage. Long Term Support with community Discord and bug fixes is only guaranteed for GA plugins. Premium plugins are often discounted or free during the Preview stage.
type PluginReleaseStage string

// PluginReleaseStageCreate Official plugins can go through three release stages: Coming Soon, Preview, and GA.
// The Coming Soon stage is for plugins that are not yet ready for Preview, but users can subscribe to be notified when they are ready.
// Both Preview and GA plugins follow semantic versioning. The main differences between the two stages are:
// Preview plugins are still experimental and may have frequent breaking changes. Preview plugins might get deprecated due to lack of usage. Long Term Support with community Discord and bug fixes is only guaranteed for GA plugins. Premium plugins are often discounted or free during the Preview stage.
type PluginReleaseStageCreate string

// PluginReleaseStageUpdate Official plugins can go through three release stages: Coming Soon, Preview, and GA.
// The Coming Soon stage is for plugins that are not yet ready for Preview, but users can subscribe to be notified when they are ready.
// Both Preview and GA plugins follow semantic versioning. The main differences between the two stages are:
// Preview plugins are still experimental and may have frequent breaking changes. Preview plugins might get deprecated due to lack of usage. Long Term Support with community Discord and bug fixes is only guaranteed for GA plugins. Premium plugins are often discounted or free during the Preview stage.
type PluginReleaseStageUpdate string

// PluginSpecJSONSchema The specification of the plugin. This is a JSON schema that describes the configuration of the plugin.
type PluginSpecJSONSchema = string

// PluginTable CloudQuery Plugin Table
type PluginTable struct {
	// Description Description of the table
	Description string `json:"description"`

	// IsIncremental Whether the table is incremental
	IsIncremental bool `json:"is_incremental"`

	// IsPaid Whether the table is paid
	IsPaid *bool `json:"is_paid,omitempty"`

	// Name Name of the table
	Name PluginTableName `json:"name"`

	// Parent Name of the parent table, if any
	Parent *string `json:"parent,omitempty"`

	// Relations Names of the tables that depend on this table
	Relations []string `json:"relations"`

	// Title Title of the table
	Title string `json:"title"`
}

// PluginTableColumn CloudQuery Plugin Column
type PluginTableColumn struct {
	// Description Description of the column
	Description string `json:"description"`

	// IncrementalKey Whether the column is used as an incremental key
	IncrementalKey bool `json:"incremental_key"`

	// Name Name of the column
	Name string `json:"name"`

	// NotNull Whether the column is nullable
	NotNull bool `json:"not_null"`

	// PrimaryKey Whether the column is part of the primary key
	PrimaryKey bool `json:"primary_key"`

	// Type Arrow Type of the column
	Type string `json:"type"`

	// TypeSchema For columns of type JSON, the schema of the JSON object
	TypeSchema *string `json:"type_schema,omitempty"`

	// Unique Whether the column has a unique constraint
	Unique bool `json:"unique"`
}

// PluginTableCreate CloudQuery Plugin Table
type PluginTableCreate struct {
	Columns *[]PluginTableColumn `json:"columns,omitempty"`

	// Description Description of the table
	Description *string `json:"description,omitempty"`

	// IsIncremental Whether the table is incremental
	IsIncremental *bool `json:"is_incremental,omitempty"`

	// IsPaid Whether the table is paid
	IsPaid *bool `json:"is_paid,omitempty"`

	// Name Name of the table
	Name PluginTableName `json:"name"`

	// Parent Name of the parent table, if any
	Parent *string `json:"parent,omitempty"`

	// PermissionsNeeded List of permissions needed to access this table, if any
	PermissionsNeeded *[]string `json:"permissions_needed,omitempty"`

	// Relations Names of the tables that depend on this table
	Relations *[]string `json:"relations,omitempty"`

	// Title Title of the table
	Title *string `json:"title,omitempty"`
}

// PluginTableDetails defines model for PluginTableDetails.
type PluginTableDetails struct {
	// Columns List of columns
	Columns []PluginTableColumn `json:"columns"`

	// Description Description of the table
	Description string `json:"description"`

	// IsIncremental Whether the table is incremental
	IsIncremental bool `json:"is_incremental"`

	// IsPaid Whether the table is paid
	IsPaid *bool `json:"is_paid,omitempty"`

	// Name Name of the table
	Name string `json:"name"`

	// Parent Name of the parent table, if any
	Parent *string `json:"parent,omitempty"`

	// PermissionsNeeded List of permissions needed to access this table, if any
	PermissionsNeeded []string `json:"permissions_needed"`

	// Relations Names of the tables that depend on this table
	Relations []string `json:"relations"`

	// Title Title of the table
	Title string `json:"title"`
}

// PluginTableName Name of the table
type PluginTableName = string

// PluginTier This field is deprecated, refer to `price_category` instead.
// This field is only kept for backward compatibility and may be removed in a future release.
// Supported tiers for plugins.
//   - free: Free tier, with no paid tables.
//   - paid: Paid tier. These plugins may have paid tables, but can also have free tables. They require login to access.
//   - open-core: This option is deprecated, values will either be free or paid.
type PluginTier string

// PluginUIAsset CloudQuery Plugin UI Asset
type PluginUIAsset struct {
	// Name The path and name of the asset
	Name string `json:"name"`

	// UploadURL URL to upload the asset to
	UploadURL string `json:"upload_url"`
}

// PluginUIAssetUploadRequest CloudQuery Plugin UI Asset Upload Request
type PluginUIAssetUploadRequest struct {
	// ContentType Content-type of the asset
	ContentType *string `json:"content_type,omitempty"`

	// Name The path and name of the asset
	Name string `json:"name"`
}

// PluginUpdate defines model for PluginUpdate.
type PluginUpdate struct {
	// Category Supported categories for plugins
	Category *PluginCategory `json:"category,omitempty"`

	// DisplayName The plugin's display name, as shown in the CloudQuery Hub.
	DisplayName *string `json:"display_name,omitempty"`

	// FreeRowsPerMonth Deprecated. Update `price_category` instead.
	// Deprecated:
	FreeRowsPerMonth *int64  `json:"free_rows_per_month,omitempty"`
	Homepage         *string `json:"homepage,omitempty"`

	// Logo URL to the plugin's logo. This will be shown in the CloudQuery Hub.
	Logo *string `json:"logo,omitempty"`

	// PriceCategory Supported price categories for billing
	PriceCategory *PluginPriceCategory `json:"price_category,omitempty"`

	// Public If plugin is not public, it won't be visible to other teams in the CloudQuery Hub.
	Public *bool `json:"public,omitempty"`

	// ReleaseStage Official plugins can go through three release stages: Coming Soon, Preview, and GA.
	// The Coming Soon stage is for plugins that are not yet ready for Preview, but users can subscribe to be notified when they are ready.
	// Both Preview and GA plugins follow semantic versioning. The main differences between the two stages are:
	// Preview plugins are still experimental and may have frequent breaking changes. Preview plugins might get deprecated due to lack of usage. Long Term Support with community Discord and bug fixes is only guaranteed for GA plugins. Premium plugins are often discounted or free during the Preview stage.
	ReleaseStage *PluginReleaseStageUpdate `json:"release_stage,omitempty"`
	Repository   *string                   `json:"repository,omitempty"`

	// ShortDescription Short description of the plugin. This will be shown in the CloudQuery Hub.
	ShortDescription *string `json:"short_description,omitempty"`

	// Tier This field is deprecated, refer to `price_category` instead.
	// This field is only kept for backward compatibility and may be removed in a future release.
	// Supported tiers for plugins.
	//   - free: Free tier, with no paid tables.
	//   - paid: Paid tier. These plugins may have paid tables, but can also have free tables. They require login to access.
	//   - open-core: This option is deprecated, values will either be free or paid.
	// Deprecated:
	Tier *PluginTier `json:"tier,omitempty"`

	// USDPerRow Deprecated. Update `price_category` instead.
	// Deprecated:
	USDPerRow *string `json:"usd_per_row,omitempty"`
}

// PluginVersion defines model for PluginVersion.
type PluginVersion struct {
	// Checksums The checksums of the plugin assets
	Checksums []string `json:"checksums"`

	// ConnectorRequired Whether a connector is required for this plugin version
	ConnectorRequired *bool `json:"connector_required,omitempty"`

	// ConnectorTypes List of connector types available for this plugin version
	ConnectorTypes *[]string `json:"connector_types,omitempty"`

	// CreatedAt The date and time the plugin version was created.
	CreatedAt time.Time `json:"created_at"`

	// Draft If a plugin version is in draft, it will not show to members outside the team or be counted as the latest version.
	Draft bool `json:"draft"`

	// Message Description of what's new or changed in this version (supports markdown)
	Message string `json:"message"`

	// Name The version in semantic version format.
	Name VersionName `json:"name"`

	// PackageType The package type of the plugin assets
	PackageType PluginPackageType `json:"package_type"`

	// Protocols The CloudQuery protocols supported by this plugin version (only protocol 3 is supported by new plugins).
	Protocols PluginProtocols `json:"protocols"`

	// PublishedAt The date and time the plugin version was set to non-draft (published).
	PublishedAt *time.Time `json:"published_at,omitempty"`

	// Retracted If a plugin version is retracted, assets will still be available for download, but the version will be marked as retracted to discourage use.
	Retracted bool `json:"retracted"`

	// SpecJsonSchema The specification of the plugin. This is a JSON schema that describes the configuration of the plugin.
	SpecJsonSchema *PluginSpecJSONSchema `json:"spec_json_schema,omitempty"`

	// SupportedTargets The targets supported by this plugin version, formatted as <os>_<arch>
	SupportedTargets []string `json:"supported_targets"`
}

// PluginVersionBase CloudQuery Plugin Version
type PluginVersionBase struct {
	// Checksums The checksums of the plugin assets
	Checksums []string `json:"checksums"`

	// CreatedAt The date and time the plugin version was created.
	CreatedAt time.Time `json:"created_at"`

	// Draft If a plugin version is in draft, it will not show to members outside the team or be counted as the latest version.
	Draft bool `json:"draft"`

	// Message Description of what's new or changed in this version (supports markdown)
	Message string `json:"message"`

	// Name The version in semantic version format.
	Name VersionName `json:"name"`

	// PackageType The package type of the plugin assets
	PackageType PluginPackageType `json:"package_type"`

	// Protocols The CloudQuery protocols supported by this plugin version (only protocol 3 is supported by new plugins).
	Protocols PluginProtocols `json:"protocols"`

	// PublishedAt The date and time the plugin version was set to non-draft (published).
	PublishedAt *time.Time `json:"published_at,omitempty"`

	// Retracted If a plugin version is retracted, assets will still be available for download, but the version will be marked as retracted to discourage use.
	Retracted bool `json:"retracted"`

	// SupportedTargets The targets supported by this plugin version, formatted as <os>_<arch>
	SupportedTargets []string `json:"supported_targets"`
}

// PluginVersionDetails defines model for PluginVersionDetails.
type PluginVersionDetails struct {
	// Checksums The checksums of the plugin assets
	Checksums []string `json:"checksums"`

	// ConnectorRequired Whether a connector is required for this plugin version
	ConnectorRequired *bool `json:"connector_required,omitempty"`

	// ConnectorTypes List of connector types available for this plugin version
	ConnectorTypes *[]string `json:"connector_types,omitempty"`

	// CreatedAt The date and time the plugin version was created.
	CreatedAt time.Time `json:"created_at"`

	// Draft If a plugin version is in draft, it will not show to members outside the team or be counted as the latest version.
	Draft bool `json:"draft"`

	// ExampleConfig Example configuration for the plugin. This can be used in generated quickstart guides, for example. Markdown format.
	ExampleConfig string `json:"example_config"`

	// Message Description of what's new or changed in this version (supports markdown)
	Message string `json:"message"`

	// Name The version in semantic version format.
	Name VersionName `json:"name"`

	// PackageType The package type of the plugin assets
	PackageType PluginPackageType `json:"package_type"`

	// Protocols The CloudQuery protocols supported by this plugin version (only protocol 3 is supported by new plugins).
	Protocols PluginProtocols `json:"protocols"`

	// PublishedAt The date and time the plugin version was set to non-draft (published).
	PublishedAt *time.Time `json:"published_at,omitempty"`

	// Retracted If a plugin version is retracted, assets will still be available for download, but the version will be marked as retracted to discourage use.
	Retracted bool `json:"retracted"`

	// SpecJsonSchema The specification of the plugin. This is a JSON schema that describes the configuration of the plugin.
	SpecJsonSchema *PluginSpecJSONSchema `json:"spec_json_schema,omitempty"`

	// SupportedTargets The targets supported by this plugin version, formatted as <os>_<arch>
	SupportedTargets []string `json:"supported_targets"`

	// UIBaseURL Base URL for the plugin's UI. Only available for plugins with a UI and for logged in users.
	UIBaseURL *string `json:"ui_base_url,omitempty"`
}

// PluginVersionList CloudQuery Plugin Version
type PluginVersionList = PluginVersionBase

// PluginVersionUpdate defines model for PluginVersionUpdate.
type PluginVersionUpdate struct {
	// Checksums The SHA-256 checksums of the plugin binaries, one per supported target.
	Checksums *[]string `json:"checksums,omitempty"`

	// Draft If a plugin version is in draft, it will not show to members outside the team or be counted as the latest version. Once draft is set to false, only certain fields can be updated.
	Draft *bool `json:"draft,omitempty"`

	// Message Description of what's new or changed in this version (supports markdown)
	Message *string `json:"message,omitempty"`

	// PackageType The package type of the plugin binaries
	PackageType *string `json:"package_type,omitempty"`

	// Protocols The CloudQuery protocols supported by this plugin version (only protocol 3 is supported by new plugins).
	Protocols *PluginProtocols `json:"protocols,omitempty"`

	// Retracted If a plugin version is retracted, assets will still be available for download, but the version will be marked as retracted to discourage use.
	Retracted *bool `json:"retracted,omitempty"`

	// SpecJsonSchema The specification of the plugin. This is a JSON schema that describes the configuration of the plugin.
	SpecJsonSchema   *PluginSpecJSONSchema `json:"spec_json_schema,omitempty"`
	SupportedTargets *[]string             `json:"supported_targets,omitempty"`
}

// PromoteSyncDestinationTestConnection Sync Destination Definition
type PromoteSyncDestinationTestConnection struct {
	// DisplayName A human-readable display name
	DisplayName *DisplayName `json:"display_name,omitempty"`

	// MigrateMode Migrate mode for the destination
	MigrateMode *SyncDestinationMigrateMode `json:"migrate_mode,omitempty"`

	// Name Descriptive, unique name for the destination
	Name interface{} `json:"name"`

	// OverwriteDestination Set this to allow overwriting an existing sync destination. Defaults to true to preserve compatibility.
	OverwriteDestination *interface{} `json:"overwrite_destination,omitempty"`
	SendSyncSummary      *interface{} `json:"send_sync_summary,omitempty"`

	// WriteMode Write mode for the destination
	WriteMode *SyncDestinationWriteMode `json:"write_mode,omitempty"`
}

// PromoteSyncSourceTestConnection Sync Source Definition
type PromoteSyncSourceTestConnection struct {
	// DisplayName A human-readable display name
	DisplayName *DisplayName `json:"display_name,omitempty"`

	// Name Descriptive, unique name for the source
	Name interface{} `json:"name"`

	// OverwriteSource Set this to allow overwriting an existing sync source. Defaults to true to preserve compatibility.
	OverwriteSource *interface{} `json:"overwrite_source,omitempty"`

	// SkipTables Tables matched by `tables` that should be skipped. Wildcards are supported.
	SkipTables *interface{} `json:"skip_tables,omitempty"`

	// Tables Tables to sync. Wildcards are supported. Note that child tables are excluded by default, and need to be explicitly specified.
	Tables interface{} `json:"tables"`
}

// PromoteSyncTransformerTestConnection Sync Transformer Definition
type PromoteSyncTransformerTestConnection struct {
	// DisplayName A human-readable display name
	DisplayName *DisplayName `json:"display_name,omitempty"`

	// Name Descriptive, unique name for the transformer
	Name interface{} `json:"name"`

	// OverwriteTransformer Set this to allow overwriting an existing sync transformer. Defaults to true to preserve compatibility.
	OverwriteTransformer *interface{} `json:"overwrite_transformer,omitempty"`
}

// PutCustomColumnData202Response defines model for PutCustomColumnData_202_response.
type PutCustomColumnData202Response struct {
	Data CustomColumnDataImportAccepted `json:"data"`
}

// Query Saved query
type Query struct {
	// Alert An alert instance that can be triggered by a query
	Alert *Alert `json:"alert,omitempty"`

	// AlertConfigured Indicates if the query has an alert configured
	AlertConfigured interface{}  `json:"alert_configured"`
	CreatedAt       interface{}  `json:"created_at"`
	Description     *interface{} `json:"description,omitempty"`

	// QueryID The unique ID for the query.
	QueryID QueryID     `json:"id"`
	Name    interface{} `json:"name"`

	// Query Query expression
	Query QueryExpression `json:"query"`
	Tags  interface{}     `json:"tags,omitempty"`

	// UserID ID of the User
	UserID *UserID `json:"user_id,omitempty"`
}

// QueryCreate Create a saved query
type QueryCreate struct {
	// Alert Create an alert
	Alert       *AlertCreate `json:"alert,omitempty"`
	Description *interface{} `json:"description,omitempty"`
	Name        interface{}  `json:"name"`
	Public      interface{}  `json:"public"`
	Query       interface{}  `json:"query"`
	Tags        interface{}  `json:"tags,omitempty"`
}

// QueryDetail Query Detail
type QueryDetail struct {
	// Alert An alert instance that can be triggered by a query including notification destinations for the alert
	Alert *AlertDetail `json:"alert,omitempty"`

	// AlertConfigured Indicates if the query has an alert configured. When this is set, the alert field will be populated with the alert details.
	AlertConfigured interface{}  `json:"alert_configured"`
	CreatedAt       interface{}  `json:"created_at"`
	Description     *interface{} `json:"description,omitempty"`

	// QueryID The unique ID for the query.
	QueryID QueryID     `json:"id"`
	Name    interface{} `json:"name"`

	// Query Query expression
	Query QueryExpression `json:"query"`
	Tags  interface{}     `json:"tags,omitempty"`

	// UserID ID of the User
	UserID *UserID `json:"user_id,omitempty"`
}

// QueryExpression Query expression
type QueryExpression = string

// QueryID The unique ID for the query.
type QueryID = openapi_types.UUID

// QueryTag A saved query tag.
type QueryTag = interface{}

// QueryUpdate Update a saved query
type QueryUpdate struct {
	// Alert Alert Update Definition
	Alert       *AlertUpdate `json:"alert,omitempty"`
	Description *interface{} `json:"description,omitempty"`
	Name        *interface{} `json:"name,omitempty"`
	Public      *interface{} `json:"public,omitempty"`
	Query       *interface{} `json:"query,omitempty"`
	Tags        *interface{} `json:"tags,omitempty"`
}

// RegistryAuthToken JWT token for the image registry
type RegistryAuthToken struct {
	AccessToken interface{} `json:"access_token"`
	Token       interface{} `json:"token"`
}

// ReleaseURL defines model for ReleaseURL.
type ReleaseURL struct {
	Url string `json:"url"`
}

// RemoveTeamMembershipRequest defines model for RemoveTeamMembership_request.
type RemoveTeamMembershipRequest struct {
	Email string `json:"email"`
}

// Report defines model for Report.
type Report struct {
	// Content YAML body
	Content     interface{}  `json:"content"`
	CreatedAt   *interface{} `json:"created_at,omitempty"`
	CreatedBy   *CreatedBy   `json:"created_by,omitempty"`
	Description interface{}  `json:"description"`
	ID          interface{}  `json:"id"`
	Private     interface{}  `json:"private"`
	Title       interface{}  `json:"title"`
	UpdatedAt   *interface{} `json:"updated_at,omitempty"`
	UpdatedBy   *CreatedBy   `json:"updated_by,omitempty"`
}

// ReportCreateOrUpdate defines model for ReportCreateOrUpdate.
type ReportCreateOrUpdate struct {
	// Content YAML body
	Content     *interface{} `json:"content,omitempty"`
	Description *interface{} `json:"description,omitempty"`
	Private     *interface{} `json:"private,omitempty"`

	// TemplateID Template ID, if report is being created from a template
	TemplateID *interface{} `json:"template_id,omitempty"`
	Title      *interface{} `json:"title,omitempty"`
}

// ReportSortBy defines model for ReportSortBy.
type ReportSortBy = interface{}

// ReportSortDirection defines model for ReportSortDirection.
type ReportSortDirection = interface{}

// ReportTemplate defines model for ReportTemplate.
type ReportTemplate struct {
	// Content YAML body
	Content     interface{}  `json:"content"`
	CreatedAt   *interface{} `json:"created_at,omitempty"`
	Description interface{}  `json:"description"`
	ID          interface{}  `json:"id"`
	Title       interface{}  `json:"title"`
	UpdatedAt   *interface{} `json:"updated_at,omitempty"`
	Visible     interface{}  `json:"visible"`
}

// ReportTemplateCreateOrUpdate defines model for ReportTemplateCreateOrUpdate.
type ReportTemplateCreateOrUpdate struct {
	// Content YAML body
	Content     *interface{} `json:"content,omitempty"`
	Description *interface{} `json:"description,omitempty"`
	Title       *interface{} `json:"title,omitempty"`
	Visible     *interface{} `json:"visible,omitempty"`
}

// ReportTemplateSortBy defines model for ReportTemplateSortBy.
type ReportTemplateSortBy = interface{}

// ReportTemplateSortDirection defines model for ReportTemplateSortDirection.
type ReportTemplateSortDirection = interface{}

// ResetLocalUserPasswordRequest defines model for ResetLocalUserPassword_request.
type ResetLocalUserPasswordRequest struct {
	Email                string                 `json:"email"`
	NewPassword          string                 `json:"new_password"`
	ResetToken           string                 `json:"reset_token"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RevokedNotification defines model for RevokedNotification.
type RevokedNotification struct {
	Status RevokedNotificationStatus `json:"status"`
}

// RevokedNotificationStatus defines model for RevokedNotification.Status.
type RevokedNotificationStatus string

// Role User roles
type Role string

// SAMLConfig defines model for SAMLConfig.
type SAMLConfig struct {
	// CanEnable Whether SAML can be enabled
	CanEnable bool `json:"can_enable"`

	// DefaultRoles Default roles for new users who are not in any group
	DefaultRoles []Role `json:"default_roles"`

	// DisableAccessIfNoRoleGroup Whether to disable access if no role group is found in the SAML assertion. If true, users without a role group will not be able to log in.
	DisableAccessIfNoRoleGroup *bool `json:"disable_access_if_no_role_group,omitempty"`

	// Enabled Whether SAML is enabled
	Enabled bool `json:"enabled"`

	// LogoutURL Logout URL from identity provider
	LogoutURL *string `json:"logout_url,omitempty"`

	// MetadataURL Metadata URL from identity provider. Mutually exclusive with `metadata_xml`
	MetadataURL *string `json:"metadata_url,omitempty"`

	// MetadataXML Metadata file contents from identity provider. Mutually exclusive with `metadata_url`
	MetadataXML *string `json:"metadata_xml,omitempty"`

	// PlatformBaseURL Base URL to the platform.
	PlatformBaseURL *string `json:"platform_base_url,omitempty"`

	// PlatformCertificateDownloadURL Platform Certificate download URL
	PlatformCertificateDownloadURL string `json:"platform_certificate_download_url"`

	// PlatformEntityID SAML Entity ID. Only available after `platform_base_url` is set.
	PlatformEntityID *string `json:"platform_entity_id,omitempty"`

	// PlatformMetadataDownloadURL URL to download platform metadata. Only available after `platform_base_url` is set.
	PlatformMetadataDownloadURL *string `json:"platform_metadata_download_url,omitempty"`

	// PlatformSSOURL SAML service URL. Only available after `platform_base_url` is set.
	PlatformSSOURL *string `json:"platform_sso_url,omitempty"`

	// RoleGroupKey Role group key name
	RoleGroupKey *string `json:"role_group_key,omitempty"`

	// RoleMappings Mapping from IdP group names to roles. Each key is a potential IdP group value for the specified role_group_key, and each value is an array of roles to assign to users in that group.
	RoleMappings map[string]interface{} `json:"role_mappings,omitempty"`
}

// SAMLConfigUpdate defines model for SAMLConfigUpdate.
type SAMLConfigUpdate struct {
	// DefaultRoles Default roles for new users who are not in any group
	DefaultRoles *[]Role `json:"default_roles,omitempty"`

	// DisableAccessIfNoRoleGroup Whether to disable access if no role group is found in the SAML assertion. If true, users without a role group will not be able to log in.
	DisableAccessIfNoRoleGroup *bool `json:"disable_access_if_no_role_group,omitempty"`

	// Enabled Whether to enable or disable SAML
	Enabled *bool `json:"enabled,omitempty"`

	// LogoutURL Logout URL from identity provider
	LogoutURL *string `json:"logout_url,omitempty"`

	// MetadataURL Metadata URL from identity provider. Mutually exclusive with `metadata_xml`
	MetadataURL *string `json:"metadata_url,omitempty"`

	// MetadataXML Metadata file contents from identity provider. Mutually exclusive with `metadata_url`
	MetadataXML *string `json:"metadata_xml,omitempty"`

	// PlatformBaseURL Base URL to the platform. This should be set first. https recommended.
	PlatformBaseURL *string `json:"platform_base_url,omitempty"`

	// RoleGroupKey Role group key name
	RoleGroupKey *string `json:"role_group_key,omitempty"`

	// RoleMappings Mapping from IdP group names to roles. Each key is a potential IdP group value for the specified role_group_key, and each value is an array of roles to assign to users in that group.
	RoleMappings *map[string]interface{} `json:"role_mappings,omitempty"`
}

// SendAnonymousEventRequest defines model for SendAnonymousEvent_request.
type SendAnonymousEventRequest struct {
	// AnonymousID Anonymous ID identifying the user
	AnonymousID interface{} `json:"anonymous_id"`

	// Name Name of event
	Name interface{} `json:"name"`

	// Properties Properties of event, keys should be of string type
	Properties           *interface{}           `json:"properties,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SendUserEventRequest defines model for SendUserEvent_request.
type SendUserEventRequest struct {
	// Name Name of event
	Name interface{} `json:"name"`

	// Properties Properties of event, keys should be of string type
	Properties           *interface{}           `json:"properties,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// StartedNotification defines model for StartedNotification.
type StartedNotification struct {
	Status StartedNotificationStatus `json:"status"`
}

// StartedNotificationStatus defines model for StartedNotification.Status.
type StartedNotificationStatus string

// Sync Managed Sync definition
type Sync struct {
	// CPU CPU quota for the sync
	CPU interface{} `json:"cpu"`

	// CreatedAt Time when the sync was created
	CreatedAt interface{}  `json:"created_at"`
	CreatedBy *interface{} `json:"created_by,omitempty"`

	// Destinations List of destinations for the sync
	Destinations interface{} `json:"destinations"`

	// Disabled Whether the sync is disabled
	Disabled interface{} `json:"disabled"`

	// DisplayName A human-readable display name
	DisplayName DisplayName `json:"display_name"`

	// Memory Memory quota for the sync
	Memory interface{} `json:"memory"`

	// Name Descriptive, unique name for the sync
	Name interface{} `json:"name"`

	// Schedule Cron schedule for the sync
	Schedule interface{} `json:"schedule"`

	// Source Unique name of the source
	Source interface{} `json:"source"`

	// UpdatedAt Time when the sync was updated
	UpdatedAt interface{} `json:"updated_at"`
}

// SyncCreate Managed Sync definition
type SyncCreate struct {
	// CPU CPU quota for the sync
	CPU          *interface{} `json:"cpu,omitempty"`
	Destinations interface{}  `json:"destinations"`

	// Disabled Whether the sync is disabled
	Disabled *interface{} `json:"disabled,omitempty"`

	// DisplayName A human-readable display name
	DisplayName *DisplayName `json:"display_name,omitempty"`

	// Memory Memory quota for the sync
	Memory *interface{} `json:"memory,omitempty"`

	// Name Descriptive, unique name for the sync
	Name interface{} `json:"name"`

	// Schedule Cron schedule for the sync
	Schedule *interface{} `json:"schedule,omitempty"`

	// Source Unique name of the source
	Source interface{} `json:"source"`
}

// SyncDestination defines model for SyncDestination.
type SyncDestination struct {
	// ConnectorID ID of the Connector
	ConnectorID *ConnectorID `json:"connector_id,omitempty"`

	// CreatedAt Time when the source was created
	CreatedAt interface{} `json:"created_at"`

	// DisplayName A human-readable display name
	DisplayName *DisplayName `json:"display_name,omitempty"`

	// Draft If a sync destination is in draft, it cannot be used in syncs. To get it out of draft, 'promote' it using a successful test connection ID.
	Draft interface{} `json:"draft"`

	// Env Environment variables for the plugin.
	Env interface{} `json:"env"`

	// LastUpdateSource How was the source or destination been created or updated last
	LastUpdateSource *SyncLastUpdateSource `json:"last_update_source,omitempty"`

	// MigrateMode Migrate mode for the destination
	MigrateMode *SyncDestinationMigrateMode `json:"migrate_mode,omitempty"`

	// Name Descriptive, unique name for the destination
	Name interface{} `json:"name"`

	// Path Plugin path in CloudQuery registry
	Path SyncPluginPath `json:"path"`

	// PreviousVersion Previous version of the plugin during a version upgrade
	PreviousVersion *interface{} `json:"previous_version,omitempty"`
	SendSyncSummary *interface{} `json:"send_sync_summary,omitempty"`
	Spec            *interface{} `json:"spec,omitempty"`
	SyncGroupID     *interface{} `json:"sync_group_id,omitempty"`
	Transformers    *interface{} `json:"transformers,omitempty"`

	// UpdatedAt Time when the source was last updated
	UpdatedAt interface{} `json:"updated_at"`

	// Version Version of the plugin
	Version interface{} `json:"version"`

	// WriteMode Write mode for the destination
	WriteMode *SyncDestinationWriteMode `json:"write_mode,omitempty"`
}

// SyncDestinationCreate Sync Destination Definition
type SyncDestinationCreate struct {
	// ConnectorID ID of the Connector
	ConnectorID *ConnectorID `json:"connector_id,omitempty"`

	// DisplayName A human-readable display name
	DisplayName *DisplayName `json:"display_name,omitempty"`

	// Env Environment variables for the plugin. All environment variables will be stored as secrets.
	Env *interface{} `json:"env,omitempty"`

	// LastUpdateSource How was the source or destination been created or updated last
	LastUpdateSource *SyncLastUpdateSource `json:"last_update_source,omitempty"`

	// MigrateMode Migrate mode for the destination
	MigrateMode *SyncDestinationMigrateMode `json:"migrate_mode,omitempty"`

	// Name Descriptive, unique name for the destination
	Name interface{} `json:"name"`

	// Path Plugin path in CloudQuery registry
	Path            SyncPluginPath `json:"path"`
	SendSyncSummary *interface{}   `json:"send_sync_summary,omitempty"`
	Spec            *interface{}   `json:"spec,omitempty"`
	SyncGroupID     *interface{}   `json:"sync_group_id,omitempty"`
	Transformers    *interface{}   `json:"transformers,omitempty"`

	// Version Version of the plugin
	Version interface{} `json:"version"`

	// WriteMode Write mode for the destination
	WriteMode *SyncDestinationWriteMode `json:"write_mode,omitempty"`
}

// SyncDestinationMigrateMode Migrate mode for the destination
type SyncDestinationMigrateMode = interface{}

// SyncDestinationMigrateModeUpdate Migrate mode for the destination, for updating
type SyncDestinationMigrateModeUpdate = interface{}

// SyncDestinationTestConnection defines model for SyncDestinationTestConnection.
type SyncDestinationTestConnection struct {
	// CompletedAt Time the test connection was completed
	CompletedAt *interface{} `json:"completed_at,omitempty"`

	// CreatedAt Time the test connection was created
	CreatedAt interface{} `json:"created_at"`

	// FailureCode Code for failure
	FailureCode *interface{} `json:"failure_code,omitempty"`

	// FailureReason Reason for failure
	FailureReason *interface{} `json:"failure_reason,omitempty"`

	// ID unique ID of the test connection
	ID ID `json:"id"`

	// PluginPath Plugin path in CloudQuery registry
	PluginPath *SyncPluginPath `json:"plugin_path,omitempty"`

	// PluginVersion The version in semantic version format.
	PluginVersion *VersionName `json:"plugin_version,omitempty"`

	// Status The status of the sync run
	Status      SyncTestConnectionStatus `json:"status"`
	SyncGroupID *interface{}             `json:"sync_group_id,omitempty"`
}

// SyncDestinationTestConnectionCreate defines model for SyncDestinationTestConnectionCreate.
type SyncDestinationTestConnectionCreate struct {
	// ConnectorID ID of the Connector
	ConnectorID *ConnectorID `json:"connector_id,omitempty"`

	// DestinationName Name of an existing destination
	DestinationName *interface{} `json:"destination_name,omitempty"`

	// Env Environment variables for the plugin. All environment variables will be stored as secrets.
	Env *interface{} `json:"env,omitempty"`

	// MigrateMode Migrate mode for the destination
	MigrateMode *SyncDestinationMigrateMode `json:"migrate_mode,omitempty"`

	// Path Plugin path in CloudQuery registry
	Path        SyncPluginPath `json:"path"`
	Spec        *interface{}   `json:"spec,omitempty"`
	SyncGroupID *interface{}   `json:"sync_group_id,omitempty"`

	// Version Version of the plugin
	Version interface{} `json:"version"`

	// WriteMode Write mode for the destination
	WriteMode *SyncDestinationWriteMode `json:"write_mode,omitempty"`
}

// SyncDestinationTestConnectionID ID of the Sync Destination Test Connection
type SyncDestinationTestConnectionID = interface{}

// SyncDestinationUpdate Sync Destination Update Definition
type SyncDestinationUpdate struct {
	// DisplayName A human-readable display name
	DisplayName *DisplayName `json:"display_name,omitempty"`

	// LastUpdateSource How was the source or destination been created or updated last
	LastUpdateSource *SyncLastUpdateSource `json:"last_update_source,omitempty"`

	// MigrateMode Migrate mode for the destination, for updating
	MigrateMode     *SyncDestinationMigrateModeUpdate `json:"migrate_mode,omitempty"`
	SendSyncSummary *interface{}                      `json:"send_sync_summary,omitempty"`
	Transformers    *interface{}                      `json:"transformers,omitempty"`

	// WriteMode Write mode for the destination, for updating
	WriteMode *SyncDestinationWriteModeUpdate `json:"write_mode,omitempty"`
}

// SyncDestinationWriteMode Write mode for the destination
type SyncDestinationWriteMode = interface{}

// SyncDestinationWriteModeUpdate Write mode for the destination, for updating
type SyncDestinationWriteModeUpdate = interface{}

// SyncEnv Environment variable. Environment variables are assumed to be secret.
type SyncEnv struct {
	// Name Name of the environment variable
	Name interface{} `json:"name"`
}

// SyncEnvCreate Environment variable. Environment variables are assumed to be secret.
type SyncEnvCreate struct {
	// Name Name of the environment variable
	Name string `json:"name"`

	// Value Value of the environment variable
	Value *string `json:"value,omitempty"`
}

// SyncGenericSortBy defines model for SyncGenericSortBy.
type SyncGenericSortBy = interface{}

// SyncLastUpdateSource How was the source or destination been created or updated last
type SyncLastUpdateSource = interface{}

// SyncPluginPath Plugin path in CloudQuery registry
type SyncPluginPath = interface{}

// SyncRun Managed Sync Run definition
type SyncRun struct {
	// CompletedAt Time the sync run was completed
	CompletedAt *interface{} `json:"completed_at,omitempty"`

	// CreatedAt Time the sync run was created
	CreatedAt interface{} `json:"created_at"`

	// Errors Number of errors encountered during the sync
	Errors interface{} `json:"errors"`

	// ID unique ID of the run
	ID interface{} `json:"id"`

	// Migration Whether the sync run is a migration
	Migration *interface{} `json:"migration,omitempty"`

	// Status The status of the sync run
	Status SyncRunStatus `json:"status"`

	// StatusReason The reason for the status
	StatusReason *SyncRunStatusReason `json:"status_reason,omitempty"`

	// SyncName Name of the sync
	SyncName interface{} `json:"sync_name"`

	// TotalRows Total number of rows in the sync
	TotalRows interface{} `json:"total_rows"`

	// Warnings Number of warnings encountered during the sync
	Warnings interface{} `json:"warnings"`

	// Workers Information about the workers used in the sync run
	Workers *interface{} `json:"workers,omitempty"`
}

// SyncRunDetails defines model for SyncRunDetails.
type SyncRunDetails struct {
	// CompletedAt Time the sync run was completed
	CompletedAt *interface{} `json:"completed_at,omitempty"`

	// CPUSeconds Total CPU seconds utilized during this sync run
	CPUSeconds *interface{} `json:"cpu_seconds,omitempty"`

	// CreatedAt Time the sync run was created
	CreatedAt interface{} `json:"created_at"`

	// Errors Number of errors encountered during the sync
	Errors interface{} `json:"errors"`

	// ID unique ID of the run
	ID interface{} `json:"id"`

	// MemoryByteSeconds Total memory byte seconds utilized during this sync run
	MemoryByteSeconds *interface{} `json:"memory_byte_seconds,omitempty"`

	// Migration Whether the sync run is a migration
	Migration *interface{} `json:"migration,omitempty"`

	// NetworkEgressBytes Total network egress bytes during this sync run
	NetworkEgressBytes *interface{} `json:"network_egress_bytes,omitempty"`

	// Status The status of the sync run
	Status SyncRunStatus `json:"status"`

	// StatusReason The reason for the status
	StatusReason *SyncRunStatusReason `json:"status_reason,omitempty"`

	// SyncName Name of the sync
	SyncName interface{} `json:"sync_name"`

	// TotalRows Total number of rows in the sync
	TotalRows interface{} `json:"total_rows"`

	// Warnings Number of warnings encountered during the sync
	Warnings interface{} `json:"warnings"`

	// Workers Information about the workers used in the sync run
	Workers *interface{} `json:"workers,omitempty"`
}

// SyncRunID ID of the SyncRun
type SyncRunID = interface{}

// SyncRunStats defines model for SyncRunStats.
type SyncRunStats struct {
	// CompletedTables Number of tables completed
	CompletedTables interface{} `json:"completed_tables"`

	// Errors Number of total errors encountered
	Errors interface{} `json:"errors"`

	// LastCompletedAt Time the last table was completed
	LastCompletedAt *interface{} `json:"last_completed_at,omitempty"`

	// Panics Number of total panics encountered
	Panics interface{} `json:"panics"`

	// Resources Number of total resources fetched
	Resources interface{} `json:"resources"`

	// StartedAt Time the table sync was started
	StartedAt interface{} `json:"started_at"`
}

// SyncRunStatus The status of the sync run
type SyncRunStatus = interface{}

// SyncRunStatusReason The reason for the status
type SyncRunStatusReason = interface{}

// SyncRunTableStat defines model for SyncRunTableStat.
type SyncRunTableStat struct {
	// CompletedAt Time the table sync was completed
	CompletedAt *interface{} `json:"completed_at,omitempty"`

	// Errors Number of errors encountered
	Errors *interface{} `json:"errors,omitempty"`

	// Name Name of the table
	Name interface{} `json:"name"`

	// Panics Number of panics encountered
	Panics *interface{} `json:"panics,omitempty"`

	// Resources Number of resources fetched
	Resources *interface{} `json:"resources,omitempty"`

	// ServiceName Name of the service
	ServiceName interface{} `json:"service_name"`

	// StartedAt Time the table sync was started
	StartedAt interface{} `json:"started_at"`
}

// SyncRunWorkerPhase Phase of the worker in the sync run
type SyncRunWorkerPhase = interface{}

// SyncRunWorkerStatus The worker information for a sync run
type SyncRunWorkerStatus struct {
	// Phase Phase of the worker in the sync run
	Phase SyncRunWorkerPhase `json:"phase"`

	// Reason The reason for the status of the worker
	Reason *interface{} `json:"reason,omitempty"`
}

// SyncSortBy defines model for SyncSortBy.
type SyncSortBy = interface{}

// SyncSortDirection defines model for SyncSortDirection.
type SyncSortDirection = interface{}

// SyncSource defines model for SyncSource.
type SyncSource struct {
	// ConnectorID ID of the Connector
	ConnectorID *ConnectorID `json:"connector_id,omitempty"`

	// CreatedAt Time when the source was created
	CreatedAt interface{} `json:"created_at"`

	// DisplayName A human-readable display name
	DisplayName *DisplayName `json:"display_name,omitempty"`

	// Draft If a sync source is in draft, it cannot be used in syncs. To get it out of draft, 'promote' it using a successful test connection ID.
	Draft interface{} `json:"draft"`

	// Env Environment variables for the plugin.
	Env interface{} `json:"env"`

	// LastUpdateSource How was the source or destination been created or updated last
	LastUpdateSource *SyncLastUpdateSource `json:"last_update_source,omitempty"`

	// Name Descriptive, unique name for the source
	Name interface{} `json:"name"`

	// OnboardingID ID of the cloud provider onboarding session
	OnboardingID *OnboardingID `json:"onboarding_id,omitempty"`

	// Path Plugin path in CloudQuery registry
	Path SyncPluginPath `json:"path"`

	// PreviousVersion Previous version of the plugin during a version upgrade
	PreviousVersion *interface{} `json:"previous_version,omitempty"`

	// SkipTables Tables matched by `tables` that should be skipped. Wildcards are supported.
	SkipTables *interface{} `json:"skip_tables,omitempty"`
	Spec       *interface{} `json:"spec,omitempty"`

	// Tables Tables to sync. Wildcards are supported. Note that child tables are excluded by default, and need to be explicitly specified.
	Tables interface{} `json:"tables"`

	// UpdatedAt Time when the source was last updated
	UpdatedAt interface{} `json:"updated_at"`

	// Version Version of the plugin
	Version interface{} `json:"version"`
}

// SyncSourceCreate Sync Source Definition
type SyncSourceCreate struct {
	// ConnectorID ID of the Connector
	ConnectorID *ConnectorID `json:"connector_id,omitempty"`

	// DisplayName A human-readable display name
	DisplayName *DisplayName `json:"display_name,omitempty"`

	// Env Environment variables for the plugin. All environment variables will be stored as secrets.
	Env *interface{} `json:"env,omitempty"`

	// LastUpdateSource How was the source or destination been created or updated last
	LastUpdateSource *SyncLastUpdateSource `json:"last_update_source,omitempty"`

	// Name Descriptive, unique name for the source
	Name interface{} `json:"name"`

	// OnboardingID ID of the cloud provider onboarding session
	OnboardingID *OnboardingID `json:"onboarding_id,omitempty"`

	// Path Plugin path in CloudQuery registry
	Path SyncPluginPath `json:"path"`

	// SkipTables Tables matched by `tables` that should be skipped. Wildcards are supported.
	SkipTables *interface{} `json:"skip_tables,omitempty"`
	Spec       *interface{} `json:"spec,omitempty"`

	// Tables Tables to sync. Wildcards are supported. Note that child tables are excluded by default, and need to be explicitly specified.
	Tables interface{} `json:"tables"`

	// Version Version of the plugin
	Version interface{} `json:"version"`
}

// SyncSourceTestConnection defines model for SyncSourceTestConnection.
type SyncSourceTestConnection struct {
	// CompletedAt Time the test connection was completed
	CompletedAt *interface{} `json:"completed_at,omitempty"`

	// CreatedAt Time the test connection was created
	CreatedAt interface{} `json:"created_at"`

	// FailureCode Code for failure
	FailureCode *string `json:"failure_code,omitempty"`

	// FailureReason Reason for failure
	FailureReason *string `json:"failure_reason,omitempty"`

	// ID unique ID of the test connection
	ID ID `json:"id"`

	// PluginPath Plugin path in CloudQuery registry
	PluginPath *SyncPluginPath `json:"plugin_path,omitempty"`

	// PluginVersion The version in semantic version format.
	PluginVersion *VersionName `json:"plugin_version,omitempty"`

	// Status The status of the sync run
	Status SyncTestConnectionStatus `json:"status"`
}

// SyncSourceTestConnectionCreate defines model for SyncSourceTestConnectionCreate.
type SyncSourceTestConnectionCreate struct {
	// ConnectorID ID of the Connector
	ConnectorID *ConnectorID `json:"connector_id,omitempty"`

	// Env Environment variables for the plugin. All environment variables will be stored as secrets.
	Env *interface{} `json:"env,omitempty"`

	// OnboardingID ID of the cloud provider onboarding session
	OnboardingID *OnboardingID `json:"onboarding_id,omitempty"`

	// Path Plugin path in CloudQuery registry
	Path SyncPluginPath `json:"path"`

	// SourceName Name of an existing source
	SourceName *interface{} `json:"source_name,omitempty"`
	Spec       *interface{} `json:"spec,omitempty"`

	// Version Version of the plugin
	Version interface{} `json:"version"`
}

// SyncSourceTestConnectionID ID of the Sync Source Test Connection
type SyncSourceTestConnectionID = interface{}

// SyncSourceUpdate Sync Source Update Definition
type SyncSourceUpdate struct {
	// DisplayName A human-readable display name
	DisplayName *DisplayName `json:"display_name,omitempty"`

	// LastUpdateSource How was the source or destination been created or updated last
	LastUpdateSource *SyncLastUpdateSource `json:"last_update_source,omitempty"`

	// SkipTables Tables matched by `tables` that should be skipped. Wildcards are supported.
	SkipTables *interface{} `json:"skip_tables,omitempty"`

	// Tables Tables to sync. Wildcards are supported. Note that child tables are excluded by default, and need to be explicitly specified.
	Tables *interface{} `json:"tables,omitempty"`
}

// SyncTestConnection defines model for SyncTestConnection.
type SyncTestConnection struct {
	// CompletedAt Time the test connection was completed
	CompletedAt *interface{} `json:"completed_at,omitempty"`

	// CreatedAt Time the test connection was created
	CreatedAt interface{} `json:"created_at"`

	// FailureCode Code for failure
	FailureCode *interface{} `json:"failure_code,omitempty"`

	// FailureReason Reason for failure
	FailureReason *interface{} `json:"failure_reason,omitempty"`

	// ID unique ID of the test connection
	ID ID `json:"id"`

	// PluginKind The kind of plugin, ie. source or destination.
	PluginKind *PluginKind `json:"plugin_kind,omitempty"`

	// PluginPath Plugin path in CloudQuery registry
	PluginPath *SyncPluginPath `json:"plugin_path,omitempty"`

	// PluginVersion The version in semantic version format.
	PluginVersion *VersionName `json:"plugin_version,omitempty"`

	// Status The status of the sync run
	Status SyncTestConnectionStatus `json:"status"`
}

// ID unique ID of the test connection
type ID = interface{}

// SyncTestConnectionStatus The status of the sync run
type SyncTestConnectionStatus = interface{}

// SyncTransformer defines model for SyncTransformer.
type SyncTransformer struct {
	// ConnectorID ID of the Connector
	ConnectorID *ConnectorID `json:"connector_id,omitempty"`

	// CreatedAt Time when the transformer was created
	CreatedAt interface{} `json:"created_at"`

	// DisplayName A human-readable display name
	DisplayName *DisplayName `json:"display_name,omitempty"`

	// Draft If a sync transformer is in draft, it cannot be used in syncs. To get it out of draft, 'promote' it using a successful test connection ID.
	Draft interface{} `json:"draft"`

	// Env Environment variables for the plugin.
	Env interface{} `json:"env"`

	// LastUpdateSource How was the source or destination been created or updated last
	LastUpdateSource *SyncLastUpdateSource `json:"last_update_source,omitempty"`

	// Name Descriptive, unique name for the transformer
	Name interface{} `json:"name"`

	// Path Plugin path in CloudQuery registry
	Path SyncPluginPath `json:"path"`
	Spec *interface{}   `json:"spec,omitempty"`

	// UpdatedAt Time when the transformer was last updated
	UpdatedAt interface{} `json:"updated_at"`

	// Version Version of the plugin
	Version interface{} `json:"version"`
}

// SyncTransformerCreate Sync Transformer Definition
type SyncTransformerCreate struct {
	// ConnectorID ID of the Connector
	ConnectorID *ConnectorID `json:"connector_id,omitempty"`

	// DisplayName A human-readable display name
	DisplayName *DisplayName `json:"display_name,omitempty"`

	// Env Environment variables for the plugin. All environment variables will be stored as secrets.
	Env *interface{} `json:"env,omitempty"`

	// LastUpdateSource How was the source or destination been created or updated last
	LastUpdateSource *SyncLastUpdateSource `json:"last_update_source,omitempty"`

	// Name Descriptive, unique name for the transformer
	Name interface{} `json:"name"`

	// Path Plugin path in CloudQuery registry
	Path SyncPluginPath `json:"path"`
	Spec *interface{}   `json:"spec,omitempty"`

	// Version Version of the plugin
	Version interface{} `json:"version"`
}

// SyncTransformerTestConnection defines model for SyncTransformerTestConnection.
type SyncTransformerTestConnection struct {
	// CompletedAt Time the test connection was completed
	CompletedAt *interface{} `json:"completed_at,omitempty"`

	// CreatedAt Time the test connection was created
	CreatedAt interface{} `json:"created_at"`

	// FailureCode Code for failure
	FailureCode *string `json:"failure_code,omitempty"`

	// FailureReason Reason for failure
	FailureReason *string `json:"failure_reason,omitempty"`

	// ID unique ID of the test connection
	ID ID `json:"id"`

	// PluginPath Plugin path in CloudQuery registry
	PluginPath *SyncPluginPath `json:"plugin_path,omitempty"`

	// PluginVersion The version in semantic version format.
	PluginVersion *VersionName `json:"plugin_version,omitempty"`

	// Status The status of the sync run
	Status SyncTestConnectionStatus `json:"status"`
}

// SyncTransformerTestConnectionCreate defines model for SyncTransformerTestConnectionCreate.
type SyncTransformerTestConnectionCreate struct {
	// ConnectorID ID of the Connector
	ConnectorID *ConnectorID `json:"connector_id,omitempty"`

	// Env Environment variables for the plugin. All environment variables will be stored as secrets.
	Env *interface{} `json:"env,omitempty"`

	// Path Plugin path in CloudQuery registry
	Path SyncPluginPath `json:"path"`
	Spec *interface{}   `json:"spec,omitempty"`

	// TransformerName Name of an existing transformer
	TransformerName *interface{} `json:"transformer_name,omitempty"`

	// Version Version of the plugin
	Version interface{} `json:"version"`
}

// SyncTransformerTestConnectionID ID of the Sync Transformer Test Connection
type SyncTransformerTestConnectionID = interface{}

// SyncTransformerUpdate Sync Transformer Update Definition
type SyncTransformerUpdate struct {
	// DisplayName A human-readable display name
	DisplayName *DisplayName `json:"display_name,omitempty"`

	// LastUpdateSource How was the source or destination been created or updated last
	LastUpdateSource *SyncLastUpdateSource `json:"last_update_source,omitempty"`
}

// SyncUpdate Managed Sync definition
type SyncUpdate struct {
	// CPU CPU quota for the sync
	CPU          *interface{} `json:"cpu,omitempty"`
	Destinations *interface{} `json:"destinations,omitempty"`

	// Disabled Whether the sync is disabled
	Disabled *interface{} `json:"disabled,omitempty"`

	// DisplayName A human-readable display name
	DisplayName *DisplayName `json:"display_name,omitempty"`

	// Env Environment variables for the sync
	Env *interface{} `json:"env,omitempty"`

	// Memory Memory quota for the sync
	Memory *interface{} `json:"memory,omitempty"`

	// Schedule Cron schedule for the sync
	Schedule *interface{} `json:"schedule,omitempty"`

	// Source Unique name of the source
	Source *interface{} `json:"source,omitempty"`
}

// SyncUpgrade Sync Version Upgrade Definition
type SyncUpgrade struct {
	// CreatedAt Time when the upgrade record was created
	CreatedAt interface{} `json:"created_at"`

	// Kind The kind of plugin, ie. source or destination.
	Kind PluginKind `json:"kind"`

	// NewVersion Upgraded version of the plugin
	NewVersion interface{} `json:"new_version"`

	// Path Plugin path in CloudQuery registry
	Path SyncPluginPath `json:"path"`

	// PlatformVersion Version of the platform that the upgrade was made on
	PlatformVersion interface{} `json:"platform_version"`

	// PrevVersion Previous version of the plugin
	PrevVersion interface{} `json:"prev_version"`

	// DisplayNames List of sync sources or sync destinations (depending on kind) display names that were upgraded
	DisplayNames interface{} `json:"sync_source_destination_display_names"`

	// Names List of sync sources or sync destinations (depending on kind) that were upgraded
	Names interface{} `json:"sync_source_destination_names"`
}

// SyncRunLogs defines model for Sync_Run_Logs.
type SyncRunLogs struct {
	// Location The location to download the sync run logs from
	Location             interface{}            `json:"location"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TableColumnListItem defines model for TableColumnListItem.
type TableColumnListItem struct {
	// Kind The kind of the schema column type
	Kind TableSchemaColumnKind `json:"kind"`

	// Name The name of the table column.
	Name TableColumnName `json:"name"`

	// Nullable Whether the column is nullable.
	Nullable bool `json:"nullable"`
}

// TableColumnListValues200Response defines model for TableColumnListValues_200_response.
type TableColumnListValues200Response struct {
	Items    []TableColumnValueListItem `json:"items"`
	Metadata ListMetadata               `json:"metadata"`
}

// TableColumnName The name of the table column.
type TableColumnName = string

// TableColumnValueListItem defines model for TableColumnValueListItem.
type TableColumnValueListItem struct {
	// Kind The kind of the schema column type
	Kind  TableSchemaColumnKind `json:"kind"`
	Value *string               `json:"value,omitempty"`
}

// TableData defines model for TableData.
type TableData struct {
	Columns []TableDataColumnsInner `json:"columns"`

	// Query Query expression
	Query *QueryExpression `json:"query,omitempty"`
	Rows  [][]interface{}  `json:"rows"`
}

// TableDataColumnsInner defines model for TableData_columns_inner.
type TableDataColumnsInner struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

// TableGroupBy defines model for TableGroupBy.
type TableGroupBy = string

// TableListColumns200Response defines model for TableListColumns_200_response.
type TableListColumns200Response struct {
	Items    []TableColumnListItem `json:"items"`
	Metadata ListMetadata          `json:"metadata"`
}

// TableListItem defines model for TableListItem.
type TableListItem struct {
	// Name The name of the table.
	Name      TableName `json:"name"`
	TotalRows *uint64   `json:"total_rows,omitempty"`
}

// TableListRelations200Response defines model for TableListRelations_200_response.
type TableListRelations200Response struct {
	Data []TableRelation `json:"data"`
}

// TableListRows200Response defines model for TableListRows_200_response.
type TableListRows200Response struct {
	Data     TableData    `json:"data"`
	Metadata ListMetadata `json:"metadata"`
}

// TableName The name of the table.
type TableName = string

// TableRelation defines model for TableRelation.
type TableRelation struct {
	Label string `json:"label"`
	Query string `json:"query"`
	Table string `json:"table_name"`
}

// TableRow defines model for TableRow.
type TableRow = map[string]interface{}

// TableRowById200Response defines model for TableRowById_200_response.
type TableRowById200Response struct {
	Data    TableRow             `json:"data"`
	Matches []TableRowFieldMatch `json:"matches"`
}

// TableRowFieldMatch defines model for TableRowFieldMatch.
type TableRowFieldMatch struct {
	EndIndex   *int64 `json:"end_index,omitempty"`
	Key        string `json:"key"`
	StartIndex *int64 `json:"start_index,omitempty"`
	Value      string `json:"value"`
}

// TableRowID ID of the Resource
type TableRowID = string

// TableSchema defines model for TableSchema.
type TableSchema = []TableSchemaColumn

// TableSchemaColumn defines model for TableSchemaColumn.
type TableSchemaColumn struct {
	// Comment Comment on the column, or an empty string if it is not defined.
	Comment string `json:"comment"`

	// DefaultExpression Expression for the default value, or an empty string if it is not defined.
	DefaultExpression string `json:"default_expression"`

	// DefaultKind Expression type (DEFAULT, MATERIALIZED, ALIAS) for the default value, or an empty string if it is not defined.
	DefaultKind string `json:"default_kind"`

	// Kind The kind of the schema column type
	Kind TableSchemaColumnKind `json:"kind"`

	// Name Column name
	Name string `json:"name"`

	// Nullable Whether the column is nullable.
	Nullable bool `json:"nullable"`

	// Type Column type
	Type string `json:"type"`
}

// TableSchemaColumnKind The kind of the schema column type
type TableSchemaColumnKind string

// TableSchema200Response defines model for TableSchema_200_response.
type TableSchema200Response struct {
	DefaultColumns []string    `json:"default_columns"`
	Schema         TableSchema `json:"schema"`
}

// TableSelect defines model for TableSelect.
type TableSelect = string

// TableSortBy defines model for TableSortBy.
type TableSortBy = string

// TableSortDirection defines model for TableSortDirection.
type TableSortDirection string

// Team CloudQuery Team
type Team struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// DisplayName The team's display name
	DisplayName   string `json:"display_name"`
	Internal      bool   `json:"internal"`
	IsTrialActive bool   `json:"is_trial_active"`

	// Name The unique name for the team.
	Name TeamName `json:"name"`

	// Plan The plan the team is on (trial is deprecated)
	Plan         TeamPlan   `json:"plan"`
	PlanEndTime  *time.Time `json:"plan_end_time,omitempty"`
	TrialEndTime *time.Time `json:"trial_end_time,omitempty"`
}

// TeamImage defines model for TeamImage.
type TeamImage struct {
	// Checksum SHA1 checksum of image
	Checksum string `json:"checksum"`

	// Name Name of image
	Name string `json:"name"`

	// RequiredHeaders Required HTTP headers to include for the upload
	RequiredHeaders map[string]interface{} `json:"required_headers"`

	// UploadURL URL to upload image
	UploadURL *string `json:"upload_url,omitempty"`

	// URL URL to download image
	URL string `json:"url"`
}

// TeamImageCreate defines model for TeamImageCreate.
type TeamImageCreate struct {
	// Checksum SHA1 checksum of image
	Checksum string `json:"checksum"`

	// ContentType The HTTP Content-Type of the image or asset
	ContentType ContentType `json:"content_type"`

	// Name Name of image
	Name string `json:"name"`
}

// TeamName The unique name for the team.
type TeamName = string

// TeamPlan The plan the team is on (trial is deprecated)
type TeamPlan string

// TestUnsavedAlert200Response defines model for TestUnsavedAlert_200_response.
type TestUnsavedAlert200Response struct {
	// Results Notification results for the test alert
	Results []AlertTestResponse `json:"results"`
}

// TestConnectionLogs defines model for Test_Connection_Logs.
type TestConnectionLogs struct {
	// Location The location to download the test connection logs from
	Location             interface{}            `json:"location"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UpdateCurrentUserRequest defines model for UpdateCurrentUser_request.
type UpdateCurrentUserRequest struct {
	// Name The unique name for the user.
	Name *UserName `json:"name,omitempty"`

	// TrackingOptIn Whether to opt in or out of anonymous user tracking
	TrackingOptIn        *interface{}           `json:"tracking_opt_in,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UpdateCustomerRequest defines model for UpdateCustomer_request.
type UpdateCustomerRequest struct {
	CompanyName             *string                `json:"company_name,omitempty"`
	FirstName               string                 `json:"first_name"`
	LastName                string                 `json:"last_name"`
	LearnedAboutCqFrom      *string                `json:"learned_about_cq_from,omitempty"`
	LearnedAboutCqFromOther *string                `json:"learned_about_cq_from_other,omitempty"`
	Phone                   *string                `json:"phone,omitempty"`
	AdditionalProperties    map[string]interface{} `json:"-"`
}

// UpdateLocalUserRequest defines model for UpdateLocalUser_request.
type UpdateLocalUserRequest struct {
	Email    *string      `json:"email,omitempty"`
	Enabled  *interface{} `json:"enabled,omitempty"`
	Name     *string      `json:"name,omitempty"`
	Password *string      `json:"password,omitempty"`

	// Roles Global roles for the user
	Roles                *interface{}           `json:"roles,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UpdateSyncRunRequest defines model for UpdateSyncRun_request.
type UpdateSyncRunRequest struct {
	// Status The status of the sync run
	Status *SyncRunStatus `json:"status,omitempty"`

	// StatusReason The reason for the status
	StatusReason *SyncRunStatusReason `json:"status_reason,omitempty"`
}

// UpdateSyncTestConnectionForSyncDestinationRequest defines model for UpdateSyncTestConnectionForSyncDestination_request.
type UpdateSyncTestConnectionForSyncDestinationRequest struct {
	// FailureCode Code for failure
	FailureCode *string `json:"failure_code,omitempty"`

	// FailureReason Reason for failure
	FailureReason *string `json:"failure_reason,omitempty"`

	// Status The status of the sync run
	Status SyncTestConnectionStatus `json:"status"`
}

// UpdateTeamRequest defines model for UpdateTeam_request.
type UpdateTeamRequest struct {
	// DisplayName The team's display name
	DisplayName          *interface{}           `json:"display_name,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UploadImageRequest defines model for UploadImage_request.
type UploadImageRequest struct {
	// ContentType The HTTP Content-Type of the image or asset
	ContentType ContentType `json:"content_type"`
}

// UploadPluginUIAssets201Response defines model for UploadPluginUIAssets_201_response.
type UploadPluginUIAssets201Response struct {
	Assets []PluginUIAsset `json:"assets"`

	// UIID ID representing this upload
	UIID string `json:"ui_id"`
}

// UploadPluginUIAssetsRequest defines model for UploadPluginUIAssets_request.
type UploadPluginUIAssetsRequest struct {
	Assets []PluginUIAssetUploadRequest `json:"assets"`
	UIID   *openapi_types.UUID          `json:"ui_id,omitempty"`
}

// UsageSummary A usage summary for a team, summarizing the paid rows synced and/or cloud resource usage over a given time range.
// Note that empty or all-zero values are not included in the response.
type UsageSummary struct {
	// Groups The groups of the usage summary. Every group will have a corresponding value at the same index in the values array.
	Groups interface{} `json:"groups"`

	// Metadata Additional metadata about the usage summary. This may include information about the time range, the aggregation period, or other details.
	Metadata             UsageSummaryMetadata   `json:"metadata"`
	Values               interface{}            `json:"values"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UsageSummaryGroup A usage summary group.
type UsageSummaryGroup struct {
	// Name The name of the group.
	Name interface{} `json:"name"`

	// Value The value of the group at this index.
	Value interface{} `json:"value"`
}

// UsageSummaryValue A usage summary value.
type UsageSummaryValue struct {
	// CloudEgressBytes Egress bytes consumed in this period, one per group.
	CloudEgressBytes *interface{} `json:"cloud_egress_bytes,omitempty"`

	// CloudVcpuSeconds vCPU/seconds consumed in this period, one per group.
	CloudVcpuSeconds *interface{} `json:"cloud_vcpu_seconds,omitempty"`

	// CloudVramByteSeconds vRAM/byte-seconds consumed in this period, one per group.
	CloudVramByteSeconds *interface{} `json:"cloud_vram_byte_seconds,omitempty"`

	// PaidRows The paid rows that were synced in this period, one per group.
	PaidRows *interface{} `json:"paid_rows,omitempty"`

	// Timestamp The timestamp marking the start of a period.
	Timestamp interface{} `json:"timestamp"`
}

// UsageSummaryMetadata Additional metadata about the usage summary. This may include information about the time range, the aggregation period, or other details.
type UsageSummaryMetadata struct {
	// AggregationPeriod The aggregation period to sum data over. In other words, data will be returned at this granularity.
	AggregationPeriod interface{} `json:"aggregation_period"`

	// End The exclusive end of the query time range.
	End interface{} `json:"end"`

	// Metrics List of metrics included in the response.
	Metrics interface{} `json:"metrics"`

	// Start The inclusive start of the query time range.
	Start interface{} `json:"start"`
}

// User CloudQuery User
type User struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Email     string     `json:"email"`

	// ID ID of the User
	ID          openapi_types.UUID `json:"id"`
	LastLoginAt *time.Time         `json:"last_login_at,omitempty"`

	// Name The unique name for the user.
	Name *UserName `json:"name,omitempty"`

	// ProfileImageURL Profile image URL of user
	ProfileImageURL *string    `json:"profile_image_url,omitempty"`
	UpdatedAt       *time.Time `json:"updated_at,omitempty"`
}

// UserID ID of the User
type UserID = openapi_types.UUID

// UserName The unique name for the user.
type UserName = string

// UserTOTPSetup200Response defines model for UserTOTPSetup_200_response.
type UserTOTPSetup200Response struct {
	Secret string `json:"secret"`
	Url    string `json:"url"`
}

// UserTOTPVerifyRequest defines model for UserTOTPVerify_request.
type UserTOTPVerifyRequest struct {
	Otp                  string                 `json:"otp"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// VersionFilter A version filter in semantic version format with prefix ranges.
type VersionFilter = string

// VersionName The version in semantic version format.
type VersionName = string

// VersionRange A version range in semantic version format.
type VersionRange = string

// AlertConfigured defines model for alert_configured.
type AlertConfigured = bool

// AlertEnabled defines model for alert_enabled.
type AlertEnabled = bool

// AlertMessageFilter Filter by alert message.
type AlertMessageFilter = string

// AlertStates defines model for alert_states.
type AlertStates = []AlertState

// AssetViewRunTypes defines model for assetview_run_type.
type AssetViewRunTypes = []AssetViewRunType

// ColumnName The name of a table column.
type ColumnName = string

// CustomColumnSortBys defines model for custom_columns_sort_bys.
type CustomColumnSortBys = []CustomColumnSortBy

// CustomColumnSortDirections defines model for custom_columns_sort_dirs.
type CustomColumnSortDirections = []CustomColumnSortDirection

// EmailBasic defines model for email_basic.
type EmailBasic = string

// Enabled defines model for enabled.
type Enabled = bool

// FilterExpressionFilter Filter by filter expression
type FilterExpressionFilter = string

// FilterNameFilter Filter by filter name
type FilterNameFilter = string

// FilterTags defines model for filter_tags.
type FilterTags = []FilterTag

// IncludeDrafts defines model for include_drafts.
type IncludeDrafts = bool

// IncludePrereleases defines model for include_prereleases.
type IncludePrereleases = bool

// IncludePrivate defines model for include_private.
type IncludePrivate = bool

// MigrationFilter Filter by migration
type MigrationFilter = bool

// Page defines model for page.
type Page = int64

// PerPage defines model for per_page.
type PerPage = int64

// PlatformPolicySortBys defines model for platform_policies_sort_bys.
type PlatformPolicySortBys = []PlatformPolicySortBy

// PlatformPolicySortDirections defines model for platform_policies_sort_dirs.
type PlatformPolicySortDirections = []PlatformPolicySortDirection

// PlatformPolicyFrameworkSortBys defines model for platform_policy_frameworks_sort_bys.
type PlatformPolicyFrameworkSortBys = []PlatformPolicyFrameworkSortBy

// PlatformPolicyRuleDetailSortBys defines model for platform_policy_rule_details_sort_bys.
type PlatformPolicyRuleDetailSortBys = []PlatformPolicyRuleDetailSortBy

// PlatformPolicyRuleSortBys defines model for platform_policy_rules_sort_bys.
type PlatformPolicyRuleSortBys = []PlatformPolicyRuleSortBy

// PluginExcludeReleaseStages defines model for plugin_exclude_release_stages.
type PluginExcludeReleaseStages = []PluginReleaseStage

// PluginIncludeReleaseStages defines model for plugin_include_release_stages.
type PluginIncludeReleaseStages = []PluginReleaseStage

// PluginSortBy defines model for plugin_sort_by.
type PluginSortBy string

// PluginTeam The unique name for the team.
type PluginTeam = TeamName

// QueryFilter Filter by query
type QueryFilter = string

// QueryNameFilter Filter by query name.
type QueryNameFilter = string

// QueryTags defines model for query_tags.
type QueryTags = []QueryTag

// ReportSortBys defines model for report_sort_bys.
type ReportSortBys = []ReportSortBy

// ReportSortDirections defines model for report_sort_dirs.
type ReportSortDirections = []ReportSortDirection

// ReportTemplateSortBys defines model for report_templates_sort_bys.
type ReportTemplateSortBys = []ReportTemplateSortBy

// ReportTemplateSortDirections defines model for report_templates_sort_dirs.
type ReportTemplateSortDirections = []ReportTemplateSortDirection

// SyncDestinationName Unique name of the sync destination
type SyncDestinationName = string

// SyncGenericSortBys defines model for sync_generic_sort_bys.
type SyncGenericSortBys = []SyncGenericSortBy

// SyncName Unique name of the sync
type SyncName = string

// SyncNameFilter Filter by name or display name
type SyncNameFilter = string

// SyncRunId ID of the SyncRun
type SyncRunId = SyncRunID

// SyncSortBys defines model for sync_sort_bys.
type SyncSortBys = []SyncSortBy

// SyncSortDirections defines model for sync_sort_dirs.
type SyncSortDirections = []SyncSortDirection

// SyncSourceName Unique name of the sync source
type SyncSourceName = string

// SyncTestConnectionId unique ID of the test connection
type SyncTestConnectionId = ID

// SyncTransformerName Unique name of the sync transformer
type SyncTransformerName = string

// SyncUpgradesKindFilter The kind of plugin, ie. source or destination.
type SyncUpgradesKindFilter = PluginKind

// SyncUpgradesPathFilter Plugin path in CloudQuery registry
type SyncUpgradesPathFilter = SyncPluginPath

// SyncUpgradesPlatformVersionFilter Filter by platform version
type SyncUpgradesPlatformVersionFilter = string

// SyncUpgradesSortBys defines model for sync_upgrades_sort_bys.
type SyncUpgradesSortBys = []string

// TableColumnNameFilter Filter by column name
type TableColumnNameFilter = string

// TableColumnValueFilter Filter by column value.
type TableColumnValueFilter = string

// FilterIDs defines model for table_filter_ids.
type FilterIDs = []FilterID

// FilterMode defines model for table_filter_mode.
type FilterMode string

// Filters defines model for table_filters.
type Filters = []FilterExpression

// GroupBys defines model for table_group_bys.
type GroupBys = []TableGroupBy

// TableRowId ID of the Resource
type TableRowId = TableRowID

// Selects defines model for table_selects.
type Selects = []TableSelect

// SortBys defines model for table_sort_bys.
type SortBys = []TableSortBy

// SortDirections defines model for table_sort_dirs.
type SortDirections = []TableSortDirection

// TargetName defines model for target_name.
type TargetName = string

// VersionSortBy defines model for version_sort_by.
type VersionSortBy string

// BadRequest defines model for BadRequest.
type BadRequest = FieldError

// Conflict Basic Error
type Conflict = BasicError

// Forbidden defines model for Forbidden.
type Forbidden = FieldError

// InternalError Basic Error
type InternalError = BasicError

// MethodNotAllowed Basic Error
type MethodNotAllowed = BasicError

// NotFound Basic Error
type NotFound = BasicError

// RequiresAuthentication Basic Error
type RequiresAuthentication = BasicError

// TooManyRequests Basic Error
type TooManyRequests = BasicError

// UnprocessableEntity defines model for UnprocessableEntity.
type UnprocessableEntity = FieldError

// ListAuditLogsParams defines parameters for ListAuditLogs.
type ListAuditLogsParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// UserId Filter by user ID
	UserId *openapi_types.UUID `form:"user_id,omitempty" json:"user_id,omitempty"`

	// TeamName Filter by team name
	TeamName *string `form:"team_name,omitempty" json:"team_name,omitempty"`

	// EventType Filter by event type
	EventType *string `form:"event_type,omitempty" json:"event_type,omitempty"`

	// EntityDisplayName Filter by entity display name
	EntityDisplayName *string `form:"entity_display_name,omitempty" json:"entity_display_name,omitempty"`

	// UserIpAddress Filter by user IP address
	UserIpAddress *string `form:"user_ip_address,omitempty" json:"user_ip_address,omitempty"`

	// StartTime Filter by start time (inclusive)
	StartTime *time.Time `form:"start_time,omitempty" json:"start_time,omitempty"`

	// EndTime Filter by end time (inclusive)
	EndTime *time.Time `form:"end_time,omitempty" json:"end_time,omitempty"`

	// Search Search across user name, team name, event type, entity display name, and user IP address
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// ListFiltersParams defines parameters for ListFilters.
type ListFiltersParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// FilterTags Filter tags
	FilterTags       FilterTags              `form:"tag,omitempty" json:"tag,omitempty"`
	NameFilter       *FilterNameFilter       `form:"name_filter,omitempty" json:"name_filter,omitempty"`
	ExpressionFilter *FilterExpressionFilter `form:"expression_filter,omitempty" json:"expression_filter,omitempty"`
}

// ListFilterTagsParams defines parameters for ListFilterTags.
type ListFilterTagsParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// AssetViewListLogsParams defines parameters for AssetViewListLogs.
type AssetViewListLogsParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// AssetViewRunTypes AssetView run type filters
	AssetViewRunTypes *AssetViewRunTypes `form:"type,omitempty" json:"type,omitempty"`
}

// ManageListAllTeamsParams defines parameters for ManageListAllTeams.
type ManageListAllTeamsParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// ManageListTeamMembersParams defines parameters for ManageListTeamMembers.
type ManageListTeamMembersParams struct {
	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// ListLocalUsersParams defines parameters for ListLocalUsers.
type ListLocalUsersParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// ListPlatformVersionsParams defines parameters for ListPlatformVersions.
type ListPlatformVersionsParams struct {
	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// ListPluginsParams defines parameters for ListPlugins.
type ListPluginsParams struct {
	// SortBy The field to sort by
	SortBy *ListPluginsParamsSortBy `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// IncludeReleaseStages Include these release stages in the response
	IncludeReleaseStages *PluginIncludeReleaseStages `form:"include_release_stages,omitempty" json:"include_release_stages,omitempty"`

	// ExcludeReleaseStages Exclude these release stages from the response
	ExcludeReleaseStages *PluginExcludeReleaseStages `form:"exclude_release_stages,omitempty" json:"exclude_release_stages,omitempty"`
}

// ListPluginsParamsSortBy defines parameters for ListPlugins.
type ListPluginsParamsSortBy string

// ListPluginVersionsParams defines parameters for ListPluginVersions.
type ListPluginVersionsParams struct {
	// SortBy The field to sort by
	SortBy *ListPluginVersionsParamsSortBy `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// IncludeDrafts Whether to include draft versions
	IncludeDrafts *IncludeDrafts `form:"include_drafts,omitempty" json:"include_drafts,omitempty"`

	// IncludePrereleases Whether to include prerelease versions
	IncludePrereleases *IncludePrereleases `form:"include_prereleases,omitempty" json:"include_prereleases,omitempty"`
	VersionFilter      *VersionFilter      `form:"version_filter,omitempty" json:"version_filter,omitempty"`
}

// ListPluginVersionsParamsSortBy defines parameters for ListPluginVersions.
type ListPluginVersionsParamsSortBy string

// DownloadPluginAssetParams defines parameters for DownloadPluginAsset.
type DownloadPluginAssetParams struct {
	Accept *string `json:"Accept,omitempty"`
}

// ListPluginVersionDocsParams defines parameters for ListPluginVersionDocs.
type ListPluginVersionDocsParams struct {
	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// ListPluginVersionTablesParams defines parameters for ListPluginVersionTables.
type ListPluginVersionTablesParams struct {
	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// AuthRegistryRequestParams defines parameters for AuthRegistryRequest.
type AuthRegistryRequestParams struct {
	// Account Username used for `docker login`
	Account *string `form:"account,omitempty" json:"account,omitempty"`

	// Service Service requesting the JWT token
	Service *string `form:"service,omitempty" json:"service,omitempty"`

	// Scope Multi-value string containing the repository being access and the operation type (push/pull)
	Scope *string `form:"scope,omitempty" json:"scope,omitempty"`

	// XMetaPluginVersion Plugin version name
	XMetaPluginVersion *string `json:"X-Meta-Plugin-Version,omitempty"`

	// XMetaUserTeamName User's team name
	XMetaUserTeamName *string `json:"X-Meta-User-Team-Name,omitempty"`
}

// ListTablesParams defines parameters for ListTables.
type ListTablesParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// BatchTableSchemasParams defines parameters for BatchTableSchemas.
type BatchTableSchemasParams struct {
	// Tables A list of table names to retrieve schemas for
	Tables []string `form:"tables" json:"tables"`
}

// TableListColumnsParams defines parameters for TableListColumns.
type TableListColumnsParams struct {
	// FilterMode Table filter mode.
	//
	// Smart mode switches between column and search mode based on the filtered table and
	//
	// Search mode allows searching deeply nested data but is not available on all tables as it requires a separate indexing step.
	// Search mode is only available on resource tables or queries derived from resource tables results that contain _cq_id and _cq_source_id.
	// Search mode may also be used against cloud_assets but it will only return results from resource tables.
	//
	// Column mode searches purely using the columns in the table.
	// It will work on all table results but it is not optimized for arbitrary substring searches and so may be slow on larger tables.
	FilterMode TableListColumnsParamsFilterMode `form:"filter_mode,omitempty" json:"filter_mode,omitempty"`
	Filter     *TableColumnNameFilter           `form:"filter,omitempty" json:"filter,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// TableListColumnsParamsFilterMode defines parameters for TableListColumns.
type TableListColumnsParamsFilterMode string

// TableColumnListValuesParams defines parameters for TableColumnListValues.
type TableColumnListValuesParams struct {
	// FilterMode Table filter mode.
	//
	// Smart mode switches between column and search mode based on the filtered table and
	//
	// Search mode allows searching deeply nested data but is not available on all tables as it requires a separate indexing step.
	// Search mode is only available on resource tables or queries derived from resource tables results that contain _cq_id and _cq_source_id.
	// Search mode may also be used against cloud_assets but it will only return results from resource tables.
	//
	// Column mode searches purely using the columns in the table.
	// It will work on all table results but it is not optimized for arbitrary substring searches and so may be slow on larger tables.
	FilterMode TableColumnListValuesParamsFilterMode `form:"filter_mode,omitempty" json:"filter_mode,omitempty"`
	Filter     *TableColumnValueFilter               `form:"filter,omitempty" json:"filter,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// TableColumnListValuesParamsFilterMode defines parameters for TableColumnListValues.
type TableColumnListValuesParamsFilterMode string

// TableListRowsParams defines parameters for TableListRows.
type TableListRowsParams struct {
	// Selects Table selects. This filters the columns that are returned in the result set.
	Selects Selects `form:"select,omitempty" json:"select,omitempty"`

	// FilterMode Table filter mode.
	//
	// Smart mode switches between column and search mode based on the filtered table and
	//
	// Search mode allows searching deeply nested data but is not available on all tables as it requires a separate indexing step.
	// Search mode is only available on resource tables or queries derived from resource tables results that contain _cq_id and _cq_source_id.
	// Search mode may also be used against cloud_assets but it will only return results from resource tables.
	//
	// Column mode searches purely using the columns in the table.
	// It will work on all table results but it is not optimized for arbitrary substring searches and so may be slow on larger tables.
	FilterMode TableListRowsParamsFilterMode `form:"filter_mode,omitempty" json:"filter_mode,omitempty"`

	// Filters Table filters. This filters the rows that are returned in the result set.
	Filters Filters `form:"filter,omitempty" json:"filter,omitempty"`

	// FilterIDs Table filter IDs. These should be valid Saved Filter IDs. These filters
	// will be applied to the query results before returning them.
	FilterIDs FilterIDs `form:"filter_id,omitempty" json:"filter_id,omitempty"`

	// SortBys Table sort by options. This sorts the rows that are returned in the result set.
	SortBys SortBys `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// SortDirections Table sort direction options. This sorts the rows that are returned in the result set.
	SortDirections SortDirections `form:"sort_dir,omitempty" json:"sort_dir,omitempty"`

	// GroupBys Table group by options. This groups the rows that are returned in the result set by the given columns.
	GroupBys GroupBys `form:"group_by,omitempty" json:"group_by,omitempty"`

	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// TableListRowsParamsFilterMode defines parameters for TableListRows.
type TableListRowsParamsFilterMode string

// TableRowByIdParams defines parameters for TableRowById.
type TableRowByIdParams struct {
	// FilterMode Table filter mode.
	//
	// Smart mode switches between column and search mode based on the filtered table and
	//
	// Search mode allows searching deeply nested data but is not available on all tables as it requires a separate indexing step.
	// Search mode is only available on resource tables or queries derived from resource tables results that contain _cq_id and _cq_source_id.
	// Search mode may also be used against cloud_assets but it will only return results from resource tables.
	//
	// Column mode searches purely using the columns in the table.
	// It will work on all table results but it is not optimized for arbitrary substring searches and so may be slow on larger tables.
	FilterMode TableRowByIdParamsFilterMode `form:"filter_mode,omitempty" json:"filter_mode,omitempty"`

	// Filters Table filters. This filters the rows that are returned in the result set.
	Filters Filters `form:"filter,omitempty" json:"filter,omitempty"`

	// FilterIDs Table filter IDs. These should be valid Saved Filter IDs. These filters
	// will be applied to the query results before returning them.
	FilterIDs FilterIDs `form:"filter_id,omitempty" json:"filter_id,omitempty"`
}

// TableRowByIdParamsFilterMode defines parameters for TableRowById.
type TableRowByIdParamsFilterMode string

// TableListFiltersParams defines parameters for TableListFilters.
type TableListFiltersParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// FilterTags Filter tags
	FilterTags FilterTags `form:"tag,omitempty" json:"tag,omitempty"`
}

// TableListFilterTagsParams defines parameters for TableListFilterTags.
type TableListFilterTagsParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// TableListRelationsParams defines parameters for TableListRelations.
type TableListRelationsParams struct {
	// RelationName Filter by related table name
	RelationName *string `form:"relation_name,omitempty" json:"relation_name,omitempty"`
}

// ListTeamsParams defines parameters for ListTeams.
type ListTeamsParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// ListAllAlertsParams defines parameters for ListAllAlerts.
type ListAllAlertsParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// AlertStates Alert states
	AlertStates AlertStates `form:"state,omitempty" json:"state,omitempty"`

	// Enabled Enabled
	Enabled *Enabled `form:"enabled,omitempty" json:"enabled,omitempty"`
}

// TestUnsavedAlertParams defines parameters for TestUnsavedAlert.
type TestUnsavedAlertParams struct {
	// QueryID ID of the query to fill in the alert
	QueryID *QueryID `form:"query_id,omitempty" json:"query_id,omitempty"`
}

// ListTeamAPIKeysParams defines parameters for ListTeamAPIKeys.
type ListTeamAPIKeysParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// ListConnectorsParams defines parameters for ListConnectors.
type ListConnectorsParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// FilterType Filter connectors by a given type.
	FilterType *string `form:"filter_type,omitempty" json:"filter_type,omitempty"`

	// FilterPlugin Filter connectors by a given plugin reference. Mutually exclusive with `type`.
	FilterPlugin *string `form:"filter_plugin,omitempty" json:"filter_plugin,omitempty"`
}

// ListAllCustomColumnsParams defines parameters for ListAllCustomColumns.
type ListAllCustomColumnsParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// CustomColumnSortBys Sort by options
	CustomColumnSortBys CustomColumnSortBys `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// CustomColumnSortDirections Custom column sort direction options
	CustomColumnSortDirections CustomColumnSortDirections `form:"sort_dir,omitempty" json:"sort_dir,omitempty"`

	// Table Filter columns by table name.
	Table *string `form:"table,omitempty" json:"table,omitempty"`

	// SearchTerm Filter columns by name, label, or description.
	SearchTerm *string `form:"search_term,omitempty" json:"search_term,omitempty"`
}

// ListFiltersTeamParams defines parameters for ListFiltersTeam.
type ListFiltersTeamParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// FilterTags Filter tags
	FilterTags       FilterTags              `form:"tag,omitempty" json:"tag,omitempty"`
	NameFilter       *FilterNameFilter       `form:"name_filter,omitempty" json:"name_filter,omitempty"`
	ExpressionFilter *FilterExpressionFilter `form:"expression_filter,omitempty" json:"expression_filter,omitempty"`
}

// ListFilterTagsTeamParams defines parameters for ListFilterTagsTeam.
type ListFilterTagsTeamParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// ListTeamInvitationsParams defines parameters for ListTeamInvitations.
type ListTeamInvitationsParams struct {
	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// GetTeamMembershipsParams defines parameters for GetTeamMemberships.
type GetTeamMembershipsParams struct {
	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// GetNotificationDestinationAlertsParams defines parameters for GetNotificationDestinationAlerts.
type GetNotificationDestinationAlertsParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// ListAllNotificationDestinationsParams defines parameters for ListAllNotificationDestinations.
type ListAllNotificationDestinationsParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// ListPluginsByTeamParams defines parameters for ListPluginsByTeam.
type ListPluginsByTeamParams struct {
	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// IncludePrivate Whether to include private plugins
	IncludePrivate *IncludePrivate `form:"include_private,omitempty" json:"include_private,omitempty"`
}

// DownloadPluginAssetByTeamParams defines parameters for DownloadPluginAssetByTeam.
type DownloadPluginAssetByTeamParams struct {
	Accept *string `json:"Accept,omitempty"`
}

// ListPoliciesParams defines parameters for ListPolicies.
type ListPoliciesParams struct {
	// SearchTerm Filter policies by name.
	SearchTerm *string `form:"search_term,omitempty" json:"search_term,omitempty"`

	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PlatformPolicySortBys Sort by options
	PlatformPolicySortBys PlatformPolicySortBys `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// PlatformPolicySortDirections Platform policies sort direction options
	PlatformPolicySortDirections PlatformPolicySortDirections `form:"sort_dir,omitempty" json:"sort_dir,omitempty"`

	// Sort DEPRECATED! Sorting order.
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListAllFrameworksParams defines parameters for ListAllFrameworks.
type ListAllFrameworksParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// ListPolicyFrameworksParams defines parameters for ListPolicyFrameworks.
type ListPolicyFrameworksParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PlatformPolicyFrameworkSortBys Sort by options
	PlatformPolicyFrameworkSortBys PlatformPolicyFrameworkSortBys `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// PlatformPolicySortDirections Platform policies sort direction options
	PlatformPolicySortDirections PlatformPolicySortDirections `form:"sort_dir,omitempty" json:"sort_dir,omitempty"`

	// SearchTerm Filter rules by name.
	SearchTerm *string `form:"search_term,omitempty" json:"search_term,omitempty"`

	// Sort DEPRECATED! Sorting order.
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListPolicyRulesParams defines parameters for ListPolicyRules.
type ListPolicyRulesParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PlatformPolicyRuleSortBys Sort by options
	PlatformPolicyRuleSortBys PlatformPolicyRuleSortBys `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// PlatformPolicySortDirections Platform policies sort direction options
	PlatformPolicySortDirections PlatformPolicySortDirections `form:"sort_dir,omitempty" json:"sort_dir,omitempty"`

	// SearchTerm Filter rules by name.
	SearchTerm *string `form:"search_term,omitempty" json:"search_term,omitempty"`

	// Sort Sorting order.
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ListPolicyRuleDetailsParams defines parameters for ListPolicyRuleDetails.
type ListPolicyRuleDetailsParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PlatformPolicyRuleDetailSortBys Sort by options
	PlatformPolicyRuleDetailSortBys PlatformPolicyRuleDetailSortBys `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// PlatformPolicySortDirections Platform policies sort direction options
	PlatformPolicySortDirections PlatformPolicySortDirections `form:"sort_dir,omitempty" json:"sort_dir,omitempty"`

	// SearchTerm Filter rules by name.
	SearchTerm *string `form:"search_term,omitempty" json:"search_term,omitempty"`

	// Sort DEPRECATED! Sorting order.
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// TogglePolicyParams defines parameters for TogglePolicy.
type TogglePolicyParams struct {
	Status TogglePolicyParamsStatus `form:"status" json:"status"`
}

// TogglePolicyParamsStatus defines parameters for TogglePolicy.
type TogglePolicyParamsStatus string

// GetPolicyViolationsHistoryParams defines parameters for GetPolicyViolationsHistory.
type GetPolicyViolationsHistoryParams struct {
	// Start A valid ISO 8601 date string representing the inclusive start of the period within which to return history entities. Defaults to start of current month if not specified.
	Start *time.Time `form:"start,omitempty" json:"start,omitempty"`

	// End A valid ISO 8601 date string representing the exclusive end of the period within which to return history entities. Defaults to end of current month if not specified.
	End *time.Time `form:"end,omitempty" json:"end,omitempty"`
}

// ListAllQueriesTeamParams defines parameters for ListAllQueriesTeam.
type ListAllQueriesTeamParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// QueryTags Query tags
	QueryTags   QueryTags        `form:"tag,omitempty" json:"tag,omitempty"`
	NameFilter  *QueryNameFilter `form:"name_filter,omitempty" json:"name_filter,omitempty"`
	QueryFilter *QueryFilter     `form:"query_filter,omitempty" json:"query_filter,omitempty"`

	// AlertConfigured Alert configured
	AlertConfigured    *AlertConfigured    `form:"alert_configured,omitempty" json:"alert_configured,omitempty"`
	AlertMessageFilter *AlertMessageFilter `form:"alert_message_filter,omitempty" json:"alert_message_filter,omitempty"`

	// AlertEnabled Alert enabled
	AlertEnabled *AlertEnabled `form:"alert_enabled,omitempty" json:"alert_enabled,omitempty"`
}

// ExecuteAdHocQueryTeamParams defines parameters for ExecuteAdHocQueryTeam.
type ExecuteAdHocQueryTeamParams struct {
	// Selects Table selects. This filters the columns that are returned in the result set.
	Selects Selects `form:"select,omitempty" json:"select,omitempty"`

	// FilterMode Table filter mode.
	//
	// Smart mode switches between column and search mode based on the filtered table and
	//
	// Search mode allows searching deeply nested data but is not available on all tables as it requires a separate indexing step.
	// Search mode is only available on resource tables or queries derived from resource tables results that contain _cq_id and _cq_source_id.
	// Search mode may also be used against cloud_assets but it will only return results from resource tables.
	//
	// Column mode searches purely using the columns in the table.
	// It will work on all table results but it is not optimized for arbitrary substring searches and so may be slow on larger tables.
	FilterMode ExecuteAdHocQueryTeamParamsFilterMode `form:"filter_mode,omitempty" json:"filter_mode,omitempty"`

	// Filters Table filters. This filters the rows that are returned in the result set.
	Filters Filters `form:"filter,omitempty" json:"filter,omitempty"`

	// FilterIDs Table filter IDs. These should be valid Saved Filter IDs. These filters
	// will be applied to the query results before returning them.
	FilterIDs FilterIDs `form:"filter_id,omitempty" json:"filter_id,omitempty"`

	// SortBys Table sort by options. This sorts the rows that are returned in the result set.
	SortBys SortBys `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// SortDirections Table sort direction options. This sorts the rows that are returned in the result set.
	SortDirections SortDirections `form:"sort_dir,omitempty" json:"sort_dir,omitempty"`

	// GroupBys Table group by options. This groups the rows that are returned in the result set by the given columns.
	GroupBys GroupBys `form:"group_by,omitempty" json:"group_by,omitempty"`

	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// ExecuteAdHocQueryTeamParamsFilterMode defines parameters for ExecuteAdHocQueryTeam.
type ExecuteAdHocQueryTeamParamsFilterMode string

// ListQueryTagsTeamParams defines parameters for ListQueryTagsTeam.
type ListQueryTagsTeamParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// ExecuteSavedQueryTeamParams defines parameters for ExecuteSavedQueryTeam.
type ExecuteSavedQueryTeamParams struct {
	// Selects Table selects. This filters the columns that are returned in the result set.
	Selects Selects `form:"select,omitempty" json:"select,omitempty"`

	// FilterMode Table filter mode.
	//
	// Smart mode switches between column and search mode based on the filtered table and
	//
	// Search mode allows searching deeply nested data but is not available on all tables as it requires a separate indexing step.
	// Search mode is only available on resource tables or queries derived from resource tables results that contain _cq_id and _cq_source_id.
	// Search mode may also be used against cloud_assets but it will only return results from resource tables.
	//
	// Column mode searches purely using the columns in the table.
	// It will work on all table results but it is not optimized for arbitrary substring searches and so may be slow on larger tables.
	FilterMode ExecuteSavedQueryTeamParamsFilterMode `form:"filter_mode,omitempty" json:"filter_mode,omitempty"`

	// Filters Table filters. This filters the rows that are returned in the result set.
	Filters Filters `form:"filter,omitempty" json:"filter,omitempty"`

	// FilterIDs Table filter IDs. These should be valid Saved Filter IDs. These filters
	// will be applied to the query results before returning them.
	FilterIDs FilterIDs `form:"filter_id,omitempty" json:"filter_id,omitempty"`

	// SortBys Table sort by options. This sorts the rows that are returned in the result set.
	SortBys SortBys `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// SortDirections Table sort direction options. This sorts the rows that are returned in the result set.
	SortDirections SortDirections `form:"sort_dir,omitempty" json:"sort_dir,omitempty"`

	// GroupBys Table group by options. This groups the rows that are returned in the result set by the given columns.
	GroupBys GroupBys `form:"group_by,omitempty" json:"group_by,omitempty"`

	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// ExecuteSavedQueryTeamParamsFilterMode defines parameters for ExecuteSavedQueryTeam.
type ExecuteSavedQueryTeamParamsFilterMode string

// QueryListFiltersTeamParams defines parameters for QueryListFiltersTeam.
type QueryListFiltersTeamParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// FilterTags Filter tags
	FilterTags FilterTags `form:"tag,omitempty" json:"tag,omitempty"`
}

// QueryListFilterTagsTeamParams defines parameters for QueryListFilterTagsTeam.
type QueryListFilterTagsTeamParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// ListReportsParams defines parameters for ListReports.
type ListReportsParams struct {
	// SearchTerm Filter reports by title or description.
	SearchTerm *string                      `form:"search_term,omitempty" json:"search_term,omitempty"`
	Visibility *ListReportsParamsVisibility `form:"visibility,omitempty" json:"visibility,omitempty"`

	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// ReportSortBys Sort by options
	ReportSortBys ReportSortBys `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// ReportSortDirections Report sort direction options
	ReportSortDirections ReportSortDirections `form:"sort_dir,omitempty" json:"sort_dir,omitempty"`
}

// ListReportsParamsVisibility defines parameters for ListReports.
type ListReportsParamsVisibility string

// ListReportTemplatesParams defines parameters for ListReportTemplates.
type ListReportTemplatesParams struct {
	// SearchTerm Filter report templates by name.
	SearchTerm *string `form:"search_term,omitempty" json:"search_term,omitempty"`

	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// ReportTemplateSortBys Sort by options
	ReportTemplateSortBys ReportTemplateSortBys `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// ReportTemplateSortDirections Report template sort direction options
	ReportTemplateSortDirections ReportTemplateSortDirections `form:"sort_dir,omitempty" json:"sort_dir,omitempty"`
}

// GetSyncDestinationTestConnectionLogsParams defines parameters for GetSyncDestinationTestConnectionLogs.
type GetSyncDestinationTestConnectionLogsParams struct {
	Accept *string `json:"Accept,omitempty"`
}

// GetSyncDestinationTestConnectionLogsLiveParams defines parameters for GetSyncDestinationTestConnectionLogsLive.
type GetSyncDestinationTestConnectionLogsLiveParams struct {
	Accept *string `json:"Accept,omitempty"`
}

// GetSyncDestinationTestConnectionLogsQueryParams defines parameters for GetSyncDestinationTestConnectionLogsQuery.
type GetSyncDestinationTestConnectionLogsQueryParams struct {
	// Filters Table filters. This filters the rows that are returned in the result set.
	Filters Filters `form:"filter,omitempty" json:"filter,omitempty"`

	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page   *Page   `form:"page,omitempty" json:"page,omitempty"`
	Accept *string `json:"Accept,omitempty"`
}

// ListSyncDestinationsParams defines parameters for ListSyncDestinations.
type ListSyncDestinationsParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page   *Page           `form:"page,omitempty" json:"page,omitempty"`
	Filter *SyncNameFilter `form:"filter,omitempty" json:"filter,omitempty"`

	// SyncGenericSortBys Sort by options
	SyncGenericSortBys SyncGenericSortBys `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// SyncSortDirections Sync sort direction options
	SyncSortDirections SyncSortDirections `form:"sort_dir,omitempty" json:"sort_dir,omitempty"`
}

// ListSyncDestinationSyncsParams defines parameters for ListSyncDestinationSyncs.
type ListSyncDestinationSyncsParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// SyncSortBys Sort by options
	SyncSortBys SyncSortBys `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// SyncSortDirections Sync sort direction options
	SyncSortDirections SyncSortDirections `form:"sort_dir,omitempty" json:"sort_dir,omitempty"`
	Filter             *SyncNameFilter    `form:"filter,omitempty" json:"filter,omitempty"`
	MigrationFilter    *MigrationFilter   `form:"migration_filter,omitempty" json:"migration_filter,omitempty"`
}

// GetSyncSourceTestConnectionLogsParams defines parameters for GetSyncSourceTestConnectionLogs.
type GetSyncSourceTestConnectionLogsParams struct {
	Accept *string `json:"Accept,omitempty"`
}

// GetSyncSourceTestConnectionLogsLiveParams defines parameters for GetSyncSourceTestConnectionLogsLive.
type GetSyncSourceTestConnectionLogsLiveParams struct {
	Accept *string `json:"Accept,omitempty"`
}

// GetSyncSourceTestConnectionLogsQueryParams defines parameters for GetSyncSourceTestConnectionLogsQuery.
type GetSyncSourceTestConnectionLogsQueryParams struct {
	// Filters Table filters. This filters the rows that are returned in the result set.
	Filters Filters `form:"filter,omitempty" json:"filter,omitempty"`

	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page   *Page   `form:"page,omitempty" json:"page,omitempty"`
	Accept *string `json:"Accept,omitempty"`
}

// ListSyncSourcesParams defines parameters for ListSyncSources.
type ListSyncSourcesParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page   *Page           `form:"page,omitempty" json:"page,omitempty"`
	Filter *SyncNameFilter `form:"filter,omitempty" json:"filter,omitempty"`

	// SyncGenericSortBys Sort by options
	SyncGenericSortBys SyncGenericSortBys `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// SyncSortDirections Sync sort direction options
	SyncSortDirections SyncSortDirections `form:"sort_dir,omitempty" json:"sort_dir,omitempty"`
}

// ListSyncSourceSyncsParams defines parameters for ListSyncSourceSyncs.
type ListSyncSourceSyncsParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// SyncSortBys Sort by options
	SyncSortBys SyncSortBys `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// SyncSortDirections Sync sort direction options
	SyncSortDirections SyncSortDirections `form:"sort_dir,omitempty" json:"sort_dir,omitempty"`
	Filter             *SyncNameFilter    `form:"filter,omitempty" json:"filter,omitempty"`
	MigrationFilter    *MigrationFilter   `form:"migration_filter,omitempty" json:"migration_filter,omitempty"`
}

// GetSyncTransformerTestConnectionLogsParams defines parameters for GetSyncTransformerTestConnectionLogs.
type GetSyncTransformerTestConnectionLogsParams struct {
	Accept *string `json:"Accept,omitempty"`
}

// ListSyncTransformersParams defines parameters for ListSyncTransformers.
type ListSyncTransformersParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page   *Page           `form:"page,omitempty" json:"page,omitempty"`
	Filter *SyncNameFilter `form:"filter,omitempty" json:"filter,omitempty"`

	// SyncGenericSortBys Sort by options
	SyncGenericSortBys SyncGenericSortBys `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// SyncSortDirections Sync sort direction options
	SyncSortDirections SyncSortDirections `form:"sort_dir,omitempty" json:"sort_dir,omitempty"`
}

// ListSyncTransformerSyncDestinationsParams defines parameters for ListSyncTransformerSyncDestinations.
type ListSyncTransformerSyncDestinationsParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// ListSyncTransformerSyncsParams defines parameters for ListSyncTransformerSyncs.
type ListSyncTransformerSyncsParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// ListSyncUpgradesParams defines parameters for ListSyncUpgrades.
type ListSyncUpgradesParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// SyncUpgradesSortBys Sort by options
	SyncUpgradesSortBys SyncUpgradesSortBys `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// SyncSortDirections Sync sort direction options
	SyncSortDirections SyncSortDirections                 `form:"sort_dir,omitempty" json:"sort_dir,omitempty"`
	Path               *SyncUpgradesPathFilter            `form:"path,omitempty" json:"path,omitempty"`
	Kind               *SyncUpgradesKindFilter            `form:"kind,omitempty" json:"kind,omitempty"`
	PlatformVersion    *SyncUpgradesPlatformVersionFilter `form:"platform_version,omitempty" json:"platform_version,omitempty"`
}

// ListSyncUpgradesParamsSortBy defines parameters for ListSyncUpgrades.
type ListSyncUpgradesParamsSortBy string

// ListSyncsParams defines parameters for ListSyncs.
type ListSyncsParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// SyncSortBys Sort by options
	SyncSortBys SyncSortBys `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// SyncSortDirections Sync sort direction options
	SyncSortDirections SyncSortDirections `form:"sort_dir,omitempty" json:"sort_dir,omitempty"`
	Filter             *SyncNameFilter    `form:"filter,omitempty" json:"filter,omitempty"`
	MigrationFilter    *MigrationFilter   `form:"migration_filter,omitempty" json:"migration_filter,omitempty"`
}

// ListSyncRunsParams defines parameters for ListSyncRuns.
type ListSyncRunsParams struct {
	MigrationFilter *MigrationFilter `form:"migration_filter,omitempty" json:"migration_filter,omitempty"`

	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// GetSyncRunLogsParams defines parameters for GetSyncRunLogs.
type GetSyncRunLogsParams struct {
	Table  *string `form:"table,omitempty" json:"table,omitempty"`
	Accept *string `json:"Accept,omitempty"`
}

// GetSyncRunLogsLiveParams defines parameters for GetSyncRunLogsLive.
type GetSyncRunLogsLiveParams struct {
	Table  *string `form:"table,omitempty" json:"table,omitempty"`
	Accept *string `json:"Accept,omitempty"`
}

// GetSyncRunLogsQueryParams defines parameters for GetSyncRunLogsQuery.
type GetSyncRunLogsQueryParams struct {
	// Filters Table filters. This filters the rows that are returned in the result set.
	Filters Filters `form:"filter,omitempty" json:"filter,omitempty"`

	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page   *Page   `form:"page,omitempty" json:"page,omitempty"`
	Accept *string `json:"Accept,omitempty"`
}

// GetSyncRunTablesParams defines parameters for GetSyncRunTables.
type GetSyncRunTablesParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// SortBys Table sort by options. This sorts the rows that are returned in the result set.
	SortBys SortBys `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// SortDirections Table sort direction options. This sorts the rows that are returned in the result set.
	SortDirections SortDirections `form:"sort_dir,omitempty" json:"sort_dir,omitempty"`
}

// ListTablesTeamParams defines parameters for ListTablesTeam.
type ListTablesTeamParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// BatchTableSchemasTeamParams defines parameters for BatchTableSchemasTeam.
type BatchTableSchemasTeamParams struct {
	// Tables A list of table names to retrieve schemas for
	Tables []string `form:"tables" json:"tables"`
}

// TableListColumnsTeamParams defines parameters for TableListColumnsTeam.
type TableListColumnsTeamParams struct {
	// FilterMode Table filter mode.
	//
	// Smart mode switches between column and search mode based on the filtered table and
	//
	// Search mode allows searching deeply nested data but is not available on all tables as it requires a separate indexing step.
	// Search mode is only available on resource tables or queries derived from resource tables results that contain _cq_id and _cq_source_id.
	// Search mode may also be used against cloud_assets but it will only return results from resource tables.
	//
	// Column mode searches purely using the columns in the table.
	// It will work on all table results but it is not optimized for arbitrary substring searches and so may be slow on larger tables.
	FilterMode TableListColumnsTeamParamsFilterMode `form:"filter_mode,omitempty" json:"filter_mode,omitempty"`
	Filter     *TableColumnNameFilter               `form:"filter,omitempty" json:"filter,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// TableListColumnsTeamParamsFilterMode defines parameters for TableListColumnsTeam.
type TableListColumnsTeamParamsFilterMode string

// TableColumnListValuesTeamParams defines parameters for TableColumnListValuesTeam.
type TableColumnListValuesTeamParams struct {
	// FilterMode Table filter mode.
	//
	// Smart mode switches between column and search mode based on the filtered table and
	//
	// Search mode allows searching deeply nested data but is not available on all tables as it requires a separate indexing step.
	// Search mode is only available on resource tables or queries derived from resource tables results that contain _cq_id and _cq_source_id.
	// Search mode may also be used against cloud_assets but it will only return results from resource tables.
	//
	// Column mode searches purely using the columns in the table.
	// It will work on all table results but it is not optimized for arbitrary substring searches and so may be slow on larger tables.
	FilterMode TableColumnListValuesTeamParamsFilterMode `form:"filter_mode,omitempty" json:"filter_mode,omitempty"`
	Filter     *TableColumnValueFilter                   `form:"filter,omitempty" json:"filter,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// TableColumnListValuesTeamParamsFilterMode defines parameters for TableColumnListValuesTeam.
type TableColumnListValuesTeamParamsFilterMode string

// TableListRowsTeamParams defines parameters for TableListRowsTeam.
type TableListRowsTeamParams struct {
	// Selects Table selects. This filters the columns that are returned in the result set.
	Selects Selects `form:"select,omitempty" json:"select,omitempty"`

	// FilterMode Table filter mode.
	//
	// Smart mode switches between column and search mode based on the filtered table and
	//
	// Search mode allows searching deeply nested data but is not available on all tables as it requires a separate indexing step.
	// Search mode is only available on resource tables or queries derived from resource tables results that contain _cq_id and _cq_source_id.
	// Search mode may also be used against cloud_assets but it will only return results from resource tables.
	//
	// Column mode searches purely using the columns in the table.
	// It will work on all table results but it is not optimized for arbitrary substring searches and so may be slow on larger tables.
	FilterMode TableListRowsTeamParamsFilterMode `form:"filter_mode,omitempty" json:"filter_mode,omitempty"`

	// Filters Table filters. This filters the rows that are returned in the result set.
	Filters Filters `form:"filter,omitempty" json:"filter,omitempty"`

	// FilterIDs Table filter IDs. These should be valid Saved Filter IDs. These filters
	// will be applied to the query results before returning them.
	FilterIDs FilterIDs `form:"filter_id,omitempty" json:"filter_id,omitempty"`

	// SortBys Table sort by options. This sorts the rows that are returned in the result set.
	SortBys SortBys `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// SortDirections Table sort direction options. This sorts the rows that are returned in the result set.
	SortDirections SortDirections `form:"sort_dir,omitempty" json:"sort_dir,omitempty"`

	// GroupBys Table group by options. This groups the rows that are returned in the result set by the given columns.
	GroupBys GroupBys `form:"group_by,omitempty" json:"group_by,omitempty"`

	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// TableListRowsTeamParamsFilterMode defines parameters for TableListRowsTeam.
type TableListRowsTeamParamsFilterMode string

// TableRowByIdTeamParams defines parameters for TableRowByIdTeam.
type TableRowByIdTeamParams struct {
	// FilterMode Table filter mode.
	//
	// Smart mode switches between column and search mode based on the filtered table and
	//
	// Search mode allows searching deeply nested data but is not available on all tables as it requires a separate indexing step.
	// Search mode is only available on resource tables or queries derived from resource tables results that contain _cq_id and _cq_source_id.
	// Search mode may also be used against cloud_assets but it will only return results from resource tables.
	//
	// Column mode searches purely using the columns in the table.
	// It will work on all table results but it is not optimized for arbitrary substring searches and so may be slow on larger tables.
	FilterMode TableRowByIdTeamParamsFilterMode `form:"filter_mode,omitempty" json:"filter_mode,omitempty"`

	// Filters Table filters. This filters the rows that are returned in the result set.
	Filters Filters `form:"filter,omitempty" json:"filter,omitempty"`

	// FilterIDs Table filter IDs. These should be valid Saved Filter IDs. These filters
	// will be applied to the query results before returning them.
	FilterIDs FilterIDs `form:"filter_id,omitempty" json:"filter_id,omitempty"`
}

// TableRowByIdTeamParamsFilterMode defines parameters for TableRowByIdTeam.
type TableRowByIdTeamParamsFilterMode string

// TableListFiltersTeamParams defines parameters for TableListFiltersTeam.
type TableListFiltersTeamParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// FilterTags Filter tags
	FilterTags FilterTags `form:"tag,omitempty" json:"tag,omitempty"`
}

// TableListFilterTagsTeamParams defines parameters for TableListFilterTagsTeam.
type TableListFilterTagsTeamParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// TableListRelationsTeamParams defines parameters for TableListRelationsTeam.
type TableListRelationsTeamParams struct {
	// RelationName Filter by related table name
	RelationName *string `form:"relation_name,omitempty" json:"relation_name,omitempty"`
}

// GetTeamUsageSummaryParams defines parameters for GetTeamUsageSummary.
type GetTeamUsageSummaryParams struct {
	Metrics *[]GetTeamUsageSummaryParamsMetrics `form:"metrics,omitempty" json:"metrics,omitempty"`
	Start   *time.Time                          `form:"start,omitempty" json:"start,omitempty"`
	End     *time.Time                          `form:"end,omitempty" json:"end,omitempty"`

	// AggregationPeriod An aggregation period to sum data over. In other words, data will be returned at this granularity. Currently only supports day and month.
	AggregationPeriod *GetTeamUsageSummaryParamsAggregationPeriod `form:"aggregation_period,omitempty" json:"aggregation_period,omitempty"`
}

// GetTeamUsageSummaryParamsMetrics defines parameters for GetTeamUsageSummary.
type GetTeamUsageSummaryParamsMetrics string

// GetTeamUsageSummaryParamsAggregationPeriod defines parameters for GetTeamUsageSummary.
type GetTeamUsageSummaryParamsAggregationPeriod string

// GetGroupedTeamUsageSummaryParams defines parameters for GetGroupedTeamUsageSummary.
type GetGroupedTeamUsageSummaryParams struct {
	Metrics *[]GetGroupedTeamUsageSummaryParamsMetrics `form:"metrics,omitempty" json:"metrics,omitempty"`
	Start   *time.Time                                 `form:"start,omitempty" json:"start,omitempty"`
	End     *time.Time                                 `form:"end,omitempty" json:"end,omitempty"`

	// AggregationPeriod An aggregation period to sum data over. In other words, data will be returned at this granularity. Currently only supports day and month.
	AggregationPeriod *GetGroupedTeamUsageSummaryParamsAggregationPeriod `form:"aggregation_period,omitempty" json:"aggregation_period,omitempty"`
}

// GetGroupedTeamUsageSummaryParamsMetrics defines parameters for GetGroupedTeamUsageSummary.
type GetGroupedTeamUsageSummaryParamsMetrics string

// GetGroupedTeamUsageSummaryParamsAggregationPeriod defines parameters for GetGroupedTeamUsageSummary.
type GetGroupedTeamUsageSummaryParamsAggregationPeriod string

// GetGroupedTeamUsageSummaryParamsGroupBy defines parameters for GetGroupedTeamUsageSummary.
type GetGroupedTeamUsageSummaryParamsGroupBy string

// ListUsersByTeamParams defines parameters for ListUsersByTeam.
type ListUsersByTeamParams struct {
	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// ListCurrentUserInvitationsParams defines parameters for ListCurrentUserInvitations.
type ListCurrentUserInvitationsParams struct {
	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// GetCurrentUserMembershipsParams defines parameters for GetCurrentUserMemberships.
type GetCurrentUserMembershipsParams struct {
	// Page Page number of the results to fetch
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage The number of results per page (max 1000).
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// UserTOTPVerifyParams defines parameters for UserTOTPVerify.
type UserTOTPVerifyParams struct {
	CqpSess *string `form:"__cqp_sess,omitempty" json:"__cqp_sess,omitempty"`
}

// UpdateFilterJSONRequestBody defines body for UpdateFilter for application/json ContentType.
type UpdateFilterJSONRequestBody = FilterUpdate

// ManageUpdateSAMLJSONRequestBody defines body for ManageUpdateSAML for application/json ContentType.
type ManageUpdateSAMLJSONRequestBody = SAMLConfigUpdate

// ManageRegisterPlatformJSONRequestBody defines body for ManageRegisterPlatform for application/json ContentType.
type ManageRegisterPlatformJSONRequestBody = ManageRegisterPlatformRequest

// ManageRegisterPlatformWithOfflineLicenseJSONRequestBody defines body for ManageRegisterPlatformWithOfflineLicense for application/json ContentType.
type ManageRegisterPlatformWithOfflineLicenseJSONRequestBody = ManageRegisterPlatformWithOfflineLicenseRequest

// UpdateSettingsJSONRequestBody defines body for UpdateSettings for application/json ContentType.
type UpdateSettingsJSONRequestBody = PlatformSettingsUpdate

// ManageRemoveTeamMemberJSONRequestBody defines body for ManageRemoveTeamMember for application/json ContentType.
type ManageRemoveTeamMemberJSONRequestBody = ManageRemoveTeamMemberRequest

// ManageAddTeamMemberJSONRequestBody defines body for ManageAddTeamMember for application/json ContentType.
type ManageAddTeamMemberJSONRequestBody = ManageAddTeamMemberRequest

// AddLocalUserJSONRequestBody defines body for AddLocalUser for application/json ContentType.
type AddLocalUserJSONRequestBody = AddLocalUserRequest

// UpdateLocalUserJSONRequestBody defines body for UpdateLocalUser for application/json ContentType.
type UpdateLocalUserJSONRequestBody = UpdateLocalUserRequest

// CreatePluginJSONRequestBody defines body for CreatePlugin for application/json ContentType.
type CreatePluginJSONRequestBody = PluginCreate

// UpdatePluginJSONRequestBody defines body for UpdatePlugin for application/json ContentType.
type UpdatePluginJSONRequestBody = PluginUpdate

// UpdatePluginVersionJSONRequestBody defines body for UpdatePluginVersion for application/json ContentType.
type UpdatePluginVersionJSONRequestBody = PluginVersionUpdate

// CreatePluginVersionJSONRequestBody defines body for CreatePluginVersion for application/json ContentType.
type CreatePluginVersionJSONRequestBody = CreatePluginVersionRequest

// DeletePluginVersionDocsJSONRequestBody defines body for DeletePluginVersionDocs for application/json ContentType.
type DeletePluginVersionDocsJSONRequestBody = DeletePluginVersionDocsRequest

// ReplacePluginVersionDocsJSONRequestBody defines body for ReplacePluginVersionDocs for application/json ContentType.
type ReplacePluginVersionDocsJSONRequestBody = CreatePluginVersionDocsRequest

// CreatePluginVersionDocsJSONRequestBody defines body for CreatePluginVersionDocs for application/json ContentType.
type CreatePluginVersionDocsJSONRequestBody = CreatePluginVersionDocsRequest

// DeletePluginVersionTablesJSONRequestBody defines body for DeletePluginVersionTables for application/json ContentType.
type DeletePluginVersionTablesJSONRequestBody = DeletePluginVersionTablesRequest

// CreatePluginVersionTablesJSONRequestBody defines body for CreatePluginVersionTables for application/json ContentType.
type CreatePluginVersionTablesJSONRequestBody = CreatePluginVersionTablesRequest

// UploadPluginUIAssetsJSONRequestBody defines body for UploadPluginUIAssets for application/json ContentType.
type UploadPluginUIAssetsJSONRequestBody = UploadPluginUIAssetsRequest

// FinalizePluginUIAssetUploadJSONRequestBody defines body for FinalizePluginUIAssetUpload for application/json ContentType.
type FinalizePluginUIAssetUploadJSONRequestBody = FinalizePluginUIAssetUploadRequest

// TableSaveFilterJSONRequestBody defines body for TableSaveFilter for application/json ContentType.
type TableSaveFilterJSONRequestBody = FilterCreate

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = CreateTeamRequest

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = UpdateTeamRequest

// TestUnsavedAlertJSONRequestBody defines body for TestUnsavedAlert for application/json ContentType.
type TestUnsavedAlertJSONRequestBody = AlertCreate

// CreateTeamAPIKeyJSONRequestBody defines body for CreateTeamAPIKey for application/json ContentType.
type CreateTeamAPIKeyJSONRequestBody = CreateTeamAPIKeyRequest

// CreateConnectorJSONRequestBody defines body for CreateConnector for application/json ContentType.
type CreateConnectorJSONRequestBody = ConnectorCreate

// UpdateConnectorJSONRequestBody defines body for UpdateConnector for application/json ContentType.
type UpdateConnectorJSONRequestBody = ConnectorUpdate

// AuthenticateConnectorFinishAWSJSONRequestBody defines body for AuthenticateConnectorFinishAWS for application/json ContentType.
type AuthenticateConnectorFinishAWSJSONRequestBody = ConnectorAuthFinishRequestAWS

// AuthenticateConnectorAWSJSONRequestBody defines body for AuthenticateConnectorAWS for application/json ContentType.
type AuthenticateConnectorAWSJSONRequestBody = ConnectorAuthRequestAWS

// AuthenticateConnectorGCPJSONRequestBody defines body for AuthenticateConnectorGCP for application/json ContentType.
type AuthenticateConnectorGCPJSONRequestBody = ConnectorAuthRequestGCP

// AuthenticateConnectorFinishOAuthJSONRequestBody defines body for AuthenticateConnectorFinishOAuth for application/json ContentType.
type AuthenticateConnectorFinishOAuthJSONRequestBody = ConnectorAuthFinishRequestOAuth

// AuthenticateConnectorOAuthJSONRequestBody defines body for AuthenticateConnectorOAuth for application/json ContentType.
type AuthenticateConnectorOAuthJSONRequestBody = ConnectorAuthRequestOAuth

// SaveCustomColumnJSONRequestBody defines body for SaveCustomColumn for application/json ContentType.
type SaveCustomColumnJSONRequestBody = CustomColumnCreateOrUpdate

// UpdateCustomColumnJSONRequestBody defines body for UpdateCustomColumn for application/json ContentType.
type UpdateCustomColumnJSONRequestBody = CustomColumnCreateOrUpdate

// PutCustomColumnDataJSONRequestBody defines body for PutCustomColumnData for application/json ContentType.
type PutCustomColumnDataJSONRequestBody = CustomColumnDataImport

// PutCustomColumnValuesJSONRequestBody defines body for PutCustomColumnValues for application/json ContentType.
type PutCustomColumnValuesJSONRequestBody = CustomColumnDataValues

// UpdateFilterTeamJSONRequestBody defines body for UpdateFilterTeam for application/json ContentType.
type UpdateFilterTeamJSONRequestBody = FilterUpdate

// CreateTeamImagesJSONRequestBody defines body for CreateTeamImages for application/json ContentType.
type CreateTeamImagesJSONRequestBody = CreateTeamImagesRequest

// DeleteTeamInvitationJSONRequestBody defines body for DeleteTeamInvitation for application/json ContentType.
type DeleteTeamInvitationJSONRequestBody = DeleteTeamInvitationRequest

// AcceptTeamInvitationJSONRequestBody defines body for AcceptTeamInvitation for application/json ContentType.
type AcceptTeamInvitationJSONRequestBody = AcceptTeamInvitationRequest

// RemoveTeamMembershipJSONRequestBody defines body for RemoveTeamMembership for application/json ContentType.
type RemoveTeamMembershipJSONRequestBody = RemoveTeamMembershipRequest

// UpdateNotificationDestinationJSONRequestBody defines body for UpdateNotificationDestination for application/json ContentType.
type UpdateNotificationDestinationJSONRequestBody = NotificationDestinationUpdate

// CreateNotificationDestinationJSONRequestBody defines body for CreateNotificationDestination for application/json ContentType.
type CreateNotificationDestinationJSONRequestBody = NotificationDestinationCreate

// TestUnsavedNotificationDestinationJSONRequestBody defines body for TestUnsavedNotificationDestination for application/json ContentType.
type TestUnsavedNotificationDestinationJSONRequestBody = NotificationDestinationData

// CreateAWSOnboardingJSONRequestBody defines body for CreateAWSOnboarding for application/json ContentType.
type CreateAWSOnboardingJSONRequestBody = CreateAWSOnboardingRequest

// ProvisionOnboardingConfigurationJSONRequestBody defines body for ProvisionOnboardingConfiguration for application/json ContentType.
type ProvisionOnboardingConfigurationJSONRequestBody = OnboardingAWSProvision

// NotifyOnboardingJSONRequestBody defines body for NotifyOnboarding for application/json ContentType.
type NotifyOnboardingJSONRequestBody = OnboardingAWSNotification

// CreatePolicyJSONRequestBody defines body for CreatePolicy for application/json ContentType.
type CreatePolicyJSONRequestBody = PlatformCreateOrUpdatePolicy

// UpdatePolicyJSONRequestBody defines body for UpdatePolicy for application/json ContentType.
type UpdatePolicyJSONRequestBody = PlatformCreateOrUpdatePolicy

// ExecuteAdHocQueryTeamJSONRequestBody defines body for ExecuteAdHocQueryTeam for application/json ContentType.
type ExecuteAdHocQueryTeamJSONRequestBody = ExecuteAdHocQueryTeamRequest

// SaveQueryTeamJSONRequestBody defines body for SaveQueryTeam for application/json ContentType.
type SaveQueryTeamJSONRequestBody = QueryCreate

// UpdateQueryTeamJSONRequestBody defines body for UpdateQueryTeam for application/json ContentType.
type UpdateQueryTeamJSONRequestBody = QueryUpdate

// QuerySaveFilterTeamJSONRequestBody defines body for QuerySaveFilterTeam for application/json ContentType.
type QuerySaveFilterTeamJSONRequestBody = FilterCreate

// CreateReportJSONRequestBody defines body for CreateReport for application/json ContentType.
type CreateReportJSONRequestBody = ReportCreateOrUpdate

// CreateReportTemplateJSONRequestBody defines body for CreateReportTemplate for application/json ContentType.
type CreateReportTemplateJSONRequestBody = ReportTemplateCreateOrUpdate

// UpdateReportTemplateJSONRequestBody defines body for UpdateReportTemplate for application/json ContentType.
type UpdateReportTemplateJSONRequestBody = ReportTemplateCreateOrUpdate

// UpdateReportJSONRequestBody defines body for UpdateReport for application/json ContentType.
type UpdateReportJSONRequestBody = ReportCreateOrUpdate

// CreateSyncDestinationTestConnectionJSONRequestBody defines body for CreateSyncDestinationTestConnection for application/json ContentType.
type CreateSyncDestinationTestConnectionJSONRequestBody = SyncDestinationTestConnectionCreate

// UpdateSyncTestConnectionForSyncDestinationJSONRequestBody defines body for UpdateSyncTestConnectionForSyncDestination for application/json ContentType.
type UpdateSyncTestConnectionForSyncDestinationJSONRequestBody = UpdateSyncTestConnectionForSyncDestinationRequest

// PromoteSyncDestinationTestConnectionJSONRequestBody defines body for PromoteSyncDestinationTestConnection for application/json ContentType.
type PromoteSyncDestinationTestConnectionJSONRequestBody = PromoteSyncDestinationTestConnection

// UpdateSyncDestinationJSONRequestBody defines body for UpdateSyncDestination for application/json ContentType.
type UpdateSyncDestinationJSONRequestBody = SyncDestinationUpdate

// CreateSyncSourceTestConnectionJSONRequestBody defines body for CreateSyncSourceTestConnection for application/json ContentType.
type CreateSyncSourceTestConnectionJSONRequestBody = SyncSourceTestConnectionCreate

// UpdateSyncTestConnectionForSyncSourceJSONRequestBody defines body for UpdateSyncTestConnectionForSyncSource for application/json ContentType.
type UpdateSyncTestConnectionForSyncSourceJSONRequestBody = UpdateSyncTestConnectionForSyncDestinationRequest

// PromoteSyncSourceTestConnectionJSONRequestBody defines body for PromoteSyncSourceTestConnection for application/json ContentType.
type PromoteSyncSourceTestConnectionJSONRequestBody = PromoteSyncSourceTestConnection

// UpdateSyncSourceJSONRequestBody defines body for UpdateSyncSource for application/json ContentType.
type UpdateSyncSourceJSONRequestBody = SyncSourceUpdate

// CreateSyncTransformerTestConnectionJSONRequestBody defines body for CreateSyncTransformerTestConnection for application/json ContentType.
type CreateSyncTransformerTestConnectionJSONRequestBody = SyncTransformerTestConnectionCreate

// UpdateSyncTestConnectionForSyncTransformerJSONRequestBody defines body for UpdateSyncTestConnectionForSyncTransformer for application/json ContentType.
type UpdateSyncTestConnectionForSyncTransformerJSONRequestBody = UpdateSyncTestConnectionForSyncDestinationRequest

// PromoteSyncTransformerTestConnectionJSONRequestBody defines body for PromoteSyncTransformerTestConnection for application/json ContentType.
type PromoteSyncTransformerTestConnectionJSONRequestBody = PromoteSyncTransformerTestConnection

// UpdateSyncTransformerJSONRequestBody defines body for UpdateSyncTransformer for application/json ContentType.
type UpdateSyncTransformerJSONRequestBody = SyncTransformerUpdate

// CreateSyncJSONRequestBody defines body for CreateSync for application/json ContentType.
type CreateSyncJSONRequestBody = SyncCreate

// UpdateSyncJSONRequestBody defines body for UpdateSync for application/json ContentType.
type UpdateSyncJSONRequestBody = SyncUpdate

// UpdateSyncRunJSONRequestBody defines body for UpdateSyncRun for application/json ContentType.
type UpdateSyncRunJSONRequestBody = UpdateSyncRunRequest

// CreateSyncRunProgressJSONRequestBody defines body for CreateSyncRunProgress for application/json ContentType.
type CreateSyncRunProgressJSONRequestBody = CreateSyncRunProgressRequest

// TableSaveFilterTeamJSONRequestBody defines body for TableSaveFilterTeam for application/json ContentType.
type TableSaveFilterTeamJSONRequestBody = FilterCreate

// UploadImageJSONRequestBody defines body for UploadImage for application/json ContentType.
type UploadImageJSONRequestBody = UploadImageRequest

// UpdateCurrentUserJSONRequestBody defines body for UpdateCurrentUser for application/json ContentType.
type UpdateCurrentUserJSONRequestBody = UpdateCurrentUserRequest

// SendAnonymousEventJSONRequestBody defines body for SendAnonymousEvent for application/json ContentType.
type SendAnonymousEventJSONRequestBody = SendAnonymousEventRequest

// AuthenticateLocalUserJSONRequestBody defines body for AuthenticateLocalUser for application/json ContentType.
type AuthenticateLocalUserJSONRequestBody = AuthenticateLocalUserRequest

// ChangeLocalUserPasswordJSONRequestBody defines body for ChangeLocalUserPassword for application/json ContentType.
type ChangeLocalUserPasswordJSONRequestBody = ChangeLocalUserPasswordRequest

// UpdateCustomerJSONRequestBody defines body for UpdateCustomer for application/json ContentType.
type UpdateCustomerJSONRequestBody = UpdateCustomerRequest

// SendUserEventJSONRequestBody defines body for SendUserEvent for application/json ContentType.
type SendUserEventJSONRequestBody = SendUserEventRequest

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = LoginUserRequest

// ResetLocalUserPasswordJSONRequestBody defines body for ResetLocalUserPassword for application/json ContentType.
type ResetLocalUserPasswordJSONRequestBody = ResetLocalUserPasswordRequest

// UserTOTPVerifyJSONRequestBody defines body for UserTOTPVerify for application/json ContentType.
type UserTOTPVerifyJSONRequestBody = UserTOTPVerifyRequest

// Getter for additional properties for AddLocalUserRequest. Returns the specified
// element and whether it was found
func (a AddLocalUserRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AddLocalUserRequest
func (a *AddLocalUserRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AddLocalUserRequest to handle AdditionalProperties
func (a *AddLocalUserRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["email"]; found {
		err = json.Unmarshal(raw, &a.Email)
		if err != nil {
			return fmt.Errorf("error reading 'email': %w", err)
		}
		delete(object, "email")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["password"]; found {
		err = json.Unmarshal(raw, &a.Password)
		if err != nil {
			return fmt.Errorf("error reading 'password': %w", err)
		}
		delete(object, "password")
	}

	if raw, found := object["roles"]; found {
		err = json.Unmarshal(raw, &a.Roles)
		if err != nil {
			return fmt.Errorf("error reading 'roles': %w", err)
		}
		delete(object, "roles")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AddLocalUserRequest to handle AdditionalProperties
func (a AddLocalUserRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["email"], err = json.Marshal(a.Email)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'email': %w", err)
	}

	object["name"], err = json.Marshal(a.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	if a.Password != nil {
		object["password"], err = json.Marshal(a.Password)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'password': %w", err)
		}
	}

	object["roles"], err = json.Marshal(a.Roles)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'roles': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AuthenticateLocalUserRequest. Returns the specified
// element and whether it was found
func (a AuthenticateLocalUserRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AuthenticateLocalUserRequest
func (a *AuthenticateLocalUserRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AuthenticateLocalUserRequest to handle AdditionalProperties
func (a *AuthenticateLocalUserRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["email"]; found {
		err = json.Unmarshal(raw, &a.Email)
		if err != nil {
			return fmt.Errorf("error reading 'email': %w", err)
		}
		delete(object, "email")
	}

	if raw, found := object["password"]; found {
		err = json.Unmarshal(raw, &a.Password)
		if err != nil {
			return fmt.Errorf("error reading 'password': %w", err)
		}
		delete(object, "password")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AuthenticateLocalUserRequest to handle AdditionalProperties
func (a AuthenticateLocalUserRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["email"], err = json.Marshal(a.Email)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'email': %w", err)
	}

	object["password"], err = json.Marshal(a.Password)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'password': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ChangeLocalUserPasswordRequest. Returns the specified
// element and whether it was found
func (a ChangeLocalUserPasswordRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ChangeLocalUserPasswordRequest
func (a *ChangeLocalUserPasswordRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ChangeLocalUserPasswordRequest to handle AdditionalProperties
func (a *ChangeLocalUserPasswordRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["email"]; found {
		err = json.Unmarshal(raw, &a.Email)
		if err != nil {
			return fmt.Errorf("error reading 'email': %w", err)
		}
		delete(object, "email")
	}

	if raw, found := object["new_password"]; found {
		err = json.Unmarshal(raw, &a.NewPassword)
		if err != nil {
			return fmt.Errorf("error reading 'new_password': %w", err)
		}
		delete(object, "new_password")
	}

	if raw, found := object["old_password"]; found {
		err = json.Unmarshal(raw, &a.OldPassword)
		if err != nil {
			return fmt.Errorf("error reading 'old_password': %w", err)
		}
		delete(object, "old_password")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ChangeLocalUserPasswordRequest to handle AdditionalProperties
func (a ChangeLocalUserPasswordRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["email"], err = json.Marshal(a.Email)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'email': %w", err)
	}

	object["new_password"], err = json.Marshal(a.NewPassword)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'new_password': %w", err)
	}

	object["old_password"], err = json.Marshal(a.OldPassword)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'old_password': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ConnectorAuthFinishRequestOAuth. Returns the specified
// element and whether it was found
func (a ConnectorAuthFinishRequestOAuth) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ConnectorAuthFinishRequestOAuth
func (a *ConnectorAuthFinishRequestOAuth) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ConnectorAuthFinishRequestOAuth to handle AdditionalProperties
func (a *ConnectorAuthFinishRequestOAuth) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["base_url"]; found {
		err = json.Unmarshal(raw, &a.BaseURL)
		if err != nil {
			return fmt.Errorf("error reading 'base_url': %w", err)
		}
		delete(object, "base_url")
	}

	if raw, found := object["env"]; found {
		err = json.Unmarshal(raw, &a.Env)
		if err != nil {
			return fmt.Errorf("error reading 'env': %w", err)
		}
		delete(object, "env")
	}

	if raw, found := object["return_url"]; found {
		err = json.Unmarshal(raw, &a.ReturnURL)
		if err != nil {
			return fmt.Errorf("error reading 'return_url': %w", err)
		}
		delete(object, "return_url")
	}

	if raw, found := object["spec"]; found {
		err = json.Unmarshal(raw, &a.Spec)
		if err != nil {
			return fmt.Errorf("error reading 'spec': %w", err)
		}
		delete(object, "spec")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ConnectorAuthFinishRequestOAuth to handle AdditionalProperties
func (a ConnectorAuthFinishRequestOAuth) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["base_url"], err = json.Marshal(a.BaseURL)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'base_url': %w", err)
	}

	if a.Env != nil {
		object["env"], err = json.Marshal(a.Env)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'env': %w", err)
		}
	}

	object["return_url"], err = json.Marshal(a.ReturnURL)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'return_url': %w", err)
	}

	if a.Spec != nil {
		object["spec"], err = json.Marshal(a.Spec)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'spec': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ConnectorAuthRequestAWS. Returns the specified
// element and whether it was found
func (a ConnectorAuthRequestAWS) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ConnectorAuthRequestAWS
func (a *ConnectorAuthRequestAWS) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ConnectorAuthRequestAWS to handle AdditionalProperties
func (a *ConnectorAuthRequestAWS) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["env"]; found {
		err = json.Unmarshal(raw, &a.Env)
		if err != nil {
			return fmt.Errorf("error reading 'env': %w", err)
		}
		delete(object, "env")
	}

	if raw, found := object["plugin_kind"]; found {
		err = json.Unmarshal(raw, &a.PluginKind)
		if err != nil {
			return fmt.Errorf("error reading 'plugin_kind': %w", err)
		}
		delete(object, "plugin_kind")
	}

	if raw, found := object["plugin_name"]; found {
		err = json.Unmarshal(raw, &a.PluginName)
		if err != nil {
			return fmt.Errorf("error reading 'plugin_name': %w", err)
		}
		delete(object, "plugin_name")
	}

	if raw, found := object["plugin_team"]; found {
		err = json.Unmarshal(raw, &a.PluginTeam)
		if err != nil {
			return fmt.Errorf("error reading 'plugin_team': %w", err)
		}
		delete(object, "plugin_team")
	}

	if raw, found := object["plugin_version"]; found {
		err = json.Unmarshal(raw, &a.PluginVersion)
		if err != nil {
			return fmt.Errorf("error reading 'plugin_version': %w", err)
		}
		delete(object, "plugin_version")
	}

	if raw, found := object["skip_dependent_tables"]; found {
		err = json.Unmarshal(raw, &a.SkipDependentTables)
		if err != nil {
			return fmt.Errorf("error reading 'skip_dependent_tables': %w", err)
		}
		delete(object, "skip_dependent_tables")
	}

	if raw, found := object["skip_tables"]; found {
		err = json.Unmarshal(raw, &a.SkipTables)
		if err != nil {
			return fmt.Errorf("error reading 'skip_tables': %w", err)
		}
		delete(object, "skip_tables")
	}

	if raw, found := object["spec"]; found {
		err = json.Unmarshal(raw, &a.Spec)
		if err != nil {
			return fmt.Errorf("error reading 'spec': %w", err)
		}
		delete(object, "spec")
	}

	if raw, found := object["tables"]; found {
		err = json.Unmarshal(raw, &a.Tables)
		if err != nil {
			return fmt.Errorf("error reading 'tables': %w", err)
		}
		delete(object, "tables")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ConnectorAuthRequestAWS to handle AdditionalProperties
func (a ConnectorAuthRequestAWS) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Env != nil {
		object["env"], err = json.Marshal(a.Env)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'env': %w", err)
		}
	}

	object["plugin_kind"], err = json.Marshal(a.PluginKind)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plugin_kind': %w", err)
	}

	object["plugin_name"], err = json.Marshal(a.PluginName)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plugin_name': %w", err)
	}

	object["plugin_team"], err = json.Marshal(a.PluginTeam)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plugin_team': %w", err)
	}

	if a.PluginVersion != nil {
		object["plugin_version"], err = json.Marshal(a.PluginVersion)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plugin_version': %w", err)
		}
	}

	if a.SkipDependentTables != nil {
		object["skip_dependent_tables"], err = json.Marshal(a.SkipDependentTables)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'skip_dependent_tables': %w", err)
		}
	}

	if a.SkipTables != nil {
		object["skip_tables"], err = json.Marshal(a.SkipTables)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'skip_tables': %w", err)
		}
	}

	if a.Spec != nil {
		object["spec"], err = json.Marshal(a.Spec)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'spec': %w", err)
		}
	}

	if a.Tables != nil {
		object["tables"], err = json.Marshal(a.Tables)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tables': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ConnectorAuthRequestOAuth. Returns the specified
// element and whether it was found
func (a ConnectorAuthRequestOAuth) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ConnectorAuthRequestOAuth
func (a *ConnectorAuthRequestOAuth) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ConnectorAuthRequestOAuth to handle AdditionalProperties
func (a *ConnectorAuthRequestOAuth) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["base_url"]; found {
		err = json.Unmarshal(raw, &a.BaseURL)
		if err != nil {
			return fmt.Errorf("error reading 'base_url': %w", err)
		}
		delete(object, "base_url")
	}

	if raw, found := object["env"]; found {
		err = json.Unmarshal(raw, &a.Env)
		if err != nil {
			return fmt.Errorf("error reading 'env': %w", err)
		}
		delete(object, "env")
	}

	if raw, found := object["flavor"]; found {
		err = json.Unmarshal(raw, &a.Flavor)
		if err != nil {
			return fmt.Errorf("error reading 'flavor': %w", err)
		}
		delete(object, "flavor")
	}

	if raw, found := object["plugin_kind"]; found {
		err = json.Unmarshal(raw, &a.PluginKind)
		if err != nil {
			return fmt.Errorf("error reading 'plugin_kind': %w", err)
		}
		delete(object, "plugin_kind")
	}

	if raw, found := object["plugin_name"]; found {
		err = json.Unmarshal(raw, &a.PluginName)
		if err != nil {
			return fmt.Errorf("error reading 'plugin_name': %w", err)
		}
		delete(object, "plugin_name")
	}

	if raw, found := object["plugin_team"]; found {
		err = json.Unmarshal(raw, &a.PluginTeam)
		if err != nil {
			return fmt.Errorf("error reading 'plugin_team': %w", err)
		}
		delete(object, "plugin_team")
	}

	if raw, found := object["plugin_version"]; found {
		err = json.Unmarshal(raw, &a.PluginVersion)
		if err != nil {
			return fmt.Errorf("error reading 'plugin_version': %w", err)
		}
		delete(object, "plugin_version")
	}

	if raw, found := object["skip_dependent_tables"]; found {
		err = json.Unmarshal(raw, &a.SkipDependentTables)
		if err != nil {
			return fmt.Errorf("error reading 'skip_dependent_tables': %w", err)
		}
		delete(object, "skip_dependent_tables")
	}

	if raw, found := object["skip_tables"]; found {
		err = json.Unmarshal(raw, &a.SkipTables)
		if err != nil {
			return fmt.Errorf("error reading 'skip_tables': %w", err)
		}
		delete(object, "skip_tables")
	}

	if raw, found := object["spec"]; found {
		err = json.Unmarshal(raw, &a.Spec)
		if err != nil {
			return fmt.Errorf("error reading 'spec': %w", err)
		}
		delete(object, "spec")
	}

	if raw, found := object["tables"]; found {
		err = json.Unmarshal(raw, &a.Tables)
		if err != nil {
			return fmt.Errorf("error reading 'tables': %w", err)
		}
		delete(object, "tables")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ConnectorAuthRequestOAuth to handle AdditionalProperties
func (a ConnectorAuthRequestOAuth) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["base_url"], err = json.Marshal(a.BaseURL)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'base_url': %w", err)
	}

	if a.Env != nil {
		object["env"], err = json.Marshal(a.Env)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'env': %w", err)
		}
	}

	if a.Flavor != nil {
		object["flavor"], err = json.Marshal(a.Flavor)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flavor': %w", err)
		}
	}

	object["plugin_kind"], err = json.Marshal(a.PluginKind)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plugin_kind': %w", err)
	}

	object["plugin_name"], err = json.Marshal(a.PluginName)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plugin_name': %w", err)
	}

	object["plugin_team"], err = json.Marshal(a.PluginTeam)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plugin_team': %w", err)
	}

	if a.PluginVersion != nil {
		object["plugin_version"], err = json.Marshal(a.PluginVersion)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plugin_version': %w", err)
		}
	}

	if a.SkipDependentTables != nil {
		object["skip_dependent_tables"], err = json.Marshal(a.SkipDependentTables)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'skip_dependent_tables': %w", err)
		}
	}

	if a.SkipTables != nil {
		object["skip_tables"], err = json.Marshal(a.SkipTables)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'skip_tables': %w", err)
		}
	}

	if a.Spec != nil {
		object["spec"], err = json.Marshal(a.Spec)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'spec': %w", err)
		}
	}

	if a.Tables != nil {
		object["tables"], err = json.Marshal(a.Tables)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tables': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CreateTeamRequest. Returns the specified
// element and whether it was found
func (a CreateTeamRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CreateTeamRequest
func (a *CreateTeamRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CreateTeamRequest to handle AdditionalProperties
func (a *CreateTeamRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["display_name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return fmt.Errorf("error reading 'display_name': %w", err)
		}
		delete(object, "display_name")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CreateTeamRequest to handle AdditionalProperties
func (a CreateTeamRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["display_name"], err = json.Marshal(a.DisplayName)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'display_name': %w", err)
	}

	object["name"], err = json.Marshal(a.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CustomColumnDataImport. Returns the specified
// element and whether it was found
func (a CustomColumnDataImport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CustomColumnDataImport
func (a *CustomColumnDataImport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CustomColumnDataImport to handle AdditionalProperties
func (a *CustomColumnDataImport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["data"]; found {
		err = json.Unmarshal(raw, &a.Data)
		if err != nil {
			return fmt.Errorf("error reading 'data': %w", err)
		}
		delete(object, "data")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CustomColumnDataImport to handle AdditionalProperties
func (a CustomColumnDataImport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["data"], err = json.Marshal(a.Data)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'data': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CustomColumnDataValues. Returns the specified
// element and whether it was found
func (a CustomColumnDataValues) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CustomColumnDataValues
func (a *CustomColumnDataValues) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CustomColumnDataValues to handle AdditionalProperties
func (a *CustomColumnDataValues) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["data"]; found {
		err = json.Unmarshal(raw, &a.Data)
		if err != nil {
			return fmt.Errorf("error reading 'data': %w", err)
		}
		delete(object, "data")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CustomColumnDataValues to handle AdditionalProperties
func (a CustomColumnDataValues) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["data"], err = json.Marshal(a.Data)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'data': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExecuteAdHocQueryTeamRequest. Returns the specified
// element and whether it was found
func (a ExecuteAdHocQueryTeamRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExecuteAdHocQueryTeamRequest
func (a *ExecuteAdHocQueryTeamRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExecuteAdHocQueryTeamRequest to handle AdditionalProperties
func (a *ExecuteAdHocQueryTeamRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["query"]; found {
		err = json.Unmarshal(raw, &a.Query)
		if err != nil {
			return fmt.Errorf("error reading 'query': %w", err)
		}
		delete(object, "query")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExecuteAdHocQueryTeamRequest to handle AdditionalProperties
func (a ExecuteAdHocQueryTeamRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["query"], err = json.Marshal(a.Query)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'query': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Index400Response. Returns the specified
// element and whether it was found
func (a Index400Response) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Index400Response
func (a *Index400Response) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Index400Response to handle AdditionalProperties
func (a *Index400Response) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["errors"]; found {
		err = json.Unmarshal(raw, &a.Errors)
		if err != nil {
			return fmt.Errorf("error reading 'errors': %w", err)
		}
		delete(object, "errors")
	}

	if raw, found := object["field_errors"]; found {
		err = json.Unmarshal(raw, &a.FieldErrors)
		if err != nil {
			return fmt.Errorf("error reading 'field_errors': %w", err)
		}
		delete(object, "field_errors")
	}

	if raw, found := object["message"]; found {
		err = json.Unmarshal(raw, &a.Message)
		if err != nil {
			return fmt.Errorf("error reading 'message': %w", err)
		}
		delete(object, "message")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Index400Response to handle AdditionalProperties
func (a Index400Response) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Errors != nil {
		object["errors"], err = json.Marshal(a.Errors)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'errors': %w", err)
		}
	}

	if a.FieldErrors != nil {
		object["field_errors"], err = json.Marshal(a.FieldErrors)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'field_errors': %w", err)
		}
	}

	object["message"], err = json.Marshal(a.Message)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'message': %w", err)
	}

	object["status"], err = json.Marshal(a.Status)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'status': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LoginUserRequest. Returns the specified
// element and whether it was found
func (a LoginUserRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LoginUserRequest
func (a *LoginUserRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LoginUserRequest to handle AdditionalProperties
func (a *LoginUserRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["id_token"]; found {
		err = json.Unmarshal(raw, &a.IDToken)
		if err != nil {
			return fmt.Errorf("error reading 'id_token': %w", err)
		}
		delete(object, "id_token")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LoginUserRequest to handle AdditionalProperties
func (a LoginUserRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["id_token"], err = json.Marshal(a.IDToken)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'id_token': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ManageAddTeamMemberRequest. Returns the specified
// element and whether it was found
func (a ManageAddTeamMemberRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ManageAddTeamMemberRequest
func (a *ManageAddTeamMemberRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ManageAddTeamMemberRequest to handle AdditionalProperties
func (a *ManageAddTeamMemberRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["roles"]; found {
		err = json.Unmarshal(raw, &a.Roles)
		if err != nil {
			return fmt.Errorf("error reading 'roles': %w", err)
		}
		delete(object, "roles")
	}

	if raw, found := object["user_id"]; found {
		err = json.Unmarshal(raw, &a.UserID)
		if err != nil {
			return fmt.Errorf("error reading 'user_id': %w", err)
		}
		delete(object, "user_id")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ManageAddTeamMemberRequest to handle AdditionalProperties
func (a ManageAddTeamMemberRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["roles"], err = json.Marshal(a.Roles)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'roles': %w", err)
	}

	object["user_id"], err = json.Marshal(a.UserID)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'user_id': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ManageGetPlatformRegistry200Response. Returns the specified
// element and whether it was found
func (a ManageGetPlatformRegistry200Response) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ManageGetPlatformRegistry200Response
func (a *ManageGetPlatformRegistry200Response) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ManageGetPlatformRegistry200Response to handle AdditionalProperties
func (a *ManageGetPlatformRegistry200Response) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["activation_id"]; found {
		err = json.Unmarshal(raw, &a.ActivationID)
		if err != nil {
			return fmt.Errorf("error reading 'activation_id': %w", err)
		}
		delete(object, "activation_id")
	}

	if raw, found := object["api_key_last_four"]; found {
		err = json.Unmarshal(raw, &a.APIKeyLastFour)
		if err != nil {
			return fmt.Errorf("error reading 'api_key_last_four': %w", err)
		}
		delete(object, "api_key_last_four")
	}

	if raw, found := object["installation_id"]; found {
		err = json.Unmarshal(raw, &a.InstallationID)
		if err != nil {
			return fmt.Errorf("error reading 'installation_id': %w", err)
		}
		delete(object, "installation_id")
	}

	if raw, found := object["last_activated_at"]; found {
		err = json.Unmarshal(raw, &a.LastActivatedAt)
		if err != nil {
			return fmt.Errorf("error reading 'last_activated_at': %w", err)
		}
		delete(object, "last_activated_at")
	}

	if raw, found := object["next_activation_at"]; found {
		err = json.Unmarshal(raw, &a.NextActivationAt)
		if err != nil {
			return fmt.Errorf("error reading 'next_activation_at': %w", err)
		}
		delete(object, "next_activation_at")
	}

	if raw, found := object["offline_license_expires_at"]; found {
		err = json.Unmarshal(raw, &a.OfflineLicenseExpiresAt)
		if err != nil {
			return fmt.Errorf("error reading 'offline_license_expires_at': %w", err)
		}
		delete(object, "offline_license_expires_at")
	}

	if raw, found := object["offline_license_registered_to"]; found {
		err = json.Unmarshal(raw, &a.OfflineLicenseRegisteredTo)
		if err != nil {
			return fmt.Errorf("error reading 'offline_license_registered_to': %w", err)
		}
		delete(object, "offline_license_registered_to")
	}

	if raw, found := object["team_name"]; found {
		err = json.Unmarshal(raw, &a.TeamName)
		if err != nil {
			return fmt.Errorf("error reading 'team_name': %w", err)
		}
		delete(object, "team_name")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ManageGetPlatformRegistry200Response to handle AdditionalProperties
func (a ManageGetPlatformRegistry200Response) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ActivationID != nil {
		object["activation_id"], err = json.Marshal(a.ActivationID)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'activation_id': %w", err)
		}
	}

	if a.APIKeyLastFour != nil {
		object["api_key_last_four"], err = json.Marshal(a.APIKeyLastFour)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'api_key_last_four': %w", err)
		}
	}

	object["installation_id"], err = json.Marshal(a.InstallationID)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'installation_id': %w", err)
	}

	if a.LastActivatedAt != nil {
		object["last_activated_at"], err = json.Marshal(a.LastActivatedAt)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'last_activated_at': %w", err)
		}
	}

	if a.NextActivationAt != nil {
		object["next_activation_at"], err = json.Marshal(a.NextActivationAt)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'next_activation_at': %w", err)
		}
	}

	if a.OfflineLicenseExpiresAt != nil {
		object["offline_license_expires_at"], err = json.Marshal(a.OfflineLicenseExpiresAt)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'offline_license_expires_at': %w", err)
		}
	}

	if a.OfflineLicenseRegisteredTo != nil {
		object["offline_license_registered_to"], err = json.Marshal(a.OfflineLicenseRegisteredTo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'offline_license_registered_to': %w", err)
		}
	}

	if a.TeamName != nil {
		object["team_name"], err = json.Marshal(a.TeamName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'team_name': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ManageRegisterPlatformWithOfflineLicense200Response. Returns the specified
// element and whether it was found
func (a ManageRegisterPlatformWithOfflineLicense200Response) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ManageRegisterPlatformWithOfflineLicense200Response
func (a *ManageRegisterPlatformWithOfflineLicense200Response) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ManageRegisterPlatformWithOfflineLicense200Response to handle AdditionalProperties
func (a *ManageRegisterPlatformWithOfflineLicense200Response) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["expires_at"]; found {
		err = json.Unmarshal(raw, &a.ExpiresAt)
		if err != nil {
			return fmt.Errorf("error reading 'expires_at': %w", err)
		}
		delete(object, "expires_at")
	}

	if raw, found := object["registered_to"]; found {
		err = json.Unmarshal(raw, &a.RegisteredTo)
		if err != nil {
			return fmt.Errorf("error reading 'registered_to': %w", err)
		}
		delete(object, "registered_to")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ManageRegisterPlatformWithOfflineLicense200Response to handle AdditionalProperties
func (a ManageRegisterPlatformWithOfflineLicense200Response) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["expires_at"], err = json.Marshal(a.ExpiresAt)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'expires_at': %w", err)
	}

	object["registered_to"], err = json.Marshal(a.RegisteredTo)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'registered_to': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ManageRegisterPlatformWithOfflineLicenseRequest. Returns the specified
// element and whether it was found
func (a ManageRegisterPlatformWithOfflineLicenseRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ManageRegisterPlatformWithOfflineLicenseRequest
func (a *ManageRegisterPlatformWithOfflineLicenseRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ManageRegisterPlatformWithOfflineLicenseRequest to handle AdditionalProperties
func (a *ManageRegisterPlatformWithOfflineLicenseRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["license"]; found {
		err = json.Unmarshal(raw, &a.License)
		if err != nil {
			return fmt.Errorf("error reading 'license': %w", err)
		}
		delete(object, "license")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ManageRegisterPlatformWithOfflineLicenseRequest to handle AdditionalProperties
func (a ManageRegisterPlatformWithOfflineLicenseRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["license"], err = json.Marshal(a.License)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'license': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ManageRegisterPlatform200Response. Returns the specified
// element and whether it was found
func (a ManageRegisterPlatform200Response) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ManageRegisterPlatform200Response
func (a *ManageRegisterPlatform200Response) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ManageRegisterPlatform200Response to handle AdditionalProperties
func (a *ManageRegisterPlatform200Response) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["team_name"]; found {
		err = json.Unmarshal(raw, &a.TeamName)
		if err != nil {
			return fmt.Errorf("error reading 'team_name': %w", err)
		}
		delete(object, "team_name")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ManageRegisterPlatform200Response to handle AdditionalProperties
func (a ManageRegisterPlatform200Response) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["team_name"], err = json.Marshal(a.TeamName)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'team_name': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ManageRegisterPlatform205Response. Returns the specified
// element and whether it was found
func (a ManageRegisterPlatform205Response) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ManageRegisterPlatform205Response
func (a *ManageRegisterPlatform205Response) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ManageRegisterPlatform205Response to handle AdditionalProperties
func (a *ManageRegisterPlatform205Response) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["button_text"]; found {
		err = json.Unmarshal(raw, &a.ButtonText)
		if err != nil {
			return fmt.Errorf("error reading 'button_text': %w", err)
		}
		delete(object, "button_text")
	}

	if raw, found := object["button_url"]; found {
		err = json.Unmarshal(raw, &a.ButtonURL)
		if err != nil {
			return fmt.Errorf("error reading 'button_url': %w", err)
		}
		delete(object, "button_url")
	}

	if raw, found := object["error"]; found {
		err = json.Unmarshal(raw, &a.Error)
		if err != nil {
			return fmt.Errorf("error reading 'error': %w", err)
		}
		delete(object, "error")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ManageRegisterPlatform205Response to handle AdditionalProperties
func (a ManageRegisterPlatform205Response) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ButtonText != nil {
		object["button_text"], err = json.Marshal(a.ButtonText)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'button_text': %w", err)
		}
	}

	if a.ButtonURL != nil {
		object["button_url"], err = json.Marshal(a.ButtonURL)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'button_url': %w", err)
		}
	}

	object["error"], err = json.Marshal(a.Error)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'error': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ManageRegisterPlatformRequest. Returns the specified
// element and whether it was found
func (a ManageRegisterPlatformRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ManageRegisterPlatformRequest
func (a *ManageRegisterPlatformRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ManageRegisterPlatformRequest to handle AdditionalProperties
func (a *ManageRegisterPlatformRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["api_key"]; found {
		err = json.Unmarshal(raw, &a.APIKey)
		if err != nil {
			return fmt.Errorf("error reading 'api_key': %w", err)
		}
		delete(object, "api_key")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ManageRegisterPlatformRequest to handle AdditionalProperties
func (a ManageRegisterPlatformRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["api_key"], err = json.Marshal(a.APIKey)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'api_key': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ManageRemoveTeamMemberRequest. Returns the specified
// element and whether it was found
func (a ManageRemoveTeamMemberRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ManageRemoveTeamMemberRequest
func (a *ManageRemoveTeamMemberRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ManageRemoveTeamMemberRequest to handle AdditionalProperties
func (a *ManageRemoveTeamMemberRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["user_id"]; found {
		err = json.Unmarshal(raw, &a.UserID)
		if err != nil {
			return fmt.Errorf("error reading 'user_id': %w", err)
		}
		delete(object, "user_id")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ManageRemoveTeamMemberRequest to handle AdditionalProperties
func (a ManageRemoveTeamMemberRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["user_id"], err = json.Marshal(a.UserID)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'user_id': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ResetLocalUserPasswordRequest. Returns the specified
// element and whether it was found
func (a ResetLocalUserPasswordRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ResetLocalUserPasswordRequest
func (a *ResetLocalUserPasswordRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ResetLocalUserPasswordRequest to handle AdditionalProperties
func (a *ResetLocalUserPasswordRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["email"]; found {
		err = json.Unmarshal(raw, &a.Email)
		if err != nil {
			return fmt.Errorf("error reading 'email': %w", err)
		}
		delete(object, "email")
	}

	if raw, found := object["new_password"]; found {
		err = json.Unmarshal(raw, &a.NewPassword)
		if err != nil {
			return fmt.Errorf("error reading 'new_password': %w", err)
		}
		delete(object, "new_password")
	}

	if raw, found := object["reset_token"]; found {
		err = json.Unmarshal(raw, &a.ResetToken)
		if err != nil {
			return fmt.Errorf("error reading 'reset_token': %w", err)
		}
		delete(object, "reset_token")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ResetLocalUserPasswordRequest to handle AdditionalProperties
func (a ResetLocalUserPasswordRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["email"], err = json.Marshal(a.Email)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'email': %w", err)
	}

	object["new_password"], err = json.Marshal(a.NewPassword)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'new_password': %w", err)
	}

	object["reset_token"], err = json.Marshal(a.ResetToken)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'reset_token': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SendAnonymousEventRequest. Returns the specified
// element and whether it was found
func (a SendAnonymousEventRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SendAnonymousEventRequest
func (a *SendAnonymousEventRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SendAnonymousEventRequest to handle AdditionalProperties
func (a *SendAnonymousEventRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["anonymous_id"]; found {
		err = json.Unmarshal(raw, &a.AnonymousID)
		if err != nil {
			return fmt.Errorf("error reading 'anonymous_id': %w", err)
		}
		delete(object, "anonymous_id")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["properties"]; found {
		err = json.Unmarshal(raw, &a.Properties)
		if err != nil {
			return fmt.Errorf("error reading 'properties': %w", err)
		}
		delete(object, "properties")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SendAnonymousEventRequest to handle AdditionalProperties
func (a SendAnonymousEventRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["anonymous_id"], err = json.Marshal(a.AnonymousID)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'anonymous_id': %w", err)
	}

	object["name"], err = json.Marshal(a.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	if a.Properties != nil {
		object["properties"], err = json.Marshal(a.Properties)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'properties': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SendUserEventRequest. Returns the specified
// element and whether it was found
func (a SendUserEventRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SendUserEventRequest
func (a *SendUserEventRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SendUserEventRequest to handle AdditionalProperties
func (a *SendUserEventRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["properties"]; found {
		err = json.Unmarshal(raw, &a.Properties)
		if err != nil {
			return fmt.Errorf("error reading 'properties': %w", err)
		}
		delete(object, "properties")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SendUserEventRequest to handle AdditionalProperties
func (a SendUserEventRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["name"], err = json.Marshal(a.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	if a.Properties != nil {
		object["properties"], err = json.Marshal(a.Properties)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'properties': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SyncRunLogs. Returns the specified
// element and whether it was found
func (a SyncRunLogs) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SyncRunLogs
func (a *SyncRunLogs) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SyncRunLogs to handle AdditionalProperties
func (a *SyncRunLogs) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["location"]; found {
		err = json.Unmarshal(raw, &a.Location)
		if err != nil {
			return fmt.Errorf("error reading 'location': %w", err)
		}
		delete(object, "location")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SyncRunLogs to handle AdditionalProperties
func (a SyncRunLogs) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["location"], err = json.Marshal(a.Location)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'location': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TestConnectionLogs. Returns the specified
// element and whether it was found
func (a TestConnectionLogs) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TestConnectionLogs
func (a *TestConnectionLogs) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TestConnectionLogs to handle AdditionalProperties
func (a *TestConnectionLogs) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["location"]; found {
		err = json.Unmarshal(raw, &a.Location)
		if err != nil {
			return fmt.Errorf("error reading 'location': %w", err)
		}
		delete(object, "location")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TestConnectionLogs to handle AdditionalProperties
func (a TestConnectionLogs) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["location"], err = json.Marshal(a.Location)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'location': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpdateCurrentUserRequest. Returns the specified
// element and whether it was found
func (a UpdateCurrentUserRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpdateCurrentUserRequest
func (a *UpdateCurrentUserRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpdateCurrentUserRequest to handle AdditionalProperties
func (a *UpdateCurrentUserRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["tracking_opt_in"]; found {
		err = json.Unmarshal(raw, &a.TrackingOptIn)
		if err != nil {
			return fmt.Errorf("error reading 'tracking_opt_in': %w", err)
		}
		delete(object, "tracking_opt_in")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpdateCurrentUserRequest to handle AdditionalProperties
func (a UpdateCurrentUserRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Name != nil {
		object["name"], err = json.Marshal(a.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	if a.TrackingOptIn != nil {
		object["tracking_opt_in"], err = json.Marshal(a.TrackingOptIn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tracking_opt_in': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpdateCustomerRequest. Returns the specified
// element and whether it was found
func (a UpdateCustomerRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpdateCustomerRequest
func (a *UpdateCustomerRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpdateCustomerRequest to handle AdditionalProperties
func (a *UpdateCustomerRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["company_name"]; found {
		err = json.Unmarshal(raw, &a.CompanyName)
		if err != nil {
			return fmt.Errorf("error reading 'company_name': %w", err)
		}
		delete(object, "company_name")
	}

	if raw, found := object["first_name"]; found {
		err = json.Unmarshal(raw, &a.FirstName)
		if err != nil {
			return fmt.Errorf("error reading 'first_name': %w", err)
		}
		delete(object, "first_name")
	}

	if raw, found := object["last_name"]; found {
		err = json.Unmarshal(raw, &a.LastName)
		if err != nil {
			return fmt.Errorf("error reading 'last_name': %w", err)
		}
		delete(object, "last_name")
	}

	if raw, found := object["learned_about_cq_from"]; found {
		err = json.Unmarshal(raw, &a.LearnedAboutCqFrom)
		if err != nil {
			return fmt.Errorf("error reading 'learned_about_cq_from': %w", err)
		}
		delete(object, "learned_about_cq_from")
	}

	if raw, found := object["learned_about_cq_from_other"]; found {
		err = json.Unmarshal(raw, &a.LearnedAboutCqFromOther)
		if err != nil {
			return fmt.Errorf("error reading 'learned_about_cq_from_other': %w", err)
		}
		delete(object, "learned_about_cq_from_other")
	}

	if raw, found := object["phone"]; found {
		err = json.Unmarshal(raw, &a.Phone)
		if err != nil {
			return fmt.Errorf("error reading 'phone': %w", err)
		}
		delete(object, "phone")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpdateCustomerRequest to handle AdditionalProperties
func (a UpdateCustomerRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.CompanyName != nil {
		object["company_name"], err = json.Marshal(a.CompanyName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'company_name': %w", err)
		}
	}

	object["first_name"], err = json.Marshal(a.FirstName)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'first_name': %w", err)
	}

	object["last_name"], err = json.Marshal(a.LastName)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'last_name': %w", err)
	}

	if a.LearnedAboutCqFrom != nil {
		object["learned_about_cq_from"], err = json.Marshal(a.LearnedAboutCqFrom)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'learned_about_cq_from': %w", err)
		}
	}

	if a.LearnedAboutCqFromOther != nil {
		object["learned_about_cq_from_other"], err = json.Marshal(a.LearnedAboutCqFromOther)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'learned_about_cq_from_other': %w", err)
		}
	}

	if a.Phone != nil {
		object["phone"], err = json.Marshal(a.Phone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'phone': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpdateLocalUserRequest. Returns the specified
// element and whether it was found
func (a UpdateLocalUserRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpdateLocalUserRequest
func (a *UpdateLocalUserRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpdateLocalUserRequest to handle AdditionalProperties
func (a *UpdateLocalUserRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["email"]; found {
		err = json.Unmarshal(raw, &a.Email)
		if err != nil {
			return fmt.Errorf("error reading 'email': %w", err)
		}
		delete(object, "email")
	}

	if raw, found := object["enabled"]; found {
		err = json.Unmarshal(raw, &a.Enabled)
		if err != nil {
			return fmt.Errorf("error reading 'enabled': %w", err)
		}
		delete(object, "enabled")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["password"]; found {
		err = json.Unmarshal(raw, &a.Password)
		if err != nil {
			return fmt.Errorf("error reading 'password': %w", err)
		}
		delete(object, "password")
	}

	if raw, found := object["roles"]; found {
		err = json.Unmarshal(raw, &a.Roles)
		if err != nil {
			return fmt.Errorf("error reading 'roles': %w", err)
		}
		delete(object, "roles")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpdateLocalUserRequest to handle AdditionalProperties
func (a UpdateLocalUserRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Email != nil {
		object["email"], err = json.Marshal(a.Email)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'email': %w", err)
		}
	}

	if a.Enabled != nil {
		object["enabled"], err = json.Marshal(a.Enabled)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'enabled': %w", err)
		}
	}

	if a.Name != nil {
		object["name"], err = json.Marshal(a.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	if a.Password != nil {
		object["password"], err = json.Marshal(a.Password)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'password': %w", err)
		}
	}

	if a.Roles != nil {
		object["roles"], err = json.Marshal(a.Roles)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'roles': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpdateTeamRequest. Returns the specified
// element and whether it was found
func (a UpdateTeamRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpdateTeamRequest
func (a *UpdateTeamRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpdateTeamRequest to handle AdditionalProperties
func (a *UpdateTeamRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["display_name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return fmt.Errorf("error reading 'display_name': %w", err)
		}
		delete(object, "display_name")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpdateTeamRequest to handle AdditionalProperties
func (a UpdateTeamRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.DisplayName != nil {
		object["display_name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'display_name': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UsageSummary. Returns the specified
// element and whether it was found
func (a UsageSummary) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UsageSummary
func (a *UsageSummary) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UsageSummary to handle AdditionalProperties
func (a *UsageSummary) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["groups"]; found {
		err = json.Unmarshal(raw, &a.Groups)
		if err != nil {
			return fmt.Errorf("error reading 'groups': %w", err)
		}
		delete(object, "groups")
	}

	if raw, found := object["metadata"]; found {
		err = json.Unmarshal(raw, &a.Metadata)
		if err != nil {
			return fmt.Errorf("error reading 'metadata': %w", err)
		}
		delete(object, "metadata")
	}

	if raw, found := object["values"]; found {
		err = json.Unmarshal(raw, &a.Values)
		if err != nil {
			return fmt.Errorf("error reading 'values': %w", err)
		}
		delete(object, "values")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UsageSummary to handle AdditionalProperties
func (a UsageSummary) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["groups"], err = json.Marshal(a.Groups)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'groups': %w", err)
	}

	object["metadata"], err = json.Marshal(a.Metadata)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'metadata': %w", err)
	}

	object["values"], err = json.Marshal(a.Values)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'values': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UserTOTPVerifyRequest. Returns the specified
// element and whether it was found
func (a UserTOTPVerifyRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UserTOTPVerifyRequest
func (a *UserTOTPVerifyRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UserTOTPVerifyRequest to handle AdditionalProperties
func (a *UserTOTPVerifyRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["otp"]; found {
		err = json.Unmarshal(raw, &a.Otp)
		if err != nil {
			return fmt.Errorf("error reading 'otp': %w", err)
		}
		delete(object, "otp")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UserTOTPVerifyRequest to handle AdditionalProperties
func (a UserTOTPVerifyRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["otp"], err = json.Marshal(a.Otp)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'otp': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsStartedNotification returns the union data inside the OnboardingAWSNotification as a StartedNotification
func (t OnboardingAWSNotification) AsStartedNotification() (StartedNotification, error) {
	var body StartedNotification
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStartedNotification overwrites any union data inside the OnboardingAWSNotification as the provided StartedNotification
func (t *OnboardingAWSNotification) FromStartedNotification(v StartedNotification) error {
	v.Status = "started"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStartedNotification performs a merge with any union data inside the OnboardingAWSNotification, using the provided StartedNotification
func (t *OnboardingAWSNotification) MergeStartedNotification(v StartedNotification) error {
	v.Status = "started"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRevokedNotification returns the union data inside the OnboardingAWSNotification as a RevokedNotification
func (t OnboardingAWSNotification) AsRevokedNotification() (RevokedNotification, error) {
	var body RevokedNotification
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRevokedNotification overwrites any union data inside the OnboardingAWSNotification as the provided RevokedNotification
func (t *OnboardingAWSNotification) FromRevokedNotification(v RevokedNotification) error {
	v.Status = "revoked"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRevokedNotification performs a merge with any union data inside the OnboardingAWSNotification, using the provided RevokedNotification
func (t *OnboardingAWSNotification) MergeRevokedNotification(v RevokedNotification) error {
	v.Status = "revoked"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFailedNotification returns the union data inside the OnboardingAWSNotification as a FailedNotification
func (t OnboardingAWSNotification) AsFailedNotification() (FailedNotification, error) {
	var body FailedNotification
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFailedNotification overwrites any union data inside the OnboardingAWSNotification as the provided FailedNotification
func (t *OnboardingAWSNotification) FromFailedNotification(v FailedNotification) error {
	v.Status = "failed"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFailedNotification performs a merge with any union data inside the OnboardingAWSNotification, using the provided FailedNotification
func (t *OnboardingAWSNotification) MergeFailedNotification(v FailedNotification) error {
	v.Status = "failed"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDeployedNotification returns the union data inside the OnboardingAWSNotification as a DeployedNotification
func (t OnboardingAWSNotification) AsDeployedNotification() (DeployedNotification, error) {
	var body DeployedNotification
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeployedNotification overwrites any union data inside the OnboardingAWSNotification as the provided DeployedNotification
func (t *OnboardingAWSNotification) FromDeployedNotification(v DeployedNotification) error {
	v.Status = "deployed"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeployedNotification performs a merge with any union data inside the OnboardingAWSNotification, using the provided DeployedNotification
func (t *OnboardingAWSNotification) MergeDeployedNotification(v DeployedNotification) error {
	v.Status = "deployed"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCompletedNotification returns the union data inside the OnboardingAWSNotification as a CompletedNotification
func (t OnboardingAWSNotification) AsCompletedNotification() (CompletedNotification, error) {
	var body CompletedNotification
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCompletedNotification overwrites any union data inside the OnboardingAWSNotification as the provided CompletedNotification
func (t *OnboardingAWSNotification) FromCompletedNotification(v CompletedNotification) error {
	v.Status = "completed"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCompletedNotification performs a merge with any union data inside the OnboardingAWSNotification, using the provided CompletedNotification
func (t *OnboardingAWSNotification) MergeCompletedNotification(v CompletedNotification) error {
	v.Status = "completed"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCompletedSingleAccountNotification returns the union data inside the OnboardingAWSNotification as a CompletedSingleAccountNotification
func (t OnboardingAWSNotification) AsCompletedSingleAccountNotification() (CompletedSingleAccountNotification, error) {
	var body CompletedSingleAccountNotification
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCompletedSingleAccountNotification overwrites any union data inside the OnboardingAWSNotification as the provided CompletedSingleAccountNotification
func (t *OnboardingAWSNotification) FromCompletedSingleAccountNotification(v CompletedSingleAccountNotification) error {
	v.Status = "completed_account"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCompletedSingleAccountNotification performs a merge with any union data inside the OnboardingAWSNotification, using the provided CompletedSingleAccountNotification
func (t *OnboardingAWSNotification) MergeCompletedSingleAccountNotification(v CompletedSingleAccountNotification) error {
	v.Status = "completed_account"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t OnboardingAWSNotification) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"status"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t OnboardingAWSNotification) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "completed":
		return t.AsCompletedNotification()
	case "completed_account":
		return t.AsCompletedSingleAccountNotification()
	case "deployed":
		return t.AsDeployedNotification()
	case "failed":
		return t.AsFailedNotification()
	case "revoked":
		return t.AsRevokedNotification()
	case "started":
		return t.AsStartedNotification()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t OnboardingAWSNotification) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OnboardingAWSNotification) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
