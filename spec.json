{
  "openapi": "3.1.0",
  "info": {
    "contact": {
      "email": "support@cloudquery.io",
      "name": "CloudQuery Support Team",
      "url": "https://cloudquery.io"
    },
    "description": "Welcome to the CloudQuery Platform API documentation! This API can be used to interact with the CloudQuery platform. As a user, the API allows you to search the CloudQuery asset inventory, run SQL queries against the data warehouse, save and load searches, and much more. As an administrator, it allows you to manage your teams, syncs, and other objects.\n### Authentication\nThe API is secured using bearer tokens. To get started, you can generate an API key for your Platform deployment from your platform dashboard. For a step-by-step guide, see: https://docs.cloudquery.io/docs/deployment/generate-api-key.\nThe base URL for the API depends on where your CloudQuery Platform is hosted. If running locally, this is usually http://localhost:3000/api. In a production deployment it should be an HTTPS URL. For purposes of illustration, we will assume the platform instance is available at https://cloudquery.mycompany.com. In this case, the base API endpoint will be https://cloudquery.mycompany.com/api.\n### Example Request\nTo test your connection to the API, we can use the `/plugins` endpoint. For example:\n`curl -v -H \"Authorization: Bearer $CLOUDQUERY_API_KEY\" \\ https://cloudquery.mycompany.com/api/plugins`\n",
    "license": {
      "name": "MIT",
      "url": "https://spdx.org/licenses/MIT"
    },
    "termsOfService": "https://www.cloudquery.io/terms",
    "title": "CloudQuery Platform OpenAPI Spec",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://example-instance-xyz.mycloudquery.com",
      "description": "Example CloudQuery Platform production instance (Adjust URL to your instance as needed)",
      "x-internal": true
    }
  ],
  "security": [
    {
      "bearerAuth": []
    },
    {
      "cookieAuth": []
    }
  ],
  "tags": [
    {
      "name": "admin"
    },
    {
      "name": "alerts"
    },
    {
      "name": "analytics"
    },
    {
      "name": "audit-logs"
    },
    {
      "name": "custom-columns"
    },
    {
      "name": "filters"
    },
    {
      "name": "healthcheck"
    },
    {
      "name": "images"
    },
    {
      "name": "plugins"
    },
    {
      "name": "policies"
    },
    {
      "name": "queries"
    },
    {
      "name": "registry"
    },
    {
      "name": "reports"
    },
    {
      "name": "syncs"
    },
    {
      "name": "tables"
    },
    {
      "name": "teams"
    },
    {
      "name": "users"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "description": "Index endpoint, returns 200",
        "operationId": "Index",
        "responses": {
          "200": {
            "description": "Response",
            "headers": {
              "Link": {
                "description": "RFC 8631 compliant link relation information",
                "schema": {
                  "type": "string",
                  "example": "<https://platform-api-docs.cloudquery.io>; rel=\"service-doc\""
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "additionalProperties": false,
                      "description": "Basic Error",
                      "required": [
                        "message",
                        "status"
                      ],
                      "properties": {
                        "message": {
                          "type": "string"
                        },
                        "status": {
                          "type": "integer"
                        }
                      },
                      "title": "Basic Error",
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "field_errors": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Bad request"
          }
        },
        "security": [],
        "tags": [
          "healthcheck"
        ]
      }
    },
    "/audit-logs": {
      "get": {
        "description": "List audit log events with pagination and filtering",
        "operationId": "ListAuditLogs",
        "parameters": [
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by user ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "team_name",
            "in": "query",
            "description": "Filter by team name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event_type",
            "in": "query",
            "description": "Filter by event type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entity_display_name",
            "in": "query",
            "description": "Filter by entity display name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_ip_address",
            "in": "query",
            "description": "Filter by user IP address",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "description": "Filter by start time (inclusive)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end time (inclusive)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search across user name, team name, event type, entity display name, and user IP address",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/AuditLogEvent"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "audit-logs"
        ]
      }
    },
    "/audit-logs/{id}": {
      "get": {
        "description": "Get a specific audit log event by ID",
        "operationId": "GetAuditLog",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditLogEvent"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "audit-logs"
        ]
      }
    },
    "/filters": {
      "get": {
        "description": "List Filters",
        "operationId": "ListFilters",
        "parameters": [
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/filter_tags"
          },
          {
            "$ref": "#/components/parameters/filter_name_filter"
          },
          {
            "$ref": "#/components/parameters/filter_expression_filter"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Filter"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "filters"
        ]
      }
    },
    "/filters/tags": {
      "get": {
        "description": "List Filter Tags",
        "operationId": "ListFilterTags",
        "parameters": [
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FilterTag"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "filters"
        ]
      }
    },
    "/filters/{filter_id}": {
      "get": {
        "description": "Get a table filter by ID",
        "operationId": "GetFilterByID",
        "parameters": [
          {
            "$ref": "#/components/parameters/filter_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "filters"
        ]
      },
      "patch": {
        "description": "Update a table filter",
        "operationId": "UpdateFilter",
        "parameters": [
          {
            "$ref": "#/components/parameters/filter_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "filters"
        ]
      },
      "delete": {
        "description": "Delete a table filter",
        "operationId": "DeleteFilter",
        "parameters": [
          {
            "$ref": "#/components/parameters/filter_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "filters"
        ]
      }
    },
    "/healthcheck": {
      "head": {
        "description": "Health check endpoint, returns 200",
        "operationId": "HealthCheckHead",
        "x-internal": true,
        "responses": {
          "200": {
            "description": "Response"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "security": [],
        "tags": [
          "healthcheck"
        ]
      },
      "get": {
        "description": "Health check endpoint, returns 200",
        "operationId": "HealthCheck",
        "responses": {
          "200": {
            "description": "Response"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "security": [],
        "tags": [
          "healthcheck"
        ]
      }
    },
    "/openapi.json": {
      "get": {
        "summary": "Get OpenAPI JSON",
        "description": "Returns the OpenAPI definition in JSON format.",
        "operationId": "GetOpenAPIJSON",
        "responses": {
          "200": {
            "description": "OpenAPI specification in JSON format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The OpenAPI document for this API in JSON format"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "security": []
      }
    },
    "/manage/assetview": {
      "get": {
        "description": "Get assetview status",
        "operationId": "AssetViewGetStatus",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "is_running"
                  ],
                  "properties": {
                    "is_running": {
                      "type": "boolean",
                      "description": "Whether the assetview is currently running"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "admin"
        ]
      },
      "post": {
        "description": "Trigger assetview run",
        "operationId": "AssetViewTrigger",
        "responses": {
          "201": {
            "description": "Triggered new run"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "admin"
        ]
      }
    },
    "/manage/assetview/logs": {
      "get": {
        "description": "List asset view logs",
        "operationId": "AssetViewListLogs",
        "parameters": [
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/assetview_run_type"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/AssetViewRun"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "admin"
        ]
      }
    },
    "/manage/auth/saml": {
      "get": {
        "description": "Get SAML integration information",
        "operationId": "ManageGetSAML",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SAMLConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "admin"
        ]
      },
      "patch": {
        "description": "Update SAML integration information",
        "operationId": "ManageUpdateSAML",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SAMLConfigUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SAMLConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "admin"
        ]
      }
    },
    "/manage/register-platform": {
      "get": {
        "description": "Get platform registry information",
        "operationId": "ManageGetPlatformRegistry",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "installation_id"
                  ],
                  "properties": {
                    "installation_id": {
                      "type": "string",
                      "description": "Installation ID",
                      "x-go-name": "InstallationID"
                    },
                    "activation_id": {
                      "type": "string",
                      "description": "Activation ID",
                      "format": "uuid",
                      "x-go-name": "ActivationID"
                    },
                    "team_name": {
                      "type": "string",
                      "description": "Name of the team that was activated"
                    },
                    "api_key_last_four": {
                      "type": "string",
                      "description": "Last 4 characters of the API key",
                      "x-go-name": "APIKeyLastFour"
                    },
                    "last_activated_at": {
                      "type": "string",
                      "description": "Timestamp of the last activation",
                      "format": "date-time"
                    },
                    "next_activation_at": {
                      "type": "string",
                      "description": "Timestamp of the next activation",
                      "format": "date-time"
                    },
                    "offline_license_registered_to": {
                      "type": "string",
                      "description": "Name the offline license is registered to"
                    },
                    "offline_license_expires_at": {
                      "type": "string",
                      "description": "Timestamp of the offline license expiration",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "admin"
        ]
      },
      "post": {
        "description": "Register platform usage by API key",
        "operationId": "ManageRegisterPlatform",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "api_key"
                ],
                "properties": {
                  "api_key": {
                    "type": "string",
                    "description": "Team API key to activate platform with",
                    "x-go-name": "APIKey",
                    "minLength": 32
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "team_name"
                  ],
                  "properties": {
                    "team_name": {
                      "type": "string",
                      "description": "Name of the team that was activated"
                    }
                  }
                }
              }
            }
          },
          "205": {
            "description": "Activation method is no longer valid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "button_text": {
                      "type": "string",
                      "description": "Text for the button"
                    },
                    "button_url": {
                      "type": "string",
                      "format": "url",
                      "description": "URL for the button",
                      "x-go-name": "ButtonURL"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "admin"
        ]
      }
    },
    "/manage/register-platform/offline": {
      "post": {
        "description": "Register platform usage by offline license",
        "operationId": "ManageRegisterPlatformWithOfflineLicense",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "license"
                ],
                "properties": {
                  "license": {
                    "type": "string",
                    "format": "byte",
                    "description": "Offline license"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "registered_to",
                    "expires_at"
                  ],
                  "properties": {
                    "registered_to": {
                      "type": "string",
                      "description": "Name the offline license is registered to"
                    },
                    "expires_at": {
                      "type": "string",
                      "description": "Timestamp of the offline license expiration",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "admin"
        ]
      }
    },
    "/manage/settings": {
      "get": {
        "description": "Show current platform settings",
        "operationId": "GetSettings",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformSettings"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "admin"
        ]
      },
      "patch": {
        "description": "Update platform settings",
        "operationId": "UpdateSettings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformSettingsUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformSettings"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "admin"
        ]
      }
    },
    "/manage/teams": {
      "get": {
        "description": "List all teams",
        "operationId": "ManageListAllTeams",
        "parameters": [
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/Team"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "teams",
          "admin"
        ]
      }
    },
    "/manage/teams/{team_name}": {
      "get": {
        "description": "Get a team",
        "operationId": "ManageGetTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "teams",
          "admin"
        ]
      },
      "delete": {
        "description": "Delete a team",
        "operationId": "ManageDeleteTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "teams",
          "admin"
        ]
      }
    },
    "/manage/teams/{team_name}/members": {
      "get": {
        "description": "List team members",
        "operationId": "ManageListTeamMembers",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/MembershipWithUser"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "teams",
          "admin"
        ]
      },
      "put": {
        "description": "Add team member",
        "operationId": "ManageAddTeamMember",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "user_id",
                  "roles"
                ],
                "properties": {
                  "user_id": {
                    "description": "ID of the User",
                    "type": "string",
                    "format": "uuid",
                    "example": "12345678-1234-1234-1234-1234567890ab",
                    "x-go-name": "UserID"
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "admin:write",
                        "admin:read",
                        "general:read",
                        "general:write"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "teams",
          "admin"
        ]
      },
      "delete": {
        "description": "Remove team member",
        "operationId": "ManageRemoveTeamMember",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "user_id"
                ],
                "properties": {
                  "user_id": {
                    "description": "ID of the User",
                    "type": "string",
                    "format": "uuid",
                    "example": "12345678-1234-1234-1234-1234567890ab",
                    "x-go-name": "UserID"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "teams",
          "admin"
        ]
      }
    },
    "/manage/users": {
      "get": {
        "description": "List all users",
        "operationId": "ListLocalUsers",
        "parameters": [
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/LocalUser"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "users",
          "admin"
        ]
      }
    },
    "/manage/users/add": {
      "post": {
        "description": "Add new user",
        "operationId": "AddLocalUser",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "email",
                  "name",
                  "roles"
                ],
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "roles": {
                    "description": "Global roles for the user",
                    "type": "array",
                    "minItems": 0,
                    "items": {
                      "type": "string",
                      "enum": [
                        "admin:write",
                        "admin:read"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocalUser"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "405": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "users",
          "admin"
        ]
      }
    },
    "/manage/users/{user_id}": {
      "get": {
        "description": "Get user details",
        "operationId": "GetLocalUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/user_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocalUserWithTeams"
                }
              }
            },
            "description": "Response"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "users",
          "admin"
        ]
      },
      "patch": {
        "description": "Update user",
        "operationId": "UpdateLocalUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/user_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "roles": {
                    "description": "Global roles for the user",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "admin:write",
                        "admin:read"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocalUser"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "users",
          "admin"
        ]
      },
      "delete": {
        "description": "Delete user",
        "operationId": "DeleteLocalUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/user_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "users",
          "admin"
        ]
      }
    },
    "/manage/users/{user_id}/reset": {
      "post": {
        "description": "Create password reset token for user",
        "operationId": "CreateLocalUserResetToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/user_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "reset_token"
                  ],
                  "properties": {
                    "reset_token": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Response"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "users",
          "admin"
        ]
      }
    },
    "/manage/users/{user_id}/totp": {
      "delete": {
        "description": "Disable/Reset MFA for a specific user",
        "operationId": "ManageUserTOTPDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/user_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "405": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/platform-info": {
      "get": {
        "description": "Information about the platform",
        "operationId": "GetPlatformInfo",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "public_ips": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "description": "Response"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "platform"
        ]
      }
    },
    "/platform-versions": {
      "get": {
        "description": "List platform versions",
        "operationId": "ListPlatformVersions",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PlatformVersion"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            },
            "description": "Response"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "platform"
        ]
      }
    },
    "/plugins": {
      "get": {
        "description": "List all plugins",
        "operationId": "ListPlugins",
        "parameters": [
          {
            "$ref": "#/components/parameters/plugin_sort_by"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/plugin_include_release_stages"
          },
          {
            "$ref": "#/components/parameters/plugin_exclude_release_stages"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "$ref": "#/components/schemas/ListPlugins"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            },
            "description": "Response"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "security": [],
        "tags": [
          "plugins"
        ]
      },
      "post": {
        "description": "Create a plugin owned by the specified team. User must be part of that team.",
        "operationId": "CreatePlugin",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PluginCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "plugins"
        ]
      }
    },
    "/plugins/{team_name}/{plugin_kind}/{plugin_name}": {
      "get": {
        "description": "Get details about a given plugin.",
        "operationId": "GetPlugin",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/plugin_kind"
          },
          {
            "$ref": "#/components/parameters/plugin_name"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPlugin"
                }
              }
            },
            "description": "Response"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "security": [],
        "tags": [
          "plugins"
        ]
      },
      "patch": {
        "description": "Update a plugin",
        "operationId": "UpdatePlugin",
        "tags": [
          "plugins"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/plugin_kind"
          },
          {
            "$ref": "#/components/parameters/plugin_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PluginUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "description": "Delete plugin by team and plugin name",
        "operationId": "DeletePluginByTeamAndPluginName",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/plugin_kind"
          },
          {
            "$ref": "#/components/parameters/plugin_name"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "plugins"
        ]
      }
    },
    "/plugins/{team_name}/{plugin_kind}/{plugin_name}/versions": {
      "get": {
        "description": "List all versions for a given plugin",
        "operationId": "ListPluginVersions",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/plugin_kind"
          },
          {
            "$ref": "#/components/parameters/plugin_name"
          },
          {
            "$ref": "#/components/parameters/version_sort_by"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/include_drafts"
          },
          {
            "$ref": "#/components/parameters/include_prereleases"
          },
          {
            "$ref": "#/components/parameters/version_filter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/PluginVersionList"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            },
            "description": "Response"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "security": [],
        "tags": [
          "plugins"
        ]
      }
    },
    "/plugins/{team_name}/{plugin_kind}/{plugin_name}/versions/{version_name}": {
      "get": {
        "description": "Get details about a given plugin version.",
        "operationId": "GetPluginVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/plugin_kind"
          },
          {
            "$ref": "#/components/parameters/plugin_name"
          },
          {
            "$ref": "#/components/parameters/version_name"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginVersionDetails"
                }
              }
            },
            "description": "Response"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "security": [],
        "tags": [
          "plugins"
        ]
      },
      "put": {
        "description": "Create a new plugin version, or update a draft version",
        "operationId": "CreatePluginVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/plugin_kind"
          },
          {
            "$ref": "#/components/parameters/plugin_name"
          },
          {
            "$ref": "#/components/parameters/version_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "message",
                  "protocols",
                  "supported_targets",
                  "package_type",
                  "checksums"
                ],
                "properties": {
                  "message": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 30000,
                    "description": "A message describing what's new or changed in this version.\nThis message will be displayed to users in the plugin's changelog.\nSupports limited markdown syntax.\n"
                  },
                  "protocols": {
                    "$ref": "#/components/schemas/PluginProtocols"
                  },
                  "supported_targets": {
                    "type": "array",
                    "description": "The targets supported by this plugin version, formatted as <os>_<arch>",
                    "example": [
                      "linux_arm64",
                      "darwin_amd64",
                      "windows_amd64"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "checksums": {
                    "type": "array",
                    "description": "List of SHA-256 checksums for this plugin version, one for each supported target.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "package_type": {
                    "$ref": "#/components/schemas/PluginPackageType"
                  },
                  "spec_json_schema": {
                    "$ref": "#/components/schemas/PluginSpecJSONSchema"
                  },
                  "ui_id": {
                    "type": "string",
                    "format": "uuid",
                    "x-go-name": "UIID"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success (the plugin version was updated)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginVersion"
                }
              }
            }
          },
          "201": {
            "description": "Success (the plugin version was created)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginVersion"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "plugins"
        ]
      },
      "patch": {
        "description": "Update a given plugin version",
        "operationId": "UpdatePluginVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/plugin_kind"
          },
          {
            "$ref": "#/components/parameters/plugin_name"
          },
          {
            "$ref": "#/components/parameters/version_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PluginVersionUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginVersion"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "plugins"
        ]
      }
    },
    "/plugins/{team_name}/{plugin_kind}/{plugin_name}/versions/{version_name}/assets/{target_name}": {
      "get": {
        "description": "Download an asset for a given plugin version and target",
        "operationId": "DownloadPluginAsset",
        "parameters": [
          {
            "in": "header",
            "name": "Accept",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/plugin_kind"
          },
          {
            "$ref": "#/components/parameters/plugin_name"
          },
          {
            "$ref": "#/components/parameters/version_name"
          },
          {
            "$ref": "#/components/parameters/target_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginAsset"
                }
              }
            }
          },
          "302": {
            "description": "Response",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "security": [],
        "tags": [
          "plugins"
        ]
      },
      "post": {
        "description": "Get a URL to upload an asset for a given plugin version and target",
        "operationId": "UploadPluginAsset",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/plugin_kind"
          },
          {
            "$ref": "#/components/parameters/plugin_name"
          },
          {
            "$ref": "#/components/parameters/version_name"
          },
          {
            "$ref": "#/components/parameters/target_name"
          }
        ],
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseURL"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "plugins"
        ]
      }
    },
    "/plugins/{team_name}/{plugin_kind}/{plugin_name}/versions/{version_name}/docs": {
      "get": {
        "description": "List all documentation pages for a given plugin version",
        "operationId": "ListPluginVersionDocs",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/plugin_kind"
          },
          {
            "$ref": "#/components/parameters/plugin_name"
          },
          {
            "$ref": "#/components/parameters/version_name"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/PluginDocsPage"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            },
            "description": "Response"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "security": [],
        "tags": [
          "plugins"
        ]
      },
      "put": {
        "description": "Create or update one or more plugin version docs pages",
        "operationId": "CreatePluginVersionDocs",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/plugin_kind"
          },
          {
            "$ref": "#/components/parameters/plugin_name"
          },
          {
            "$ref": "#/components/parameters/version_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "pages"
                ],
                "properties": {
                  "pages": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PluginDocsPageCreate"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created or updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "names": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PluginDocsPageName"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "plugins"
        ]
      },
      "post": {
        "description": "Replace (override) multiple plugin version docs pages",
        "operationId": "ReplacePluginVersionDocs",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/plugin_kind"
          },
          {
            "$ref": "#/components/parameters/plugin_name"
          },
          {
            "$ref": "#/components/parameters/version_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "pages"
                ],
                "properties": {
                  "pages": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PluginDocsPageCreate"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created or updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "names": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PluginDocsPageName"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "plugins"
        ]
      },
      "delete": {
        "description": "Delete one or more plugin version docs pages.",
        "operationId": "DeletePluginVersionDocs",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/plugin_kind"
          },
          {
            "$ref": "#/components/parameters/plugin_name"
          },
          {
            "$ref": "#/components/parameters/version_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "names"
                ],
                "properties": {
                  "names": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PluginDocsPageName"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The resource was deleted successfully."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "plugins"
        ]
      }
    },
    "/plugins/{team_name}/{plugin_kind}/{plugin_name}/versions/{version_name}/tables": {
      "get": {
        "description": "List tables for a given plugin version. This only applies to source plugins.",
        "operationId": "ListPluginVersionTables",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/plugin_kind"
          },
          {
            "$ref": "#/components/parameters/plugin_name"
          },
          {
            "$ref": "#/components/parameters/version_name"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/PluginTable"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            },
            "description": "Response"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "security": [],
        "tags": [
          "plugins"
        ]
      },
      "put": {
        "description": "Create or update one or more plugin version tables. This only applies to source plugins, and can only be done if the plugin version is in draft.",
        "operationId": "CreatePluginVersionTables",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/plugin_kind"
          },
          {
            "$ref": "#/components/parameters/plugin_name"
          },
          {
            "$ref": "#/components/parameters/version_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "tables"
                ],
                "properties": {
                  "tables": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PluginTableCreate"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created or updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "names": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PluginTableName"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "plugins"
        ]
      },
      "delete": {
        "description": "Delete one or more plugin version tables.",
        "operationId": "DeletePluginVersionTables",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/plugin_kind"
          },
          {
            "$ref": "#/components/parameters/plugin_name"
          },
          {
            "$ref": "#/components/parameters/version_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "names"
                ],
                "properties": {
                  "names": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PluginTableName"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The resource was deleted successfully."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "plugins"
        ]
      }
    },
    "/plugins/{team_name}/{plugin_kind}/{plugin_name}/versions/{version_name}/tables/{table_name}": {
      "get": {
        "description": "Get schema for a given table and plugin version. This only applies to source plugins.",
        "operationId": "GetPluginVersionTable",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/plugin_kind"
          },
          {
            "$ref": "#/components/parameters/plugin_name"
          },
          {
            "$ref": "#/components/parameters/version_name"
          },
          {
            "in": "path",
            "name": "table_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginTableDetails"
                }
              }
            },
            "description": "Response"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "security": [],
        "tags": [
          "plugins"
        ]
      }
    },
    "/plugins/{team_name}/{plugin_kind}/{plugin_name}/versions/{version_name}/uiassets": {
      "post": {
        "description": "Get URLs to upload UI assets for a given plugin version",
        "operationId": "UploadPluginUIAssets",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/plugin_kind"
          },
          {
            "$ref": "#/components/parameters/plugin_name"
          },
          {
            "$ref": "#/components/parameters/version_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "ui_id": {
                    "type": "string",
                    "format": "uuid",
                    "x-go-name": "UIID"
                  },
                  "assets": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PluginUIAssetUploadRequest"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "ui_id",
                    "assets"
                  ],
                  "properties": {
                    "ui_id": {
                      "type": "string",
                      "description": "ID representing this upload",
                      "x-go-name": "UIID"
                    },
                    "assets": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PluginUIAsset"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "plugins"
        ]
      },
      "put": {
        "description": "Finalize UI asset upload",
        "operationId": "FinalizePluginUIAssetUpload",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/plugin_kind"
          },
          {
            "$ref": "#/components/parameters/plugin_name"
          },
          {
            "$ref": "#/components/parameters/version_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "ui_id"
                ],
                "properties": {
                  "ui_id": {
                    "type": "string",
                    "description": "ID representing the finished upload",
                    "x-go-name": "UIID"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Response"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "plugins"
        ]
      },
      "delete": {
        "description": "Remove UI assets for a given plugin version",
        "operationId": "RemovePluginUIAssets",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/plugin_kind"
          },
          {
            "$ref": "#/components/parameters/plugin_name"
          },
          {
            "$ref": "#/components/parameters/version_name"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "plugins"
        ]
      }
    },
    "/tables": {
      "get": {
        "description": "List Tables",
        "operationId": "ListTables",
        "parameters": [
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TableListItem"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "tables"
        ]
      }
    },
    "/tables/{table_name}/data": {
      "get": {
        "description": "List Table Rows",
        "operationId": "TableListRows",
        "parameters": [
          {
            "$ref": "#/components/parameters/table_name"
          },
          {
            "$ref": "#/components/parameters/table_selects"
          },
          {
            "$ref": "#/components/parameters/table_filter_mode"
          },
          {
            "$ref": "#/components/parameters/table_filters"
          },
          {
            "$ref": "#/components/parameters/table_filter_ids"
          },
          {
            "$ref": "#/components/parameters/table_sort_bys"
          },
          {
            "$ref": "#/components/parameters/table_sort_dirs"
          },
          {
            "$ref": "#/components/parameters/table_group_bys"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data",
                    "metadata"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TableData"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "tables"
        ]
      }
    },
    "/tables/{table_name}/data/{table_row_id}": {
      "get": {
        "description": "Get Table row",
        "operationId": "TableRowById",
        "parameters": [
          {
            "$ref": "#/components/parameters/table_name"
          },
          {
            "$ref": "#/components/parameters/table_row_id"
          },
          {
            "$ref": "#/components/parameters/table_filter_mode"
          },
          {
            "$ref": "#/components/parameters/table_filters"
          },
          {
            "$ref": "#/components/parameters/table_filter_ids"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data",
                    "matches"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TableRow"
                    },
                    "matches": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TableRowFieldMatch"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "tables"
        ]
      }
    },
    "/tables/{table_name}/schema": {
      "get": {
        "description": "Get Table Schema",
        "operationId": "TableSchema",
        "parameters": [
          {
            "$ref": "#/components/parameters/table_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "schema",
                    "default_columns"
                  ],
                  "properties": {
                    "schema": {
                      "$ref": "#/components/schemas/TableSchema"
                    },
                    "default_columns": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Column name"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "tables"
        ]
      }
    },
    "/tables/schemas": {
      "get": {
        "description": "Get Table Schemas",
        "operationId": "BatchTableSchemas",
        "parameters": [
          {
            "name": "tables",
            "in": "query",
            "description": "A list of table names to retrieve schemas for",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1
              },
              "example": [
                "aws_ec2_instances",
                "aws_s3_buckets"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BatchTableSchemaItem"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "tables"
        ]
      }
    },
    "/tables/{table_name}/columns": {
      "get": {
        "description": "Get Table Columns",
        "operationId": "TableListColumns",
        "parameters": [
          {
            "$ref": "#/components/parameters/table_name"
          },
          {
            "$ref": "#/components/parameters/table_filter_mode"
          },
          {
            "$ref": "#/components/parameters/table_column_name_filter"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TableColumnListItem"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "tables"
        ]
      }
    },
    "/tables/{table_name}/columns/{column_name}/values": {
      "get": {
        "description": "Get Table Column Values",
        "operationId": "TableColumnListValues",
        "parameters": [
          {
            "$ref": "#/components/parameters/table_name"
          },
          {
            "$ref": "#/components/parameters/column_name"
          },
          {
            "$ref": "#/components/parameters/table_filter_mode"
          },
          {
            "$ref": "#/components/parameters/table_column_value_filter"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TableColumnValueListItem"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "tables"
        ]
      }
    },
    "/tables/{table_name}/filters": {
      "get": {
        "description": "List Table Filters",
        "operationId": "TableListFilters",
        "parameters": [
          {
            "$ref": "#/components/parameters/table_name"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/filter_tags"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Filter"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "tables",
          "filters"
        ]
      },
      "post": {
        "description": "Save Table Filter",
        "operationId": "TableSaveFilter",
        "parameters": [
          {
            "$ref": "#/components/parameters/table_name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Filter already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            }
          },
          "201": {
            "description": "Filter created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "tables",
          "filters"
        ]
      }
    },
    "/tables/{table_name}/filters/tags": {
      "get": {
        "description": "List Filter Tags For A Table",
        "operationId": "TableListFilterTags",
        "parameters": [
          {
            "$ref": "#/components/parameters/table_name"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FilterTag"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "queries",
          "filters"
        ]
      }
    },
    "/tables/{table_name}/relations": {
      "get": {
        "description": "List Table Relations",
        "operationId": "TableListRelations",
        "parameters": [
          {
            "$ref": "#/components/parameters/table_name"
          },
          {
            "name": "relation_name",
            "description": "Filter by related table name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TableRelation"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "tables"
        ]
      }
    },
    "/teams": {
      "get": {
        "description": "List all teams",
        "operationId": "ListTeams",
        "parameters": [
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/Team"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "teams"
        ]
      },
      "post": {
        "description": "Create a team owned by the current user.",
        "operationId": "CreateTeam",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "name",
                  "display_name"
                ],
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/TeamName"
                  },
                  "display_name": {
                    "type": "string",
                    "description": "The team's display name",
                    "minLength": 1,
                    "maxLength": 255
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/teams/{team_name}": {
      "get": {
        "description": "Get a team by name",
        "operationId": "GetTeamByName",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "teams"
        ]
      },
      "patch": {
        "description": "Update team attributes",
        "operationId": "UpdateTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "display_name": {
                    "type": "string",
                    "description": "The team's display name"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "teams"
        ]
      },
      "delete": {
        "description": "Delete team",
        "operationId": "DeleteTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          }
        ],
        "x-internal": true,
        "responses": {
          "204": {
            "description": "Response"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/teams/{team_name}/alerts": {
      "get": {
        "description": "List all alerts",
        "operationId": "ListAllAlerts",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/alert_states"
          },
          {
            "$ref": "#/components/parameters/enabled"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/AlertDetail"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "alerts"
        ]
      }
    },
    "/teams/{team_name}/alerts/test": {
      "post": {
        "description": "Test an unsaved alert",
        "operationId": "TestUnsavedAlert",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "in": "query",
            "name": "query_id",
            "required": false,
            "description": "ID of the query to fill in the alert",
            "schema": {
              "$ref": "#/components/schemas/QueryID"
            },
            "x-go-name": "QueryID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "results"
                  ],
                  "properties": {
                    "results": {
                      "type": "array",
                      "description": "Notification results for the test alert",
                      "items": {
                        "$ref": "#/components/schemas/AlertTestResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "alerts"
        ]
      }
    },
    "/teams/{team_name}/apikeys": {
      "get": {
        "description": "List all team API Keys",
        "operationId": "ListTeamAPIKeys",
        "tags": [
          "teams"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata",
                    "allowed_roles"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/APIKey"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    },
                    "allowed_roles": {
                      "description": "List of allowed roles when creating a new API key",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/APIKeyTeamRole"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "description": "Create new team API Key.",
        "operationId": "CreateTeamAPIKey",
        "tags": [
          "teams"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "expires_at",
                  "name"
                ],
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/APIKeyName"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/APIKeyTeamRole"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKey"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/apikeys/{apikey_id}": {
      "delete": {
        "description": "Delete API Key. This will remove any future access by this API Key.",
        "operationId": "DeleteTeamAPIKey",
        "tags": [
          "teams"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/apikey_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/connectors": {
      "get": {
        "description": "List all configured connectors",
        "operationId": "ListConnectors",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "in": "query",
            "name": "filter_type",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter connectors by a given type."
          },
          {
            "in": "query",
            "name": "filter_plugin",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter connectors by a given plugin reference. Mutually exclusive with `type`.",
            "example": "cloudquery/source/googleanalytics"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/Connector"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "description": "Create new connector",
        "operationId": "CreateConnector",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connector"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/connectors/{connector_id}": {
      "get": {
        "description": "Get a configured connector",
        "operationId": "GetConnector",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/connector_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connector"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "patch": {
        "description": "Update a connector",
        "operationId": "UpdateConnector",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/connector_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connector"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/connectors/{connector_id}/authenticate": {
      "delete": {
        "description": "Revoke authentication for a given connector. Any syncs relying on this connector will stop running until the connector is reauthenticated or sync references are updated.",
        "operationId": "RevokeConnector",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/connector_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/connectors/{connector_id}/authenticate/aws": {
      "get": {
        "description": "Get authentication status for the given AWS connector",
        "operationId": "GetConnectorAuthStatusAWS",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/connector_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "role_arn": {
                      "type": "string",
                      "description": "ARN of role created by the user",
                      "x-go-name": "RoleARN"
                    },
                    "external_id": {
                      "type": "string",
                      "description": "External ID used for the role",
                      "x-go-name": "ExternalID"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "description": "Authenticate or reauthenticate the given AWS connector",
        "operationId": "AuthenticateConnectorAWS",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/connector_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorAuthRequestAWS"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorAuthResponseAWS"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "patch": {
        "description": "Complete authentication for the given AWS connector",
        "operationId": "AuthenticateConnectorFinishAWS",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/connector_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorAuthFinishRequestAWS"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Authentication is complete."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/connectors/{connector_id}/authenticate/gcp": {
      "get": {
        "description": "Get authentication status for the given GCP connector",
        "operationId": "GetConnectorAuthStatusGCP",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/connector_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "service_account": {
                      "type": "string",
                      "description": "CloudQuery GCP Service Account to grant access to"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "description": "Authenticate or reauthenticate the given GCP connector",
        "operationId": "AuthenticateConnectorGCP",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/connector_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorAuthRequestGCP"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorAuthResponseGCP"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/connectors/{connector_id}/authenticate/gcp/finish": {
      "post": {
        "description": "Complete authentication for the given GCP connector",
        "operationId": "AuthenticateConnectorFinishGCP",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/connector_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Authentication is complete."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/connectors/{connector_id}/authenticate/oauth": {
      "post": {
        "description": "Authenticate or reauthenticate the given OAuth connector",
        "operationId": "AuthenticateConnectorOAuth",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/connector_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorAuthRequestOAuth"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorAuthResponseOAuth"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "patch": {
        "description": "Complete authentication for the given OAuth connector",
        "operationId": "AuthenticateConnectorFinishOAuth",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/connector_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorAuthFinishRequestOAuth"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "First part of authentication is complete, follow redirect to continue",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorAuthResponseOAuth"
                }
              }
            }
          },
          "204": {
            "description": "Authentication is complete."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/custom-columns": {
      "get": {
        "description": "List all custom columns",
        "operationId": "ListAllCustomColumns",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/custom_columns_sort_bys"
          },
          {
            "$ref": "#/components/parameters/custom_columns_sort_dirs"
          },
          {
            "name": "table",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter columns by table name."
          },
          {
            "name": "search_term",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter columns by name, label, or description."
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/CustomColumn"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "custom-columns"
        ]
      },
      "post": {
        "description": "Save a custom column",
        "operationId": "SaveCustomColumn",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomColumnCreateOrUpdate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomColumn"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "custom-columns"
        ]
      }
    },
    "/teams/{team_name}/custom-columns/{custom_column_id}": {
      "get": {
        "description": "Get a custom column",
        "operationId": "GetCustomColumn",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/custom_column_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomColumn"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "custom-columns"
        ]
      },
      "patch": {
        "description": "Update a custom column",
        "operationId": "UpdateCustomColumn",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/custom_column_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomColumnCreateOrUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomColumn"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "custom-columns"
        ]
      },
      "delete": {
        "description": "Delete a custom column",
        "operationId": "DeleteCustomColumn",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/custom_column_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "custom-columns"
        ]
      }
    },
    "/teams/{team_name}/custom-columns/{custom_column_id}/import": {
      "put": {
        "description": "Import data into a Custom Column",
        "operationId": "PutCustomColumnData",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/custom_column_id"
          }
        ],
        "tags": [
          "custom-columns"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomColumnDataImport"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted import",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/CustomColumnDataImportAccepted"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/teams/{team_name}/custom-columns/{custom_column_id}/values": {
      "put": {
        "description": "Edit values within a Custom Column",
        "operationId": "PutCustomColumnValues",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/custom_column_id"
          }
        ],
        "tags": [
          "custom-columns"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomColumnDataValues"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted values",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        }
      }
    },
    "/teams/{team_name}/filters": {
      "get": {
        "description": "List Filters",
        "operationId": "ListFiltersTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/filter_tags"
          },
          {
            "$ref": "#/components/parameters/filter_name_filter"
          },
          {
            "$ref": "#/components/parameters/filter_expression_filter"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Filter"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "filters"
        ]
      }
    },
    "/teams/{team_name}/filters/tags": {
      "get": {
        "description": "List Filter Tags",
        "operationId": "ListFilterTagsTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FilterTag"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "filters"
        ]
      }
    },
    "/teams/{team_name}/filters/{filter_id}": {
      "get": {
        "description": "Get a table filter by ID",
        "operationId": "GetFilterByIDTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/filter_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "filters"
        ]
      },
      "patch": {
        "description": "Update a table filter",
        "operationId": "UpdateFilterTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/filter_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "filters"
        ]
      },
      "delete": {
        "description": "Delete a table filter",
        "operationId": "DeleteFilterTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/filter_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "filters"
        ]
      }
    },
    "/teams/{team_name}/images": {
      "post": {
        "description": "Get URLs to upload images for a given team",
        "operationId": "CreateTeamImages",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "images"
                ],
                "properties": {
                  "images": {
                    "items": {
                      "$ref": "#/components/schemas/TeamImageCreate"
                    },
                    "type": "array",
                    "minItems": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/TeamImage"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/teams/{team_name}/invitations": {
      "get": {
        "operationId": "ListTeamInvitations",
        "description": "List of open invitations to the team",
        "tags": [
          "teams"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Invitation"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "operationId": "DeleteTeamInvitation",
        "description": "Delete an invitation to the team, preventing the user becoming a team member",
        "tags": [
          "teams"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Response"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/invitations/accept": {
      "post": {
        "operationId": "AcceptTeamInvitation",
        "description": "Accept an invitation to the team, creating a user membership",
        "tags": [
          "teams"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The invitation has been accepted and the authenticated user is now a member of the team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MembershipWithTeam"
                }
              }
            }
          },
          "303": {
            "description": "The authenticated user is already a member of this team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MembershipWithTeam"
                }
              }
            }
          },
          "403": {
            "description": "You do not have an invitation to join this team.",
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/memberships": {
      "get": {
        "description": "Get memberships to the team.",
        "operationId": "GetTeamMemberships",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/MembershipWithUser"
                      },
                      "type": "array",
                      "example": [
                        {
                          "roles": [
                            "admin:write"
                          ],
                          "user": {
                            "created_at": "2017-07-14T16:53:42Z",
                            "email": "user@example.com",
                            "id": "12345678-1234-1234-1234-1234567890ab",
                            "name": "Sarah O'Connor",
                            "updated_at": "2017-07-14T16:53:42Z"
                          }
                        }
                      ]
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            },
            "description": "Response"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "teams"
        ]
      },
      "delete": {
        "description": "Remove a user from the team",
        "operationId": "RemoveTeamMembership",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Response"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/teams/{team_name}/memberships/{email}": {
      "delete": {
        "deprecated": true,
        "description": "Remove a user from the team",
        "operationId": "DeleteTeamMembership",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/email_basic"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/teams/{team_name}/notifications/destinations": {
      "get": {
        "description": "List all notification destinations",
        "operationId": "ListAllNotificationDestinations",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/NotificationDestinationListItem"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "alerts"
        ]
      },
      "post": {
        "description": "Create notification destination",
        "operationId": "CreateNotificationDestination",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationDestinationCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationDestination"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "alerts"
        ]
      }
    },
    "/teams/{team_name}/notifications/destinations/test": {
      "post": {
        "description": "Test an unsaved notification destination",
        "operationId": "TestUnsavedNotificationDestination",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationDestinationData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationDestinationTestResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "alerts"
        ]
      }
    },
    "/teams/{team_name}/notifications/destination/{notification_destination_id}": {
      "get": {
        "description": "Get notification destination",
        "operationId": "GetNotificationDestination",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/notification_destination_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationDestination"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "alerts"
        ]
      },
      "patch": {
        "description": "Update a notification destination",
        "operationId": "UpdateNotificationDestination",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/notification_destination_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationDestinationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationDestination"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "alerts"
        ]
      },
      "delete": {
        "description": "Delete a notification destination",
        "operationId": "DeleteNotificationDestination",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/notification_destination_id"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "alerts"
        ]
      }
    },
    "/teams/{team_name}/notifications/destination/{notification_destination_id}/alerts": {
      "get": {
        "description": "Get notification destination alerts",
        "operationId": "GetNotificationDestinationAlerts",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/notification_destination_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/AlertDetail"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "alerts"
        ]
      }
    },
    "/teams/{team_name}/notifications/destination/{notification_destination_id}/test": {
      "post": {
        "description": "Test a notification destination",
        "operationId": "TestNotificationDestination",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/notification_destination_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationDestinationTestResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "alerts"
        ]
      }
    },
    "/teams/{team_name}/onboardings/aws/oidc": {
      "post": {
        "operationId": "CreateAWSOnboarding",
        "description": "Create an interactive onboarding for AWS",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          }
        ],
        "tags": [
          "teams"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "single_account"
                ],
                "properties": {
                  "single_account": {
                    "type": "boolean",
                    "description": "Specifies the type of onboarding to create: either a single account onboarding or an organization onboarding\n"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingAWSCreateResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/onboardings/aws/oidc/{onboarding_id}": {
      "get": {
        "operationId": "GetAWSOnboarding",
        "description": "Query an interactive onboarding for AWS",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/onboarding_id"
          }
        ],
        "tags": [
          "teams"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingAWS"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/onboardings/aws/oidc/{onboarding_id}/notify": {
      "post": {
        "operationId": "NotifyOnboarding",
        "description": "Update onboarding state",
        "tags": [
          "teams"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/onboarding_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnboardingAWSNotification"
              }
            }
          }
        },
        "responses": {
          "202": {},
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/onboardings/aws/oidc/{onboarding_id}/accounts": {
      "get": {
        "operationId": "GetAWSAccountsInRoot",
        "description": "Query AWS accounts under organization root",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/onboarding_id"
          }
        ],
        "tags": [
          "teams"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingAWSAccounts"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/onboardings/aws/oidc/{onboarding_id}/accounts/{aws_orgunit_id}": {
      "get": {
        "operationId": "GetAWSAccountsInParent",
        "description": "Query AWS accounts under a specifc Organizational Unit",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/onboarding_id"
          },
          {
            "$ref": "#/components/parameters/aws_orgunit_id"
          }
        ],
        "tags": [
          "teams"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingAWSAccounts"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/onboardings/aws/oidc/{onboarding_id}/accounts/provision": {
      "post": {
        "operationId": "ProvisionOnboardingConfiguration",
        "description": "Provision onboarding configuration into the cloud account",
        "tags": [
          "teams"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/onboarding_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnboardingAWSProvision"
              }
            }
          }
        },
        "responses": {
          "202": {},
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/plugins": {
      "get": {
        "description": "List all plugins for the team.",
        "operationId": "ListPluginsByTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/include_private"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/Plugin"
                      },
                      "type": "array",
                      "example": [
                        {
                          "name": "aws-source",
                          "kind": "source",
                          "team_name": "cloudquery",
                          "display_name": "AWS Source Plugin",
                          "category": "cloud-infrastructure",
                          "created_at": "2017-07-14T16:53:42Z",
                          "updated_at": "2017-07-14T16:53:42Z",
                          "homepage": "https://cloudquery.io",
                          "logo": "https://storage.googleapis.com/cq-cloud-images/9ac4cb31-e971-4879-8619-87dc22b0f98e",
                          "official": true,
                          "short_description": "Sync data from AWS to any destination",
                          "repository": "https://github.com/cloudquery/cloudquery",
                          "tier": "paid",
                          "usd_per_row": "0.00123",
                          "free_rows_per_month": 10000,
                          "release_stage": "preview"
                        }
                      ]
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "plugins"
        ]
      },
      "delete": {
        "description": "Delete plugins by team",
        "operationId": "DeletePluginsByTeam",
        "x-internal": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/teams/{team_name}/plugins/{plugin_team}/{plugin_kind}/{plugin_name}/versions/{version_name}/assets/{target_name}": {
      "get": {
        "description": "Download an asset for a given plugin version as the current team.",
        "operationId": "DownloadPluginAssetByTeam",
        "parameters": [
          {
            "in": "header",
            "name": "Accept",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/plugin_team"
          },
          {
            "$ref": "#/components/parameters/plugin_kind"
          },
          {
            "$ref": "#/components/parameters/plugin_name"
          },
          {
            "$ref": "#/components/parameters/version_name"
          },
          {
            "$ref": "#/components/parameters/target_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginAsset"
                }
              }
            }
          },
          "302": {
            "description": "Response",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "plugins"
        ]
      }
    },
    "/teams/{team_name}/policies": {
      "get": {
        "operationId": "ListPolicies",
        "description": "List Policies",
        "tags": [
          "policies"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "name": "search_term",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter policies by name."
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/platform_policies_sort_bys"
          },
          {
            "$ref": "#/components/parameters/platform_policies_sort_dirs"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "DEPRECATED! Sorting order."
          }
        ],
        "responses": {
          "200": {
            "description": "List of policies.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "policies",
                    "metadata"
                  ],
                  "properties": {
                    "policies": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PlatformPolicy"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "description": "Create Policy",
        "operationId": "CreatePolicy",
        "tags": [
          "policies"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformCreateOrUpdatePolicy"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created policy.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PlatformPolicy"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/teams/{team_name}/policies/frameworks": {
      "get": {
        "description": "List All Frameworks",
        "operationId": "ListAllFrameworks",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "tags": [
          "policies"
        ],
        "responses": {
          "200": {
            "description": "List of all frameworks.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "frameworks",
                    "metadata"
                  ],
                  "properties": {
                    "frameworks": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PlatformPolicyFramework"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/teams/{team_name}/policies/{policy_id}": {
      "get": {
        "description": "Get Policy",
        "operationId": "GetPolicy",
        "tags": [
          "policies"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "name": "policy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the policy."
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved policy.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PlatformPolicy"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "description": "Update Policy",
        "operationId": "UpdatePolicy",
        "tags": [
          "policies"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "name": "policy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the policy."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformCreateOrUpdatePolicy"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated policy.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PlatformPolicy"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "description": "Delete Policy",
        "operationId": "DeletePolicy",
        "tags": [
          "policies"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "name": "policy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the policy."
          }
        ],
        "responses": {
          "204": {
            "description": "Policy deleted."
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/teams/{team_name}/policies/{policy_id}/frameworks": {
      "get": {
        "description": "List Policy Frameworks",
        "operationId": "ListPolicyFrameworks",
        "tags": [
          "policies"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "name": "policy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the policy."
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/platform_policy_frameworks_sort_bys"
          },
          {
            "$ref": "#/components/parameters/platform_policies_sort_dirs"
          },
          {
            "name": "search_term",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter rules by name."
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "DEPRECATED! Sorting order."
          }
        ],
        "responses": {
          "200": {
            "description": "List of policy frameworks.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "frameworks",
                    "metadata"
                  ],
                  "properties": {
                    "frameworks": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PlatformPolicyFramework"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/teams/{team_name}/policies/{policy_id}/rules": {
      "get": {
        "description": "List Policy Rules",
        "operationId": "ListPolicyRules",
        "tags": [
          "policies"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "name": "policy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the policy."
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/platform_policy_rules_sort_bys"
          },
          {
            "$ref": "#/components/parameters/platform_policies_sort_dirs"
          },
          {
            "name": "search_term",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter rules by name."
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Sorting order."
          }
        ],
        "responses": {
          "200": {
            "description": "List of policy rules.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "rules",
                    "metadata"
                  ],
                  "properties": {
                    "rules": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PlatformPolicyRule"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/teams/{team_name}/policies/{policy_id}/rules/{rule_id}/details": {
      "get": {
        "description": "List Policy Rule Details",
        "operationId": "ListPolicyRuleDetails",
        "tags": [
          "policies"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "name": "policy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the policy."
          },
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the rule."
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/platform_policy_rule_details_sort_bys"
          },
          {
            "$ref": "#/components/parameters/platform_policies_sort_dirs"
          },
          {
            "name": "search_term",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter rules by name."
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "DEPRECATED! Sorting order."
          }
        ],
        "responses": {
          "200": {
            "description": "List of policy rule details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "details",
                    "metadata"
                  ],
                  "properties": {
                    "details": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PlatformPolicyRuleDetail"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/teams/{team_name}/policies/{policy_id}/toggle": {
      "post": {
        "description": "Toggle Policy status",
        "operationId": "TogglePolicy",
        "tags": [
          "policies"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "name": "policy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the policy."
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "paused",
                "active"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Toggled policy state."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/teams/{team_name}/policies/{policy_id}/violations-history": {
      "get": {
        "description": "Get Policy Violations History for defined period.",
        "operationId": "GetPolicyViolationsHistory",
        "tags": [
          "policies"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "name": "policy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the policy."
          },
          {
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "A valid ISO 8601 date string representing the inclusive start of the period within which to return history entities. Defaults to start of current month if not specified."
          },
          {
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "A valid ISO 8601 date string representing the exclusive end of the period within which to return history entities. Defaults to end of current month if not specified."
          }
        ],
        "responses": {
          "200": {
            "description": "List of policy violation history entities, sorted by descending date. Where no history for a given day, no object will be returned. Where multiple, the max will be returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "details"
                  ],
                  "properties": {
                    "details": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PlatformPolicyViolationHistory"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/teams/{team_name}/queries": {
      "get": {
        "description": "List all queries",
        "operationId": "ListAllQueriesTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/query_tags"
          },
          {
            "$ref": "#/components/parameters/query_name_filter"
          },
          {
            "$ref": "#/components/parameters/query_filter"
          },
          {
            "$ref": "#/components/parameters/alert_configured"
          },
          {
            "$ref": "#/components/parameters/alert_message_filter"
          },
          {
            "$ref": "#/components/parameters/alert_enabled"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/Query"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "queries"
        ]
      }
    },
    "/teams/{team_name}/queries/execute": {
      "post": {
        "description": "Run an ad-hoc SQL query against any table.\nFurther filtering can optionally be applied on top of the raw SQL results using the optional parameters. Filtering can be useful in situations where a saved query needs to be further filtered, grouped or paginated, such as in dashboards or reports.\n",
        "operationId": "ExecuteAdHocQueryTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/table_selects"
          },
          {
            "$ref": "#/components/parameters/table_filter_mode"
          },
          {
            "$ref": "#/components/parameters/table_filters"
          },
          {
            "$ref": "#/components/parameters/table_filter_ids"
          },
          {
            "$ref": "#/components/parameters/table_sort_bys"
          },
          {
            "$ref": "#/components/parameters/table_sort_dirs"
          },
          {
            "$ref": "#/components/parameters/table_group_bys"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "example": "SELECT account_id, instance_id, instance_type, region, name, tags FROM aws_ec2_instance WHERE instance_type = 't2.micro'"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data",
                    "metadata"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TableData"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "queries"
        ]
      }
    },
    "/teams/{team_name}/queries/save": {
      "post": {
        "description": "Save a query to execute later",
        "operationId": "SaveQueryTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDetail"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "queries"
        ]
      }
    },
    "/teams/{team_name}/queries/tags": {
      "get": {
        "description": "List Query Tags",
        "operationId": "ListQueryTagsTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/QueryTag"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "queries"
        ]
      }
    },
    "/teams/{team_name}/queries/{query_id}": {
      "get": {
        "description": "Get a saved query",
        "operationId": "GetSavedQueryTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/query_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDetail"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "queries"
        ]
      },
      "patch": {
        "description": "Update a saved query",
        "operationId": "UpdateQueryTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/query_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDetail"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "queries"
        ]
      },
      "delete": {
        "description": "Delete a saved query",
        "operationId": "DeleteSavedQueryTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/query_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "queries"
        ]
      }
    },
    "/teams/{team_name}/queries/{query_id}/alert": {
      "delete": {
        "description": "Delete alert from saved query",
        "operationId": "DeleteAlert",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/query_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "queries",
          "alerts"
        ]
      }
    },
    "/teams/{team_name}/queries/{query_id}/execute": {
      "post": {
        "description": "Execute a saved query",
        "operationId": "ExecuteSavedQueryTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/query_id"
          },
          {
            "$ref": "#/components/parameters/table_selects"
          },
          {
            "$ref": "#/components/parameters/table_filter_mode"
          },
          {
            "$ref": "#/components/parameters/table_filters"
          },
          {
            "$ref": "#/components/parameters/table_filter_ids"
          },
          {
            "$ref": "#/components/parameters/table_sort_bys"
          },
          {
            "$ref": "#/components/parameters/table_sort_dirs"
          },
          {
            "$ref": "#/components/parameters/table_group_bys"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data",
                    "metadata"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TableData"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "queries"
        ]
      }
    },
    "/teams/{team_name}/queries/{query_id}/filters": {
      "get": {
        "description": "List Query Filters",
        "operationId": "QueryListFiltersTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/query_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/filter_tags"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Filter"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "queries",
          "filters"
        ]
      },
      "post": {
        "description": "Save Query Filter",
        "operationId": "QuerySaveFilterTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/query_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Filter already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            }
          },
          "201": {
            "description": "Filter created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "queries",
          "filters"
        ]
      }
    },
    "/teams/{team_name}/queries/{query_id}/filters/tags": {
      "get": {
        "description": "List Filter Tags For A Saved Query",
        "operationId": "QueryListFilterTagsTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/query_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FilterTag"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "queries",
          "filters"
        ]
      }
    },
    "/teams/{team_name}/reports": {
      "get": {
        "operationId": "ListReports",
        "description": "List reports",
        "tags": [
          "reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "name": "search_term",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter reports by title or description."
          },
          {
            "name": "visibility",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "private",
                "public"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/report_sort_bys"
          },
          {
            "$ref": "#/components/parameters/report_sort_dirs"
          }
        ],
        "responses": {
          "200": {
            "description": "List of reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "reports",
                    "metadata"
                  ],
                  "properties": {
                    "reports": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Report"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "description": "Create Report",
        "operationId": "CreateReport",
        "tags": [
          "reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportCreateOrUpdate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created report.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Report"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/teams/{team_name}/reports/{report_id}": {
      "get": {
        "description": "Get Report",
        "operationId": "GetReport",
        "tags": [
          "reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "name": "report_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the report."
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved report.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Report"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "description": "Update Report",
        "operationId": "UpdateReport",
        "tags": [
          "reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "name": "report_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the report."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportCreateOrUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated report.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Report"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "description": "Delete Report",
        "operationId": "DeleteReport",
        "tags": [
          "reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "name": "report_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the report."
          }
        ],
        "responses": {
          "204": {
            "description": "Report deleted."
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/teams/{team_name}/reports/templates": {
      "get": {
        "operationId": "ListReportTemplates",
        "description": "List report templates",
        "tags": [
          "reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "name": "search_term",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter report templates by name."
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/report_templates_sort_bys"
          },
          {
            "$ref": "#/components/parameters/report_templates_sort_dirs"
          }
        ],
        "responses": {
          "200": {
            "description": "List of report templates.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "templates",
                    "metadata"
                  ],
                  "properties": {
                    "templates": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ReportTemplate"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "description": "Create Report Template",
        "operationId": "CreateReportTemplate",
        "tags": [
          "reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportTemplateCreateOrUpdate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created report template.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ReportTemplate"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/teams/{team_name}/reports/templates/{template_id}": {
      "get": {
        "description": "Get Report Template",
        "operationId": "GetReportTemplate",
        "tags": [
          "reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the report template."
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved report template.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ReportTemplate"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "description": "Update Report Template",
        "operationId": "UpdateReportTemplate",
        "tags": [
          "reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the report template."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportTemplateCreateOrUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated report template.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ReportTemplate"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "description": "Delete Report Template",
        "operationId": "DeleteReportTemplate",
        "tags": [
          "reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the report template."
          }
        ],
        "responses": {
          "204": {
            "description": "Report template deleted."
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/teams/{team_name}/sync-destination-test-connections": {
      "post": {
        "description": "Create a test destination connection.",
        "operationId": "CreateSyncDestinationTestConnection",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncDestinationTestConnectionCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncDestinationTestConnection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-destination-test-connections/{sync_destination_test_connection_id}": {
      "get": {
        "description": "Get a sync destination test connection.",
        "operationId": "GetSyncDestinationTestConnection",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_destination_test_connection_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncDestinationTestConnection"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "patch": {
        "description": "Update a sync destination test connection.",
        "operationId": "UpdateSyncTestConnectionForSyncDestination",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_destination_test_connection_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "$ref": "#/components/schemas/SyncTestConnectionStatus"
                  },
                  "failure_reason": {
                    "type": "string",
                    "description": "Reason for failure",
                    "example": "password authentication failed for user \"exampleuser\""
                  },
                  "failure_code": {
                    "example": "INVALID_CREDENTIALS",
                    "type": "string",
                    "description": "Code for failure"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncDestinationTestConnection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-destination-test-connections/{sync_destination_test_connection_id}/logs": {
      "get": {
        "description": "Deprecated. Get logs for a sync destination test connection.",
        "deprecated": true,
        "operationId": "GetSyncDestinationTestConnectionLogs",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Accept",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_destination_test_connection_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": false,
                  "required": [
                    "location"
                  ],
                  "properties": {
                    "location": {
                      "type": "string",
                      "format": "uri",
                      "description": "The location to download the test connection logs from"
                    }
                  },
                  "title": "Test Connection Logs",
                  "type": "object"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "Chunked response logs for a test connection that is in progress."
                }
              }
            }
          },
          "204": {
            "description": "No logs available for a test connection that has not started."
          },
          "302": {
            "description": "Redirect to the logs download URL for a test connection that has completed.",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "description": "URL to download logs"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-destination-test-connections/{sync_destination_test_connection_id}/logs/query": {
      "get": {
        "description": "Get logs for a sync destination test connection.",
        "operationId": "GetSyncDestinationTestConnectionLogsQuery",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Accept",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_destination_test_connection_id"
          },
          {
            "$ref": "#/components/parameters/table_filters"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data",
                    "metadata"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TableData"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No logs available for a test connection that has not started."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-destination-test-connections/{sync_destination_test_connection_id}/logs/live": {
      "get": {
        "description": "Get live logs for a sync destination test connection.",
        "operationId": "GetSyncDestinationTestConnectionLogsLive",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Accept",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_destination_test_connection_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "Chunked response logs for a test connection that is in progress."
                }
              }
            }
          },
          "204": {
            "description": "No logs available for a test connection that has not started."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-destination-test-connections/{sync_destination_test_connection_id}/promote": {
      "post": {
        "description": "Promote a sync destination test connection to a sync destination.",
        "operationId": "PromoteSyncDestinationTestConnection",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_destination_test_connection_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromoteSyncDestinationTestConnection"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response indicating that an existing sync destination was replaced.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncDestination"
                }
              }
            }
          },
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncDestination"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-destinations": {
      "get": {
        "description": "List all sync destination definitions.",
        "operationId": "ListSyncDestinations",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/sync_name_filter"
          },
          {
            "$ref": "#/components/parameters/sync_generic_sort_bys"
          },
          {
            "$ref": "#/components/parameters/sync_sort_dirs"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/SyncDestination"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-destinations/{sync_destination_name}": {
      "get": {
        "description": "Get a single sync destination definition.",
        "operationId": "GetSyncDestination",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_destination_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncDestination"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "patch": {
        "description": "Update a Sync Destination definition.",
        "operationId": "UpdateSyncDestination",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_destination_name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncDestinationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncDestination"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "description": "Delete a Sync Destination definition. Any syncs relying on this destination must be deleted first.",
        "operationId": "DeleteSyncDestination",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_destination_name"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-destinations/{sync_destination_name}/migrate": {
      "post": {
        "description": "Run migrations on all syncs which use this Sync Destination.",
        "operationId": "MigrateSyncDestination",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_destination_name"
          }
        ],
        "responses": {
          "204": {
            "description": "Migrations have been queued for all syncs using this Sync Destination."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-destinations/{sync_destination_name}/syncs": {
      "get": {
        "description": "List all Syncs for a given sync destination.",
        "operationId": "ListSyncDestinationSyncs",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_destination_name"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/sync_sort_bys"
          },
          {
            "$ref": "#/components/parameters/sync_sort_dirs"
          },
          {
            "$ref": "#/components/parameters/sync_name_filter"
          },
          {
            "$ref": "#/components/parameters/migration_filter"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/ListSync"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-destinations/{sync_destination_name}/test-connections/{sync_test_connection_id}": {
      "get": {
        "description": "Get test connection details for sync destination.",
        "operationId": "GetTestConnectionForSyncDestination",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_destination_name"
          },
          {
            "$ref": "#/components/parameters/sync_test_connection_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncTestConnection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-source-test-connections": {
      "post": {
        "description": "Create a test source connection.",
        "operationId": "CreateSyncSourceTestConnection",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncSourceTestConnectionCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncSourceTestConnection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-source-test-connections/{sync_source_test_connection_id}": {
      "get": {
        "description": "Get a sync source test connection.",
        "operationId": "GetSyncSourceTestConnection",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_source_test_connection_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncSourceTestConnection"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "patch": {
        "description": "Update a sync source test connection.",
        "operationId": "UpdateSyncTestConnectionForSyncSource",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_source_test_connection_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "$ref": "#/components/schemas/SyncTestConnectionStatus"
                  },
                  "failure_reason": {
                    "type": "string",
                    "description": "Reason for failure",
                    "example": "password authentication failed for user \"exampleuser\""
                  },
                  "failure_code": {
                    "example": "INVALID_CREDENTIALS",
                    "type": "string",
                    "description": "Code for failure"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncSourceTestConnection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-source-test-connections/{sync_source_test_connection_id}/logs": {
      "get": {
        "description": "Deprecated. Get logs for a sync source test connection.",
        "deprecated": true,
        "operationId": "GetSyncSourceTestConnectionLogs",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Accept",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_source_test_connection_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": false,
                  "required": [
                    "location"
                  ],
                  "properties": {
                    "location": {
                      "type": "string",
                      "format": "uri",
                      "description": "The location to download the test connection logs from"
                    }
                  },
                  "title": "Test Connection Logs",
                  "type": "object"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "Chunked response logs for a test connection that is in progress."
                }
              }
            }
          },
          "204": {
            "description": "No logs available for a test connection that has not started."
          },
          "302": {
            "description": "Redirect to the logs download URL for a test connection that has completed.",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "description": "URL to download logs"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-source-test-connections/{sync_source_test_connection_id}/logs/query": {
      "get": {
        "description": "Get logs for a sync source test connection.",
        "operationId": "GetSyncSourceTestConnectionLogsQuery",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Accept",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_source_test_connection_id"
          },
          {
            "$ref": "#/components/parameters/table_filters"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data",
                    "metadata"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TableData"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No logs available for a test connection that has not started."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-source-test-connections/{sync_source_test_connection_id}/logs/live": {
      "get": {
        "description": "Get live logs for a sync source test connection.",
        "operationId": "GetSyncSourceTestConnectionLogsLive",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Accept",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_source_test_connection_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "Chunked response logs for a test connection that is in progress."
                }
              }
            }
          },
          "204": {
            "description": "No logs available for a test connection that has not started."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-source-test-connections/{sync_source_test_connection_id}/promote": {
      "post": {
        "description": "Promote a sync source test connection to a sync source.",
        "operationId": "PromoteSyncSourceTestConnection",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_source_test_connection_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromoteSyncSourceTestConnection"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response indicating that an existing sync source was replaced.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncSource"
                }
              }
            }
          },
          "201": {
            "description": "Successful response indicating that a new sync source was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncSource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-sources": {
      "get": {
        "description": "List all sync source definitions.",
        "operationId": "ListSyncSources",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/sync_name_filter"
          },
          {
            "$ref": "#/components/parameters/sync_generic_sort_bys"
          },
          {
            "$ref": "#/components/parameters/sync_sort_dirs"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/SyncSource"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-sources/{sync_source_name}": {
      "get": {
        "description": "Get a single sync source definition.",
        "operationId": "GetSyncSource",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_source_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncSource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "patch": {
        "description": "Update a Sync Source definition.",
        "operationId": "UpdateSyncSource",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_source_name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncSourceUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncSource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "description": "Delete a Sync Source definition. Any syncs relying on this source must be deleted first.",
        "operationId": "DeleteSyncSource",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_source_name"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-sources/{sync_source_name}/migrate": {
      "post": {
        "description": "Run migrations on all syncs which use this Sync Source.",
        "operationId": "MigrateSyncSource",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_source_name"
          }
        ],
        "responses": {
          "204": {
            "description": "Migrations have been queued for all syncs using this Sync Source."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-sources/{sync_source_name}/syncs": {
      "get": {
        "description": "List all Syncs for a given sync source.",
        "operationId": "ListSyncSourceSyncs",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_source_name"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/sync_sort_bys"
          },
          {
            "$ref": "#/components/parameters/sync_sort_dirs"
          },
          {
            "$ref": "#/components/parameters/sync_name_filter"
          },
          {
            "$ref": "#/components/parameters/migration_filter"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/ListSync"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-sources/{sync_source_name}/test-connections/{sync_test_connection_id}": {
      "get": {
        "description": "Get test connection details for sync source.",
        "operationId": "GetTestConnectionForSyncSource",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_source_name"
          },
          {
            "$ref": "#/components/parameters/sync_test_connection_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncTestConnection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-transformer-test-connections": {
      "post": {
        "description": "Create a test transformer connection.",
        "operationId": "CreateSyncTransformerTestConnection",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncTransformerTestConnectionCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncTransformerTestConnection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-transformer-test-connections/{sync_transformer_test_connection_id}": {
      "get": {
        "description": "Get a sync transformer test connection.",
        "operationId": "GetSyncTransformerTestConnection",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_transformer_test_connection_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncTransformerTestConnection"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "patch": {
        "description": "Update a sync transformer test connection.",
        "operationId": "UpdateSyncTestConnectionForSyncTransformer",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_transformer_test_connection_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "$ref": "#/components/schemas/SyncTestConnectionStatus"
                  },
                  "failure_reason": {
                    "type": "string",
                    "description": "Reason for failure",
                    "example": "password authentication failed for user \"exampleuser\""
                  },
                  "failure_code": {
                    "example": "INVALID_CREDENTIALS",
                    "type": "string",
                    "description": "Code for failure"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncTransformerTestConnection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-transformer-test-connections/{sync_transformer_test_connection_id}/logs": {
      "get": {
        "description": "Get logs for a sync transformer test connection.",
        "operationId": "GetSyncTransformerTestConnectionLogs",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Accept",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_transformer_test_connection_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": false,
                  "required": [
                    "location"
                  ],
                  "properties": {
                    "location": {
                      "type": "string",
                      "format": "uri",
                      "description": "The location to download the test connection logs from"
                    }
                  },
                  "title": "Test Connection Logs",
                  "type": "object"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "Chunked response logs for a test connection that is in progress."
                }
              }
            }
          },
          "204": {
            "description": "No logs available for a test connection that has not started."
          },
          "302": {
            "description": "Redirect to the logs download URL for a test connection that has completed.",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "description": "URL to download logs"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-transformer-test-connections/{sync_transformer_test_connection_id}/promote": {
      "post": {
        "description": "Promote a sync transformer test connection to a sync transformer.",
        "operationId": "PromoteSyncTransformerTestConnection",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_transformer_test_connection_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromoteSyncTransformerTestConnection"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response indicating that an existing sync transformer was replaced.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncTransformer"
                }
              }
            }
          },
          "201": {
            "description": "Successful response indicating that a new sync transformer was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncTransformer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-transformers": {
      "get": {
        "description": "List all sync transformer definitions.",
        "operationId": "ListSyncTransformers",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/sync_name_filter"
          },
          {
            "$ref": "#/components/parameters/sync_generic_sort_bys"
          },
          {
            "$ref": "#/components/parameters/sync_sort_dirs"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/SyncTransformer"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-transformers/{sync_transformer_name}": {
      "get": {
        "description": "Get a single sync transformer definition.",
        "operationId": "GetSyncTransformer",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_transformer_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncTransformer"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "patch": {
        "description": "Update a Sync Transformer definition.",
        "operationId": "UpdateSyncTransformer",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_transformer_name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncTransformerUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncTransformer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "description": "Delete a Sync Transformer definition. Any syncs relying on this transformer must be deleted first.",
        "operationId": "DeleteSyncTransformer",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_transformer_name"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-transformers/{sync_transformer_name}/syncs": {
      "get": {
        "description": "List all Syncs for a given sync transformer.",
        "operationId": "ListSyncTransformerSyncs",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_transformer_name"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/Sync"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-transformers/{sync_transformer_name}/sync-destinations": {
      "get": {
        "description": "List all Sync Destinations for a given sync transformer.",
        "operationId": "ListSyncTransformerSyncDestinations",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_transformer_name"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/SyncDestination"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-transformers/{sync_transformer_name}/test-connections/{sync_test_connection_id}": {
      "get": {
        "description": "Get test connection details for sync transformer.",
        "operationId": "GetTestConnectionForSyncTransformer",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_transformer_name"
          },
          {
            "$ref": "#/components/parameters/sync_test_connection_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncTestConnection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/sync-upgrades": {
      "get": {
        "description": "List all version upgrades for syncs",
        "operationId": "ListSyncUpgrades",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/sync_upgrades_sort_bys"
          },
          {
            "$ref": "#/components/parameters/sync_sort_dirs"
          },
          {
            "$ref": "#/components/parameters/sync_upgrades_path_filter"
          },
          {
            "$ref": "#/components/parameters/sync_upgrades_kind_filter"
          },
          {
            "$ref": "#/components/parameters/sync_upgrades_platform_version_filter"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/SyncUpgrade"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/syncs": {
      "get": {
        "description": "List all Syncs.",
        "operationId": "ListSyncs",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/sync_sort_bys"
          },
          {
            "$ref": "#/components/parameters/sync_sort_dirs"
          },
          {
            "$ref": "#/components/parameters/sync_name_filter"
          },
          {
            "$ref": "#/components/parameters/migration_filter"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/ListSync"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "description": "Create new Sync definition. Sync runs can be scheduled automatically, or triggered manually after sync is created.",
        "operationId": "CreateSync",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sync"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/syncs/{sync_name}": {
      "get": {
        "description": "Get a Sync",
        "operationId": "GetSync",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sync"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "patch": {
        "description": "Update a Sync",
        "operationId": "UpdateSync",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sync"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "description": "Delete Sync. This will delete Sync configuration and all associated sync runs, but will not delete the associated source and destination(s). These will need to be deleted separately.",
        "operationId": "DeleteSync",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_name"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/syncs/{sync_name}/runs": {
      "get": {
        "description": "List all Sync Runs.",
        "operationId": "ListSyncRuns",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_name"
          },
          {
            "$ref": "#/components/parameters/migration_filter"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/SyncRun"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "description": "Create new SyncRun. This will trigger a manual job run.",
        "operationId": "CreateSyncRun",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_name"
          }
        ],
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncRun"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/syncs/{sync_name}/runs/{sync_run_id}": {
      "get": {
        "description": "Get a Sync Run.",
        "operationId": "GetSyncRun",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_name"
          },
          {
            "$ref": "#/components/parameters/sync_run_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncRunDetails"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "patch": {
        "description": "Update a SyncRun",
        "operationId": "UpdateSyncRun",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_name"
          },
          {
            "$ref": "#/components/parameters/sync_run_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "$ref": "#/components/schemas/SyncRunStatus"
                  },
                  "status_reason": {
                    "$ref": "#/components/schemas/SyncRunStatusReason"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncRun"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/syncs/{sync_name}/runs/{sync_run_id}/logs": {
      "get": {
        "description": "Deprecated. Get logs for a sync run.",
        "operationId": "GetSyncRunLogs",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Accept",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_name"
          },
          {
            "$ref": "#/components/parameters/sync_run_id"
          },
          {
            "in": "query",
            "name": "table",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Table name to filter logs by. Use a single dash (\"-\") as input to exclude all table-specific log lines."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": false,
                  "required": [
                    "location"
                  ],
                  "properties": {
                    "location": {
                      "type": "string",
                      "format": "uri",
                      "description": "The location to download the sync run logs from"
                    }
                  },
                  "title": "Sync Run Logs",
                  "type": "object"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "Chunked response logs for a sync run that is in progress."
                }
              }
            }
          },
          "204": {
            "description": "No logs available for a sync run that has not started."
          },
          "302": {
            "description": "Redirect to the logs download URL for a sync run that has completed.",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "description": "URL to download logs"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/syncs/{sync_name}/runs/{sync_run_id}/logs/query": {
      "get": {
        "description": "Get logs for a sync run.",
        "operationId": "GetSyncRunLogsQuery",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Accept",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_name"
          },
          {
            "$ref": "#/components/parameters/sync_run_id"
          },
          {
            "$ref": "#/components/parameters/table_filters"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/download_file"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data",
                    "metadata"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TableData"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "Download file."
                }
              }
            }
          },
          "204": {
            "description": "No logs available for a test connection that has not started."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/syncs/{sync_name}/runs/{sync_run_id}/logs/live": {
      "get": {
        "description": "Get live logs for a sync run.",
        "operationId": "GetSyncRunLogsLive",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Accept",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_name"
          },
          {
            "$ref": "#/components/parameters/sync_run_id"
          },
          {
            "in": "query",
            "name": "table",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Table name to filter logs by. Use a single dash (\"-\") as input to exclude all table-specific log lines."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "Chunked response logs for a sync run that is in progress."
                }
              }
            }
          },
          "204": {
            "description": "No logs available for a sync run that has not started."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/syncs/{sync_name}/runs/{sync_run_id}/progress": {
      "post": {
        "description": "Create a new sync run progress update.",
        "operationId": "CreateSyncRunProgress",
        "x-internal": true,
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_name"
          },
          {
            "$ref": "#/components/parameters/sync_run_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "rows",
                  "warnings",
                  "errors"
                ],
                "properties": {
                  "rows": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of rows synced so far"
                  },
                  "warnings": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of warnings encountered so far"
                  },
                  "errors": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of errors encountered so far"
                  },
                  "status": {
                    "$ref": "#/components/schemas/SyncRunStatus"
                  },
                  "shard_num": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The shard number that this progress update is for"
                  },
                  "shard_total": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total number of shards for this sync run"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Progress was reported successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/syncs/{sync_name}/runs/{sync_run_id}/stats": {
      "get": {
        "description": "Get statistics on a Sync Run",
        "operationId": "GetSyncRunStats",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_name"
          },
          {
            "$ref": "#/components/parameters/sync_run_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncRunStats"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/syncs/{sync_name}/runs/{sync_run_id}/tables": {
      "get": {
        "description": "Get table details on a Sync Run",
        "operationId": "GetSyncRunTables",
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_name"
          },
          {
            "$ref": "#/components/parameters/sync_run_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/table_sort_bys"
          },
          {
            "$ref": "#/components/parameters/table_sort_dirs"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/SyncRunTableStat"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/syncs/{sync_name}/runs/{sync_run_id}/connector/{connector_id}/credentials": {
      "get": {
        "description": "Get connector credentials for a sync run.",
        "operationId": "GetSyncRunConnectorCredentials",
        "x-internal": true,
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_name"
          },
          {
            "$ref": "#/components/parameters/sync_run_id"
          },
          {
            "$ref": "#/components/parameters/connector_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "aws": {
                      "$ref": "#/components/schemas/ConnectorCredentialsResponseAWS"
                    },
                    "oauth": {
                      "$ref": "#/components/schemas/ConnectorCredentialsResponseOAuth"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/syncs/{sync_name}/runs/{sync_run_id}/connector/{connector_id}/identity": {
      "get": {
        "description": "Get connector identity for a sync run.",
        "operationId": "GetSyncRunConnectorIdentity",
        "x-internal": true,
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_name"
          },
          {
            "$ref": "#/components/parameters/sync_run_id"
          },
          {
            "$ref": "#/components/parameters/connector_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "aws": {
                      "$ref": "#/components/schemas/ConnectorIdentityResponseAWS"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/syncs/test-connections/{sync_test_connection_id}/connector/{connector_id}/credentials": {
      "get": {
        "description": "Get connector credentials for a test connection",
        "operationId": "GetTestConnectionConnectorCredentials",
        "x-internal": true,
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_test_connection_id"
          },
          {
            "$ref": "#/components/parameters/connector_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "aws": {
                      "$ref": "#/components/schemas/ConnectorCredentialsResponseAWS"
                    },
                    "oauth": {
                      "$ref": "#/components/schemas/ConnectorCredentialsResponseOAuth"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/syncs/test-connections/{sync_test_connection_id}/connector/{connector_id}/identity": {
      "get": {
        "description": "Get connector identity for a test connection.",
        "operationId": "GetTestConnectionConnectorIdentity",
        "x-internal": true,
        "tags": [
          "syncs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/sync_test_connection_id"
          },
          {
            "$ref": "#/components/parameters/connector_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "aws": {
                      "$ref": "#/components/schemas/ConnectorIdentityResponseAWS"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/teams/{team_name}/tables": {
      "get": {
        "description": "List Tables",
        "operationId": "ListTablesTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TableListItem"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "tables"
        ]
      }
    },
    "/teams/{team_name}/tables/{table_name}/data": {
      "get": {
        "description": "List Table Rows",
        "operationId": "TableListRowsTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/table_name"
          },
          {
            "$ref": "#/components/parameters/table_selects"
          },
          {
            "$ref": "#/components/parameters/table_filter_mode"
          },
          {
            "$ref": "#/components/parameters/table_filters"
          },
          {
            "$ref": "#/components/parameters/table_filter_ids"
          },
          {
            "$ref": "#/components/parameters/table_sort_bys"
          },
          {
            "$ref": "#/components/parameters/table_sort_dirs"
          },
          {
            "$ref": "#/components/parameters/table_group_bys"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data",
                    "metadata"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TableData"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "tables"
        ]
      }
    },
    "/teams/{team_name}/tables/{table_name}/data/{table_row_id}": {
      "get": {
        "description": "Get Table row",
        "operationId": "TableRowByIdTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/table_name"
          },
          {
            "$ref": "#/components/parameters/table_row_id"
          },
          {
            "$ref": "#/components/parameters/table_filter_mode"
          },
          {
            "$ref": "#/components/parameters/table_filters"
          },
          {
            "$ref": "#/components/parameters/table_filter_ids"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data",
                    "matches"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TableRow"
                    },
                    "matches": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TableRowFieldMatch"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "tables"
        ]
      }
    },
    "/teams/{team_name}/tables/{table_name}/schema": {
      "get": {
        "description": "Get Table Schema",
        "operationId": "TableSchemaTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/table_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "schema",
                    "default_columns"
                  ],
                  "properties": {
                    "schema": {
                      "$ref": "#/components/schemas/TableSchema"
                    },
                    "default_columns": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Column name"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "tables"
        ]
      }
    },
    "/teams/{team_name}/tables/schemas": {
      "get": {
        "description": "Get Table Schemas",
        "operationId": "BatchTableSchemasTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "name": "tables",
            "in": "query",
            "description": "A list of table names to retrieve schemas for",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1
              },
              "example": [
                "aws_ec2_instances",
                "aws_s3_buckets"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BatchTableSchemaItem"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "tables"
        ]
      }
    },
    "/teams/{team_name}/tables/{table_name}/columns": {
      "get": {
        "description": "Get Table Columns",
        "operationId": "TableListColumnsTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/table_name"
          },
          {
            "$ref": "#/components/parameters/table_filter_mode"
          },
          {
            "$ref": "#/components/parameters/table_column_name_filter"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TableColumnListItem"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "tables"
        ]
      }
    },
    "/teams/{team_name}/tables/{table_name}/columns/{column_name}/values": {
      "get": {
        "description": "Get Table Column Values",
        "operationId": "TableColumnListValuesTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/table_name"
          },
          {
            "$ref": "#/components/parameters/column_name"
          },
          {
            "$ref": "#/components/parameters/table_filter_mode"
          },
          {
            "$ref": "#/components/parameters/table_column_value_filter"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TableColumnValueListItem"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "tables"
        ]
      }
    },
    "/teams/{team_name}/tables/{table_name}/filters": {
      "get": {
        "description": "List Table Filters",
        "operationId": "TableListFiltersTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/table_name"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/filter_tags"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Filter"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "tables",
          "filters"
        ]
      },
      "post": {
        "description": "Save Table Filter",
        "operationId": "TableSaveFilterTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/table_name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Filter already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            }
          },
          "201": {
            "description": "Filter created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "tables",
          "filters"
        ]
      }
    },
    "/teams/{team_name}/tables/{table_name}/filters/tags": {
      "get": {
        "description": "List Filter Tags For A Table",
        "operationId": "TableListFilterTagsTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/table_name"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FilterTag"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "queries",
          "filters"
        ]
      }
    },
    "/teams/{team_name}/tables/{table_name}/relations": {
      "get": {
        "description": "List Table Relations",
        "operationId": "TableListRelationsTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/table_name"
          },
          {
            "name": "relation_name",
            "description": "Filter by related table name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TableRelation"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "tables"
        ]
      }
    },
    "/teams/{team_name}/usage-summary": {
      "get": {
        "description": "Get a summary of usage for the specified time range.",
        "operationId": "GetTeamUsageSummary",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "in": "query",
            "name": "metrics",
            "required": false,
            "schema": {
              "type": "array",
              "description": "A list of metrics to include in the response. Each metric must be one of the predefined valid values. If not provided, only `paid-rows` will be included.",
              "items": {
                "type": "string",
                "enum": [
                  "paid_rows",
                  "cloud_vcpu_seconds",
                  "cloud_vram_byte_seconds",
                  "network_egress_bytes"
                ]
              },
              "default": [
                "paid_rows"
              ]
            }
          },
          {
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "A valid ISO-8601-formatted date and time, indicating the inclusive start of the query time range. Defaults to 30 days ago."
            }
          },
          {
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "A valid ISO-8601-formatted date and time, indicating the exclusive end of the query time range. Defaults to the current time."
            }
          },
          {
            "in": "query",
            "name": "aggregation_period",
            "description": "An aggregation period to sum data over. In other words, data will be returned at this granularity. Currently only supports day and month.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "day",
              "enum": [
                "day",
                "month"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A summary of usage for the specified time range.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageSummary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/teams/{team_name}/usage-summary/{group_by}": {
      "get": {
        "description": "Get a grouped summary of usage for the specified time range.",
        "operationId": "GetGroupedTeamUsageSummary",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "in": "path",
            "name": "group_by",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "price_category",
                "plugin",
                "sync_id"
              ],
              "description": "Group by usage summary. `plugin` and `price_category` groupings are only available for `paid-rows`."
            }
          },
          {
            "in": "query",
            "name": "metrics",
            "required": false,
            "schema": {
              "type": "array",
              "description": "A list of metrics to include in the response. Each metric must be one of the predefined valid values. If not provided, only `paid-rows` will be included.",
              "items": {
                "type": "string",
                "enum": [
                  "paid_rows",
                  "cloud_vcpu_seconds",
                  "cloud_vram_byte_seconds",
                  "network_egress_bytes"
                ]
              },
              "default": [
                "paid_rows"
              ]
            }
          },
          {
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "A valid ISO-8601-formatted date and time, indicating the inclusive start of the query time range. Defaults to 30 days ago."
            }
          },
          {
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "A valid ISO-8601-formatted date and time, indicating the exclusive end of the query time range. Defaults to the current time."
            }
          },
          {
            "in": "query",
            "name": "aggregation_period",
            "description": "An aggregation period to sum data over. In other words, data will be returned at this granularity. Currently only supports day and month.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "day",
              "enum": [
                "day",
                "month"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A summary of usage for the specified time range.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageSummary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/teams/{team_name}/users": {
      "get": {
        "description": "List all users in the current team.",
        "operationId": "ListUsersByTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_name"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/User"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/upload/image": {
      "post": {
        "description": "Get a URL to upload image that will be publicly accessible",
        "operationId": "UploadImage",
        "parameters": [],
        "tags": [
          "images"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "content_type"
                ],
                "properties": {
                  "content_type": {
                    "$ref": "#/components/schemas/ContentType"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageURL"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/user": {
      "get": {
        "description": "Get the current authenticated user from the OAuth token\n",
        "operationId": "GetCurrentUser",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/User"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "event_identifiers": {
                          "type": "object",
                          "additionalProperties": true
                        },
                        "group_identifier": {
                          "type": "string"
                        },
                        "registered_team_name": {
                          "type": "string",
                          "description": "The name of the team that the platform is registered with"
                        },
                        "registered_team_internal": {
                          "type": "boolean",
                          "description": "Whether the team is internal or not"
                        }
                      }
                    }
                  ]
                }
              }
            },
            "description": "Response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BasicError"
                    },
                    {
                      "properties": {
                        "password_reset_required": {
                          "type": "boolean",
                          "description": "Whether the user needs to reset their password"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "users"
        ]
      },
      "patch": {
        "description": "Update attributes for the current authenticated user from the OAuth token",
        "operationId": "UpdateCurrentUser",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/UserName"
                  },
                  "tracking_opt_in": {
                    "type": "boolean",
                    "description": "Whether to opt in or out of anonymous user tracking"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "405": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/user/anon-event": {
      "post": {
        "description": "Send an anonymous event",
        "operationId": "SendAnonymousEvent",
        "x-internal": true,
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "name",
                  "anonymous_id"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of event"
                  },
                  "anonymous_id": {
                    "type": "string",
                    "description": "Anonymous ID identifying the user",
                    "x-go-name": "AnonymousID"
                  },
                  "properties": {
                    "type": "object",
                    "description": "Properties of event, keys should be of string type"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "analytics"
        ],
        "security": []
      }
    },
    "/user/authenticate": {
      "post": {
        "description": "Authenticate a user with password",
        "operationId": "AuthenticateLocalUser",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication is successful",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "id_token"
                  ],
                  "properties": {
                    "id_token": {
                      "type": "string",
                      "x-go-name": "IDToken"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "405": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "users"
        ],
        "security": []
      }
    },
    "/user/change-password": {
      "post": {
        "description": "Change user password",
        "operationId": "ChangeLocalUserPassword",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "email",
                  "old_password",
                  "new_password"
                ],
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "old_password": {
                    "type": "string"
                  },
                  "new_password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful",
            "headers": {
              "Set-Cookie": {
                "description": "Reset session cookie",
                "schema": {
                  "type": "string",
                  "example": "__session=; HttpOnly; Secure; SameSite=None; Path=/; Max-Age=3600"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "405": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/user/customer": {
      "patch": {
        "description": "Update customer details",
        "operationId": "UpdateCustomer",
        "x-internal": true,
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "first_name",
                  "last_name"
                ],
                "properties": {
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "company_name": {
                    "type": "string"
                  },
                  "learned_about_cq_from": {
                    "type": "string"
                  },
                  "learned_about_cq_from_other": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Queued for processing"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "analytics"
        ]
      }
    },
    "/user/event": {
      "post": {
        "description": "Send a user event",
        "operationId": "SendUserEvent",
        "x-internal": true,
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of event"
                  },
                  "properties": {
                    "type": "object",
                    "description": "Properties of event, keys should be of string type"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "analytics"
        ]
      }
    },
    "/user/invitations": {
      "get": {
        "operationId": "ListCurrentUserInvitations",
        "description": "List of the current user's unaccepted invitations",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "items",
                    "metadata"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/InvitationWithToken"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/user/totp/verify": {
      "post": {
        "description": "Verify a one time password for MFA",
        "operationId": "UserTOTPVerify",
        "parameters": [
          {
            "name": "__cqp_sess",
            "in": "cookie",
            "style": "form",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "otp"
                ],
                "properties": {
                  "otp": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Multifactor authentication is complete.",
            "headers": {
              "Set-Cookie": {
                "description": "Session cookie",
                "schema": {
                  "type": "string",
                  "example": "__session=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9Cg...; HttpOnly; Secure; SameSite=None; Path=/; Max-Age=3600"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "405": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/user/totp": {
      "post": {
        "description": "Set up MFA for the current user",
        "operationId": "UserTOTPSetup",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "secret",
                    "url"
                  ],
                  "properties": {
                    "url": {
                      "type": "string"
                    },
                    "secret": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "405": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "users"
        ]
      },
      "delete": {
        "description": "Disable MFA for the current user",
        "operationId": "UserTOTPDelete",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "405": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/user/local": {
      "get": {
        "description": "Get the current authenticated local user",
        "operationId": "GetCurrentLocalUser",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocalUserWithTeams"
                }
              }
            },
            "description": "Response"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/user/login": {
      "post": {
        "description": "Start a session using ID token",
        "operationId": "LoginUser",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "id_token"
                ],
                "properties": {
                  "id_token": {
                    "type": "string",
                    "x-go-name": "IDToken"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Authentication is complete.",
            "headers": {
              "Set-Cookie": {
                "description": "Session cookie",
                "schema": {
                  "type": "string",
                  "example": "__session=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9Cg...; HttpOnly; Secure; SameSite=None; Path=/; Max-Age=3600"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "405": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "users"
        ],
        "security": []
      },
      "delete": {
        "description": "Logout a session",
        "operationId": "LogoutUser",
        "responses": {
          "204": {
            "description": "Logout is complete.",
            "headers": {
              "Set-Cookie": {
                "description": "Empty session cookie",
                "schema": {
                  "type": "string",
                  "example": "__session=; HttpOnly; Secure; SameSite=None; Path=/; Max-Age=3600"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "405": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/user/memberships": {
      "get": {
        "description": "Get memberships that the user has accepted.",
        "operationId": "GetCurrentUserMemberships",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "metadata",
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/MembershipWithTeam"
                      },
                      "type": "array",
                      "example": [
                        {
                          "roles": [
                            "admin:write"
                          ],
                          "team": {
                            "created_at": "2017-07-14T16:53:42Z",
                            "name": "cloudquery",
                            "display_name": "CloudQuery",
                            "plan": "free",
                            "is_trial_active": false,
                            "internal": false
                          }
                        }
                      ]
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/ListMetadata"
                    }
                  }
                }
              }
            },
            "description": "Response"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/user/reset-password-token": {
      "post": {
        "description": "Reset user password with token",
        "operationId": "ResetLocalUserPassword",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "email",
                  "reset_token",
                  "new_password"
                ],
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "reset_token": {
                    "type": "string"
                  },
                  "new_password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful",
            "headers": {
              "Set-Cookie": {
                "description": "Reset session cookie",
                "schema": {
                  "type": "string",
                  "example": "__session=; HttpOnly; Secure; SameSite=None; Path=/; Max-Age=3600"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "405": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "users"
        ],
        "security": []
      }
    },
    "/user/token": {
      "post": {
        "description": "Start a CLI session and create a custom token",
        "operationId": "CreateUserToken",
        "x-internal": true,
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "custom_token"
                  ],
                  "properties": {
                    "custom_token": {
                      "type": "string",
                      "description": "Token to exchange for refresh token"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "users"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ]
      }
    },
    "/users/{user_id}": {
      "delete": {
        "description": "Delete user",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/user_id"
          }
        ],
        "x-internal": true,
        "responses": {
          "204": {
            "description": "Response"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/RequiresAuthentication"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/registry/auth": {
      "get": {
        "description": "Performs authentication and authorization for our image registry.",
        "operationId": "AuthRegistryRequest",
        "parameters": [
          {
            "in": "header",
            "name": "X-Meta-Plugin-Version",
            "schema": {
              "type": "string"
            },
            "description": "Plugin version name",
            "example": "v1.0.0"
          },
          {
            "in": "header",
            "name": "X-Meta-User-Team-Name",
            "schema": {
              "type": "string"
            },
            "description": "User's team name"
          },
          {
            "in": "query",
            "name": "account",
            "schema": {
              "type": "string"
            },
            "description": "Username used for `docker login`"
          },
          {
            "in": "query",
            "name": "service",
            "schema": {
              "type": "string"
            },
            "description": "Service requesting the JWT token"
          },
          {
            "in": "query",
            "name": "scope",
            "schema": {
              "type": "string"
            },
            "description": "Multi-value string containing the repository being access and the operation type (push/pull)"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryAuthToken"
                }
              }
            },
            "description": "Response"
          },
          "400": {
            "$ref": "#/components/responses/DockerError"
          },
          "401": {
            "$ref": "#/components/responses/DockerError"
          },
          "404": {
            "$ref": "#/components/responses/DockerError"
          },
          "422": {
            "$ref": "#/components/responses/DockerError"
          },
          "500": {
            "$ref": "#/components/responses/DockerError"
          }
        },
        "tags": [
          "registry"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "scheme": "bearer",
        "type": "http"
      },
      "basicAuth": {
        "scheme": "basic",
        "type": "http"
      },
      "cookieAuth": {
        "scheme": "cookie",
        "type": "http"
      }
    },
    "parameters": {
      "per_page": {
        "description": "The number of results per page (max 1000).",
        "in": "query",
        "name": "per_page",
        "required": false,
        "schema": {
          "default": 100,
          "maximum": 1000,
          "minimum": 1,
          "type": "integer",
          "format": "int64"
        }
      },
      "page": {
        "description": "Page number of the results to fetch",
        "in": "query",
        "name": "page",
        "required": false,
        "schema": {
          "default": 1,
          "minimum": 1,
          "type": "integer",
          "format": "int64"
        }
      },
      "filter_tags": {
        "name": "tag",
        "in": "query",
        "description": "Filter tags",
        "allowEmptyValue": true,
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/FilterTag"
          }
        },
        "x-go-name": "FilterTags"
      },
      "filter_name_filter": {
        "name": "name_filter",
        "in": "query",
        "required": false,
        "schema": {
          "description": "Filter by filter name",
          "type": "string"
        }
      },
      "filter_expression_filter": {
        "name": "expression_filter",
        "in": "query",
        "required": false,
        "schema": {
          "description": "Filter by filter expression",
          "type": "string"
        }
      },
      "filter_id": {
        "in": "path",
        "name": "filter_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/FilterID"
        },
        "x-go-name": "FilterID"
      },
      "assetview_run_type": {
        "name": "type",
        "in": "query",
        "description": "AssetView run type filters",
        "allowEmptyValue": true,
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/AssetViewRunType"
          }
        },
        "x-go-name": "AssetViewRunTypes"
      },
      "team_name": {
        "in": "path",
        "name": "team_name",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TeamName"
        }
      },
      "user_id": {
        "name": "user_id",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UserID"
        },
        "x-go-name": "UserID"
      },
      "plugin_sort_by": {
        "description": "The field to sort by",
        "in": "query",
        "name": "sort_by",
        "required": false,
        "schema": {
          "enum": [
            "created_at",
            "updated_at",
            "name",
            "downloads"
          ],
          "type": "string"
        }
      },
      "plugin_include_release_stages": {
        "description": "Include these release stages in the response",
        "in": "query",
        "name": "include_release_stages",
        "required": false,
        "allowEmptyValue": true,
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/PluginReleaseStage"
          }
        }
      },
      "plugin_exclude_release_stages": {
        "description": "Exclude these release stages from the response",
        "in": "query",
        "name": "exclude_release_stages",
        "required": false,
        "allowEmptyValue": true,
        "explode": true,
        "schema": {
          "type": "array",
          "default": [
            "deprecated"
          ],
          "items": {
            "$ref": "#/components/schemas/PluginReleaseStage"
          }
        }
      },
      "plugin_kind": {
        "in": "path",
        "name": "plugin_kind",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/PluginKind"
        }
      },
      "plugin_name": {
        "in": "path",
        "name": "plugin_name",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/PluginName"
        }
      },
      "version_sort_by": {
        "description": "The field to sort by",
        "in": "query",
        "name": "sort_by",
        "required": false,
        "schema": {
          "enum": [
            "created_at"
          ],
          "type": "string"
        }
      },
      "include_drafts": {
        "description": "Whether to include draft versions",
        "in": "query",
        "name": "include_drafts",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "include_prereleases": {
        "description": "Whether to include prerelease versions",
        "in": "query",
        "name": "include_prereleases",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "version_filter": {
        "in": "query",
        "name": "version_filter",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/VersionFilter"
        }
      },
      "version_name": {
        "in": "path",
        "name": "version_name",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/VersionName"
        }
      },
      "target_name": {
        "in": "path",
        "name": "target_name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "table_name": {
        "in": "path",
        "name": "table_name",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TableName"
        }
      },
      "table_selects": {
        "name": "select",
        "in": "query",
        "description": "Table selects. This filters the columns that are returned in the result set.",
        "allowEmptyValue": true,
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/TableSelect"
          }
        },
        "x-go-type-skip-optional-pointer": true,
        "x-go-name": "Selects"
      },
      "table_filter_mode": {
        "name": "filter_mode",
        "in": "query",
        "description": "Table filter mode.\n\nSmart mode switches between column and search mode based on the filtered table and\n\nSearch mode allows searching deeply nested data but is not available on all tables as it requires a separate indexing step.\nSearch mode is only available on resource tables or queries derived from resource tables results that contain _cq_id and _cq_source_id.\nSearch mode may also be used against cloud_assets but it will only return results from resource tables.\n\nColumn mode searches purely using the columns in the table.\nIt will work on all table results but it is not optimized for arbitrary substring searches and so may be slow on larger tables.\n",
        "schema": {
          "type": "string",
          "enum": [
            "smart",
            "search",
            "column"
          ],
          "default": "smart"
        }
      },
      "table_filters": {
        "name": "filter",
        "in": "query",
        "description": "Table filters. This filters the rows that are returned in the result set.",
        "allowEmptyValue": true,
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/FilterExpression"
          }
        },
        "x-go-type-skip-optional-pointer": true,
        "x-go-name": "Filters"
      },
      "table_filter_ids": {
        "name": "filter_id",
        "in": "query",
        "description": "Table filter IDs. These should be valid Saved Filter IDs. These filters\nwill be applied to the query results before returning them.\n",
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/FilterID"
          }
        },
        "x-go-type-skip-optional-pointer": true,
        "x-go-name": "FilterIDs"
      },
      "table_sort_bys": {
        "name": "sort_by",
        "in": "query",
        "description": "Table sort by options. This sorts the rows that are returned in the result set.",
        "allowEmptyValue": true,
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/TableSortBy"
          }
        },
        "x-go-type-skip-optional-pointer": true,
        "x-go-name": "SortBys"
      },
      "table_sort_dirs": {
        "name": "sort_dir",
        "in": "query",
        "description": "Table sort direction options. This sorts the rows that are returned in the result set.",
        "allowEmptyValue": true,
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/TableSortDirection"
          }
        },
        "x-go-type-skip-optional-pointer": true,
        "x-go-name": "SortDirections"
      },
      "table_group_bys": {
        "name": "group_by",
        "in": "query",
        "description": "Table group by options. This groups the rows that are returned in the result set by the given columns.",
        "allowEmptyValue": true,
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/TableGroupBy"
          }
        },
        "x-go-type-skip-optional-pointer": true,
        "x-go-name": "GroupBys"
      },
      "table_row_id": {
        "in": "path",
        "name": "table_row_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TableRowID"
        }
      },
      "table_column_name_filter": {
        "name": "filter",
        "in": "query",
        "required": false,
        "schema": {
          "description": "Filter by column name",
          "type": "string"
        }
      },
      "column_name": {
        "in": "path",
        "name": "column_name",
        "required": true,
        "schema": {
          "description": "The name of a table column.",
          "type": "string"
        }
      },
      "table_column_value_filter": {
        "name": "filter",
        "in": "query",
        "required": false,
        "schema": {
          "description": "Filter by column value.",
          "type": "string"
        }
      },
      "alert_states": {
        "name": "state",
        "in": "query",
        "description": "Alert states",
        "allowEmptyValue": true,
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/AlertState"
          }
        },
        "x-go-type-skip-optional-pointer": true,
        "x-go-name": "AlertStates"
      },
      "enabled": {
        "name": "enabled",
        "in": "query",
        "description": "Enabled",
        "schema": {
          "type": "boolean"
        }
      },
      "apikey_id": {
        "name": "apikey_id",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/APIKeyID"
        },
        "x-go-name": "APIKeyID"
      },
      "connector_id": {
        "name": "connector_id",
        "in": "path",
        "required": true,
        "x-go-name": "ConnectorID",
        "schema": {
          "$ref": "#/components/schemas/ConnectorID"
        }
      },
      "custom_columns_sort_bys": {
        "name": "sort_by",
        "in": "query",
        "description": "Sort by options",
        "allowEmptyValue": true,
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/CustomColumnSortBy"
          }
        },
        "x-go-type-skip-optional-pointer": true,
        "x-go-name": "CustomColumnSortBys"
      },
      "custom_columns_sort_dirs": {
        "name": "sort_dir",
        "in": "query",
        "description": "Custom column sort direction options",
        "allowEmptyValue": true,
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/CustomColumnSortDirection"
          }
        },
        "x-go-type-skip-optional-pointer": true,
        "x-go-name": "CustomColumnSortDirections"
      },
      "custom_column_id": {
        "in": "path",
        "name": "custom_column_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/CustomColumnID"
        },
        "x-go-name": "CustomColumnID"
      },
      "email_basic": {
        "in": "path",
        "name": "email",
        "required": true,
        "schema": {
          "type": "string",
          "example": "user@example.com"
        }
      },
      "notification_destination_id": {
        "in": "path",
        "name": "notification_destination_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/NotificationDestinationID"
        },
        "x-go-name": "NotificationDestinationID"
      },
      "onboarding_id": {
        "name": "onboarding_id",
        "in": "path",
        "required": true,
        "x-go-name": "OnboardingID",
        "schema": {
          "$ref": "#/components/schemas/OnboardingID"
        }
      },
      "aws_orgunit_id": {
        "name": "aws_orgunit_id",
        "in": "path",
        "required": true,
        "x-go-name": "OrganizationalUnitID",
        "schema": {
          "$ref": "#/components/schemas/OrganizationalUnitID"
        }
      },
      "include_private": {
        "description": "Whether to include private plugins",
        "in": "query",
        "name": "include_private",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "plugin_team": {
        "in": "path",
        "name": "plugin_team",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TeamName"
        }
      },
      "platform_policies_sort_bys": {
        "name": "sort_by",
        "in": "query",
        "description": "Sort by options",
        "allowEmptyValue": true,
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/PlatformPolicySortBy"
          }
        },
        "x-go-type-skip-optional-pointer": true,
        "x-go-name": "PlatformPolicySortBys"
      },
      "platform_policies_sort_dirs": {
        "name": "sort_dir",
        "in": "query",
        "description": "Platform policies sort direction options",
        "allowEmptyValue": true,
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/PlatformPolicySortDirection"
          }
        },
        "x-go-type-skip-optional-pointer": true,
        "x-go-name": "PlatformPolicySortDirections"
      },
      "platform_policy_frameworks_sort_bys": {
        "name": "sort_by",
        "in": "query",
        "description": "Sort by options",
        "allowEmptyValue": true,
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/PlatformPolicyFrameworkSortBy"
          }
        },
        "x-go-type-skip-optional-pointer": true,
        "x-go-name": "PlatformPolicyFrameworkSortBys"
      },
      "platform_policy_rules_sort_bys": {
        "name": "sort_by",
        "in": "query",
        "description": "Sort by options",
        "allowEmptyValue": true,
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/PlatformPolicyRuleSortBy"
          }
        },
        "x-go-type-skip-optional-pointer": true,
        "x-go-name": "PlatformPolicyRuleSortBys"
      },
      "platform_policy_rule_details_sort_bys": {
        "name": "sort_by",
        "in": "query",
        "description": "Sort by options",
        "allowEmptyValue": true,
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/PlatformPolicyRuleDetailSortBy"
          }
        },
        "x-go-type-skip-optional-pointer": true,
        "x-go-name": "PlatformPolicyRuleDetailSortBys"
      },
      "query_tags": {
        "name": "tag",
        "in": "query",
        "description": "Query tags",
        "allowEmptyValue": true,
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/QueryTag"
          }
        },
        "x-go-type-skip-optional-pointer": true,
        "x-go-name": "QueryTags"
      },
      "query_name_filter": {
        "name": "name_filter",
        "in": "query",
        "required": false,
        "schema": {
          "description": "Filter by query name.",
          "type": "string"
        }
      },
      "query_filter": {
        "name": "query_filter",
        "in": "query",
        "required": false,
        "schema": {
          "description": "Filter by query",
          "type": "string"
        }
      },
      "alert_configured": {
        "name": "alert_configured",
        "in": "query",
        "description": "Alert configured",
        "schema": {
          "type": "boolean"
        }
      },
      "alert_message_filter": {
        "name": "alert_message_filter",
        "in": "query",
        "required": false,
        "schema": {
          "description": "Filter by alert message.",
          "type": "string"
        }
      },
      "alert_enabled": {
        "name": "alert_enabled",
        "in": "query",
        "description": "Alert enabled",
        "schema": {
          "type": "boolean"
        }
      },
      "query_id": {
        "in": "path",
        "name": "query_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/QueryID"
        },
        "x-go-name": "QueryID"
      },
      "report_sort_bys": {
        "name": "sort_by",
        "in": "query",
        "description": "Sort by options",
        "allowEmptyValue": true,
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ReportSortBy"
          }
        },
        "x-go-type-skip-optional-pointer": true,
        "x-go-name": "ReportSortBys"
      },
      "report_sort_dirs": {
        "name": "sort_dir",
        "in": "query",
        "description": "Report sort direction options",
        "allowEmptyValue": true,
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ReportSortDirection"
          }
        },
        "x-go-type-skip-optional-pointer": true,
        "x-go-name": "ReportSortDirections"
      },
      "report_templates_sort_bys": {
        "name": "sort_by",
        "in": "query",
        "description": "Sort by options",
        "allowEmptyValue": true,
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ReportTemplateSortBy"
          }
        },
        "x-go-type-skip-optional-pointer": true,
        "x-go-name": "ReportTemplateSortBys"
      },
      "report_templates_sort_dirs": {
        "name": "sort_dir",
        "in": "query",
        "description": "Report template sort direction options",
        "allowEmptyValue": true,
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ReportTemplateSortDirection"
          }
        },
        "x-go-type-skip-optional-pointer": true,
        "x-go-name": "ReportTemplateSortDirections"
      },
      "sync_destination_test_connection_id": {
        "name": "sync_destination_test_connection_id",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SyncDestinationTestConnectionID"
        },
        "x-go-name": "SyncDestinationTestConnectionID"
      },
      "sync_name_filter": {
        "name": "filter",
        "in": "query",
        "required": false,
        "schema": {
          "description": "Filter by name or display name",
          "type": "string",
          "pattern": "^[a-zA-Z\\p{L}\\p{N}_][a-zA-Z\\p{L}\\p{N}_ \\-']*$",
          "x-pattern-message": "can contain only letters, numbers, spaces, hyphens, underscores, and apostrophes"
        }
      },
      "sync_generic_sort_bys": {
        "name": "sort_by",
        "in": "query",
        "description": "Sort by options",
        "allowEmptyValue": true,
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/SyncGenericSortBy"
          }
        },
        "x-go-type-skip-optional-pointer": true,
        "x-go-name": "SyncGenericSortBys"
      },
      "sync_sort_dirs": {
        "name": "sort_dir",
        "in": "query",
        "description": "Sync sort direction options",
        "allowEmptyValue": true,
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/SyncSortDirection"
          }
        },
        "x-go-type-skip-optional-pointer": true,
        "x-go-name": "SyncSortDirections"
      },
      "sync_destination_name": {
        "name": "sync_destination_name",
        "in": "path",
        "required": true,
        "schema": {
          "description": "Unique name of the sync destination",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_-]+$",
          "x-go-name": "SyncDestinationName",
          "x-pattern-message": "can contain only alphanumerical characters, dashes, and underscores"
        }
      },
      "sync_sort_bys": {
        "name": "sort_by",
        "in": "query",
        "description": "Sort by options",
        "allowEmptyValue": true,
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/SyncSortBy"
          }
        },
        "x-go-type-skip-optional-pointer": true,
        "x-go-name": "SyncSortBys"
      },
      "migration_filter": {
        "name": "migration_filter",
        "in": "query",
        "required": false,
        "schema": {
          "description": "Filter by migration",
          "type": "boolean"
        }
      },
      "sync_test_connection_id": {
        "name": "sync_test_connection_id",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SyncTestConnectionID"
        }
      },
      "sync_source_test_connection_id": {
        "name": "sync_source_test_connection_id",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SyncSourceTestConnectionID"
        },
        "x-go-name": "SyncSourceTestConnectionID"
      },
      "sync_source_name": {
        "name": "sync_source_name",
        "in": "path",
        "required": true,
        "schema": {
          "description": "Unique name of the sync source",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_-]+$",
          "x-go-name": "SyncSourceName",
          "x-pattern-message": "can contain only alphanumerical characters, dashes, and underscores"
        }
      },
      "sync_transformer_test_connection_id": {
        "name": "sync_transformer_test_connection_id",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SyncTransformerTestConnectionID"
        },
        "x-go-name": "SyncTransformerTestConnectionID"
      },
      "sync_transformer_name": {
        "name": "sync_transformer_name",
        "in": "path",
        "required": true,
        "schema": {
          "description": "Unique name of the sync transformer",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_-]+$",
          "x-go-name": "SyncTransformerName",
          "x-pattern-message": "can contain only alphanumerical characters, dashes, and underscores"
        }
      },
      "sync_upgrades_sort_bys": {
        "name": "sort_by",
        "in": "query",
        "description": "Sort by options",
        "allowEmptyValue": true,
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "kind",
              "path",
              "prev_version",
              "new_version",
              "created_at"
            ]
          }
        },
        "x-go-type-skip-optional-pointer": true,
        "x-go-name": "SyncUpgradesSortBys"
      },
      "sync_upgrades_path_filter": {
        "name": "path",
        "in": "query",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/SyncPluginPath",
          "example": "cloudquery/aws",
          "description": "Filter by plugin path"
        }
      },
      "sync_upgrades_kind_filter": {
        "name": "kind",
        "in": "query",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/PluginKind",
          "description": "Filter by plugin kind"
        }
      },
      "sync_upgrades_platform_version_filter": {
        "name": "platform_version",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "example": "v1.1.0",
          "description": "Filter by platform version"
        }
      },
      "sync_name": {
        "name": "sync_name",
        "in": "path",
        "required": true,
        "schema": {
          "description": "Unique name of the sync",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_-]+$",
          "x-go-name": "SyncName",
          "x-pattern-message": "can contain only alphanumerical characters, dashes, and underscores"
        }
      },
      "sync_run_id": {
        "name": "sync_run_id",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SyncRunID"
        }
      },
      "download_file": {
        "description": "Whether to generate a downloadable file for the response.",
        "in": "query",
        "name": "download",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      }
    },
    "schemas": {
      "UserName": {
        "description": "The unique name for the user.",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[a-zA-Z\\p{L}][a-zA-Z\\p{L} \\-']*$",
        "x-pattern-message": "can contain only letters, spaces, hyphens, and apostrophes, starting with a letter",
        "type": "string",
        "example": "Sarah O'Connor"
      },
      "User": {
        "additionalProperties": false,
        "description": "CloudQuery User",
        "properties": {
          "created_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "ID of the User",
            "type": "string",
            "format": "uuid",
            "example": "12345678-1234-1234-1234-1234567890ab",
            "x-go-name": "ID"
          },
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "name": {
            "$ref": "#/components/schemas/UserName"
          },
          "updated_at": {
            "example": "2017-07-14T16:53:42Z",
            "type": "string",
            "format": "date-time"
          },
          "profile_image_url": {
            "type": "string",
            "description": "Profile image URL of user",
            "x-go-name": "ProfileImageURL"
          },
          "last_login_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "email"
        ],
        "title": "CloudQuery User",
        "type": "object"
      },
      "AuditLogEvent": {
        "type": "object",
        "required": [
          "id",
          "user",
          "event_type",
          "created_at",
          "user_ip_address"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the audit log event"
          },
          "user": {
            "$ref": "#/components/schemas/User",
            "description": "The user who performed the action"
          },
          "user_ip_address": {
            "type": "string",
            "description": "The IP address of the user who performed the action"
          },
          "team_name": {
            "type": "string",
            "description": "The name of the team associated with the event",
            "nullable": true
          },
          "event_type": {
            "type": "string",
            "description": "The type of event that was logged"
          },
          "entity_display_name": {
            "type": "string",
            "description": "The display name of the entity that was affected",
            "nullable": true
          },
          "event_details": {
            "type": "object",
            "description": "Additional details about the event",
            "additionalProperties": true
          },
          "is_success": {
            "type": "boolean",
            "description": "Whether the event was successful"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the event was created"
          }
        }
      },
      "ListMetadata": {
        "required": [
          "page_size"
        ],
        "properties": {
          "total_count": {
            "type": "integer"
          },
          "last_page": {
            "type": "integer"
          },
          "page_size": {
            "type": "integer"
          },
          "time_ms": {
            "type": "integer"
          }
        }
      },
      "BasicError": {
        "additionalProperties": false,
        "description": "Basic Error",
        "required": [
          "message",
          "status"
        ],
        "properties": {
          "message": {
            "type": "string"
          },
          "status": {
            "type": "integer"
          }
        },
        "title": "Basic Error",
        "type": "object"
      },
      "FieldError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicError"
          },
          {
            "properties": {
              "errors": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "field_errors": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        ]
      },
      "FilterTag": {
        "description": "A table column filter tag.",
        "type": "string"
      },
      "FilterExpression": {
        "description": "A table column filter.",
        "type": "string",
        "example": "resource_type=aws_s3_buckets"
      },
      "TableName": {
        "description": "The name of the table.",
        "type": "string",
        "example": "cloud_assets"
      },
      "QueryID": {
        "description": "The unique ID for the query.",
        "type": "string",
        "format": "uuid",
        "x-go-name": "QueryID"
      },
      "UserID": {
        "description": "ID of the User",
        "type": "string",
        "format": "uuid",
        "example": "12345678-1234-1234-1234-1234567890ab",
        "x-go-name": "UserID"
      },
      "Filter": {
        "title": "Filter",
        "type": "object",
        "description": "Saved filter",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "expression",
          "created_at"
        ],
        "properties": {
          "id": {
            "description": "ID of the Filter",
            "type": "string",
            "format": "uuid",
            "example": "12345678-1234-1234-1234-1234567890ab",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "example": "t2.micro EC2 instances"
          },
          "expression": {
            "$ref": "#/components/schemas/FilterExpression"
          },
          "description": {
            "type": "string",
            "example": "Filter to find all EC2 instances of type t2.micro from the aws_ec2_instance raw table"
          },
          "table": {
            "$ref": "#/components/schemas/TableName"
          },
          "query_id": {
            "$ref": "#/components/schemas/QueryID"
          },
          "user_id": {
            "$ref": "#/components/schemas/UserID"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterTag"
            },
            "x-go-type-skip-optional-pointer": true
          },
          "created_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "FilterID": {
        "description": "The unique ID for the filter.",
        "type": "string",
        "format": "uuid",
        "x-go-name": "FilterID"
      },
      "FilterUpdate": {
        "title": "Filter definition for updating a filter",
        "description": "Filter Update Definition",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "t2.micro EC2 instances"
          },
          "description": {
            "type": "string"
          },
          "expression": {
            "$ref": "#/components/schemas/FilterExpression"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterTag"
            }
          }
        }
      },
      "AssetViewRunType": {
        "description": "Type of assetview run",
        "type": "string",
        "enum": [
          "client_table",
          "s3_source"
        ]
      },
      "AssetViewRun": {
        "type": "object",
        "required": [
          "id",
          "type",
          "created_at"
        ],
        "properties": {
          "id": {
            "description": "ID of the run",
            "type": "string",
            "format": "uuid",
            "example": "12345678-1234-1234-1234-1234567890ab",
            "x-go-name": "ID"
          },
          "type": {
            "$ref": "#/components/schemas/AssetViewRunType"
          },
          "triggered_by": {
            "description": "The user who triggered the run",
            "type": "string"
          },
          "error_message": {
            "description": "The error message if the run failed",
            "type": "string"
          },
          "created_at": {
            "description": "The time the run was created",
            "type": "string",
            "format": "date-time",
            "example": "2020-01-01T00:00:00Z"
          },
          "finished_at": {
            "description": "The time the run was finished",
            "type": "string",
            "format": "date-time",
            "example": "2020-01-01T00:00:00Z"
          }
        }
      },
      "Role": {
        "description": "User roles",
        "type": "string",
        "enum": [
          "admin:write",
          "admin:read",
          "general:read",
          "general:write"
        ]
      },
      "SAMLConfig": {
        "title": "SAML Configuration",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "platform_certificate_download_url",
          "enabled",
          "can_enable"
        ],
        "properties": {
          "platform_base_url": {
            "type": "string",
            "description": "Base URL to the platform.",
            "format": "url",
            "x-go-name": "PlatformBaseURL"
          },
          "platform_sso_url": {
            "type": "string",
            "description": "SAML service URL. Only available after `platform_base_url` is set.",
            "format": "url",
            "x-go-name": "PlatformSSOURL"
          },
          "platform_entity_id": {
            "type": "string",
            "description": "SAML Entity ID. Only available after `platform_base_url` is set.",
            "x-go-name": "PlatformEntityID"
          },
          "platform_metadata_download_url": {
            "type": "string",
            "description": "URL to download platform metadata. Only available after `platform_base_url` is set.",
            "format": "url",
            "x-go-name": "PlatformMetadataDownloadURL"
          },
          "platform_certificate_download_url": {
            "type": "string",
            "description": "Platform Certificate download URL",
            "format": "url",
            "x-go-name": "PlatformCertificateDownloadURL"
          },
          "metadata_url": {
            "type": "string",
            "description": "Metadata URL from identity provider. Mutually exclusive with `metadata_xml`",
            "format": "url",
            "x-go-name": "MetadataURL"
          },
          "metadata_xml": {
            "type": "string",
            "description": "Metadata file contents from identity provider. Mutually exclusive with `metadata_url`",
            "format": "url",
            "x-go-name": "MetadataXML"
          },
          "logout_url": {
            "type": "string",
            "description": "Logout URL from identity provider",
            "format": "url",
            "x-go-name": "LogoutURL"
          },
          "role_group_key": {
            "type": "string",
            "description": "Role group key name",
            "example": "groups"
          },
          "role_mappings": {
            "type": "object",
            "description": "Mapping from IdP group names to roles. Each key is a potential IdP group value for the specified role_group_key, and each value is an array of roles to assign to users in that group.",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Role"
              }
            },
            "example": {
              "admins-rw": [
                "admin:write",
                "admin:read"
              ],
              "admins-ro": [
                "admin:read"
              ],
              "general-rw": [
                "general:write",
                "general:read"
              ],
              "general-ro": [
                "general:read"
              ]
            },
            "x-go-type-skip-optional-pointer": true
          },
          "default_roles": {
            "type": "array",
            "description": "Default roles for new users who are not in any group",
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "x-go-type-skip-optional-pointer": true,
            "x-omitempty": false
          },
          "disable_access_if_no_role_group": {
            "type": "boolean",
            "description": "Whether to disable access if no role group is found in the SAML assertion. If true, users without a role group will not be able to log in."
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether SAML is enabled"
          },
          "can_enable": {
            "type": "boolean",
            "description": "Whether SAML can be enabled"
          }
        }
      },
      "SAMLConfigUpdate": {
        "title": "SAML Configuration Update",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "platform_base_url": {
            "type": "string",
            "description": "Base URL to the platform. This should be set first. https recommended.",
            "format": "url",
            "x-go-name": "PlatformBaseURL"
          },
          "metadata_url": {
            "type": "string",
            "description": "Metadata URL from identity provider. Mutually exclusive with `metadata_xml`",
            "format": "url",
            "x-go-name": "MetadataURL"
          },
          "metadata_xml": {
            "type": "string",
            "description": "Metadata file contents from identity provider. Mutually exclusive with `metadata_url`",
            "format": "url",
            "x-go-name": "MetadataXML"
          },
          "logout_url": {
            "type": "string",
            "description": "Logout URL from identity provider",
            "format": "url",
            "x-go-name": "LogoutURL"
          },
          "role_group_key": {
            "type": "string",
            "description": "Role group key name"
          },
          "role_mappings": {
            "type": "object",
            "description": "Mapping from IdP group names to roles. Each key is a potential IdP group value for the specified role_group_key, and each value is an array of roles to assign to users in that group.",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Role"
              }
            },
            "example": {
              "admins-rw": [
                "admin:write",
                "admin:read"
              ],
              "admins-ro": [
                "admin:read"
              ],
              "general-rw": [
                "general:write",
                "general:read"
              ],
              "general-ro": [
                "general:read"
              ]
            }
          },
          "default_roles": {
            "type": "array",
            "description": "Default roles for new users who are not in any group",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          },
          "disable_access_if_no_role_group": {
            "type": "boolean",
            "description": "Whether to disable access if no role group is found in the SAML assertion. If true, users without a role group will not be able to log in."
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to enable or disable SAML"
          }
        }
      },
      "PlatformSettings": {
        "type": "object",
        "description": "Platform settings definition",
        "required": [
          "enforce_mfa"
        ],
        "properties": {
          "enforce_mfa": {
            "type": "boolean",
            "description": "Whether or not to require MFA for all users",
            "default": false
          }
        }
      },
      "PlatformSettingsUpdate": {
        "type": "object",
        "description": "Platform settings partial update",
        "properties": {
          "enforce_mfa": {
            "type": "boolean",
            "description": "Whether or not to require MFA for all users",
            "default": false
          }
        }
      },
      "TeamName": {
        "description": "The unique name for the team.",
        "maxLength": 255,
        "pattern": "^[a-z](-?[a-z0-9]+)+$",
        "type": "string",
        "example": "cloudquery",
        "x-pattern-message": "can contain only lowercase alphanumerical characters and dashes, starting with a letter"
      },
      "TeamPlan": {
        "description": "The plan the team is on (trial is deprecated)",
        "type": "string",
        "enum": [
          "free",
          "paid",
          "enterprise",
          "trial"
        ]
      },
      "Team": {
        "additionalProperties": false,
        "description": "CloudQuery Team",
        "properties": {
          "created_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/TeamName"
          },
          "plan": {
            "$ref": "#/components/schemas/TeamPlan"
          },
          "plan_end_time": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string"
          },
          "is_trial_active": {
            "type": "boolean",
            "example": false
          },
          "trial_end_time": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string"
          },
          "display_name": {
            "description": "The team's display name",
            "maxLength": 255,
            "type": "string",
            "example": "CloudQuery"
          },
          "internal": {
            "example": false,
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "display_name",
          "plan",
          "is_trial_active",
          "internal"
        ],
        "title": "Team",
        "type": "object"
      },
      "MembershipWithUser": {
        "additionalProperties": false,
        "properties": {
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "admin:read"
            }
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "roles",
          "user"
        ],
        "title": "CloudQuery User Membership",
        "type": "object"
      },
      "LocalUserProvider": {
        "title": "LocalUserProvider",
        "type": "string",
        "enum": [
          "local",
          "saml"
        ],
        "default": "local"
      },
      "LocalUser": {
        "allOf": [
          {
            "$ref": "#/components/schemas/User"
          },
          {
            "type": "object",
            "required": [
              "roles",
              "enabled",
              "provider"
            ],
            "properties": {
              "roles": {
                "description": "Global roles for the user",
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "admin:write",
                    "admin:read"
                  ]
                },
                "x-go-type": "[]string"
              },
              "enabled": {
                "type": "boolean"
              },
              "provider": {
                "$ref": "#/components/schemas/LocalUserProvider"
              },
              "tracking_opted_in": {
                "type": "boolean",
                "description": "Whether anonymous user tracking was opted into"
              }
            }
          }
        ]
      },
      "MembershipWithTeamName": {
        "additionalProperties": false,
        "properties": {
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "admin:read"
            }
          },
          "team_name": {
            "$ref": "#/components/schemas/TeamName"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "roles",
          "team_name",
          "created_at",
          "updated_at"
        ],
        "title": "CloudQuery Team Membership (team name only)",
        "type": "object"
      },
      "LocalUserWithTeams": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LocalUser"
          },
          {
            "type": "object",
            "required": [
              "teams"
            ],
            "properties": {
              "teams": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MembershipWithTeamName"
                }
              }
            }
          }
        ]
      },
      "PlatformVersion": {
        "type": "object",
        "required": [
          "name",
          "created_at"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the version"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the version was first installed"
          }
        }
      },
      "PluginReleaseStage": {
        "description": "Official plugins can go through three release stages: Coming Soon, Preview, and GA.\nThe Coming Soon stage is for plugins that are not yet ready for Preview, but users can subscribe to be notified when they are ready.\nBoth Preview and GA plugins follow semantic versioning. The main differences between the two stages are:\nPreview plugins are still experimental and may have frequent breaking changes. Preview plugins might get deprecated due to lack of usage. Long Term Support with community Discord and bug fixes is only guaranteed for GA plugins. Premium plugins are often discounted or free during the Preview stage.",
        "type": "string",
        "enum": [
          "coming-soon",
          "preview",
          "ga",
          "deprecated"
        ]
      },
      "PluginName": {
        "description": "The unique name for the plugin.",
        "maxLength": 255,
        "pattern": "^[a-z](-?[a-z0-9]+)+$",
        "type": "string",
        "example": "aws-source",
        "x-pattern-message": "can contain only lowercase alphanumerical characters and dashes, starting with a letter"
      },
      "PluginKind": {
        "description": "The kind of plugin, ie. source or destination.",
        "type": "string",
        "example": "source",
        "enum": [
          "source",
          "destination",
          "transformer"
        ]
      },
      "PluginCategory": {
        "description": "Supported categories for plugins",
        "type": "string",
        "enum": [
          "cloud-infrastructure",
          "databases",
          "sales-marketing",
          "engineering-analytics",
          "marketing-analytics",
          "shipment-tracking",
          "product-analytics",
          "cloud-finops",
          "project-management",
          "fleet-management",
          "security",
          "data-warehouses",
          "human-resources",
          "finance",
          "customer-support",
          "other"
        ]
      },
      "PluginPriceCategory": {
        "description": "Supported price categories for billing",
        "type": "string",
        "enum": [
          "api",
          "database",
          "free"
        ]
      },
      "PluginTier": {
        "description": "This field is deprecated, refer to `price_category` instead.\nThis field is only kept for backward compatibility and may be removed in a future release.\nSupported tiers for plugins.\n  - free: Free tier, with no paid tables.\n  - paid: Paid tier. These plugins may have paid tables, but can also have free tables. They require login to access.\n  - open-core: This option is deprecated, values will either be free or paid.\n",
        "type": "string",
        "deprecated": true,
        "enum": [
          "free",
          "paid",
          "open-core"
        ]
      },
      "Plugin": {
        "additionalProperties": false,
        "description": "CloudQuery Plugin",
        "properties": {
          "team_name": {
            "$ref": "#/components/schemas/TeamName"
          },
          "name": {
            "$ref": "#/components/schemas/PluginName"
          },
          "kind": {
            "$ref": "#/components/schemas/PluginKind"
          },
          "category": {
            "$ref": "#/components/schemas/PluginCategory"
          },
          "price_category": {
            "$ref": "#/components/schemas/PluginPriceCategory"
          },
          "created_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string"
          },
          "homepage": {
            "type": "string",
            "example": "https://cloudquery.io"
          },
          "logo": {
            "type": "string",
            "example": "https://storage.googleapis.com/cq-cloud-images/9ac4cb31-e971-4879-8619-87dc22b0f98e"
          },
          "display_name": {
            "description": "The plugin's display name",
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "example": "AWS Source Plugin"
          },
          "official": {
            "description": "True if the plugin is maintained by CloudQuery, false otherwise",
            "type": "boolean"
          },
          "release_stage": {
            "$ref": "#/components/schemas/PluginReleaseStage"
          },
          "repository": {
            "type": "string",
            "example": "https://github.com/cloudquery/cloudquery"
          },
          "short_description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 512,
            "example": "Sync data from AWS to any destination"
          },
          "tier": {
            "$ref": "#/components/schemas/PluginTier"
          },
          "public": {
            "description": "Whether the plugin is listed in the CloudQuery Hub. If false, the plugin will not be shown in the CloudQuery Hub and will only be visible to members of the plugin's team.",
            "type": "boolean"
          },
          "usd_per_row": {
            "deprecated": true,
            "type": "string",
            "pattern": "^\\d+(?:\\.\\d{1,10})?$",
            "description": "Deprecated. Refer to `price_category` instead.",
            "example": "0.0001",
            "x-go-name": "USDPerRow",
            "x-pattern-message": "must be a valid decimal number with up to 10 decimal places."
          },
          "free_rows_per_month": {
            "deprecated": true,
            "type": "integer",
            "format": "int64",
            "description": "Deprecated. Refer to `price_category` instead.",
            "example": 1000
          },
          "minimum_cloud_version": {
            "type": "string",
            "description": "Minimum plugin version that is supported in CloudQuery managed syncs.",
            "maxLength": 64,
            "example": "v1.2.3"
          }
        },
        "required": [
          "team_name",
          "name",
          "kind",
          "category",
          "release_stage",
          "created_at",
          "updated_at",
          "logo",
          "display_name",
          "official",
          "short_description",
          "tier",
          "usd_per_row",
          "free_rows_per_month"
        ],
        "title": "CloudQuery Plugin",
        "type": "object"
      },
      "VersionName": {
        "type": "string",
        "description": "The version in semantic version format.",
        "pattern": "^v[0-9]+\\.[0-9]+\\.[0-9]+(-[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?$",
        "x-pattern-message": "should be in semantic version format"
      },
      "VersionRange": {
        "type": "string",
        "description": "A version range in semantic version format.",
        "pattern": "^[^~]?v[0-9]+\\.[0-9]+\\.[0-9]+(-[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?$",
        "x-pattern-message": "should be a version range in semantic version format"
      },
      "ListPluginPinnedVersion": {
        "additionalProperties": false,
        "description": "CloudQuery Pinned Plugin Version Info",
        "required": [
          "name",
          "range",
          "initialized",
          "mirroring"
        ],
        "properties": {
          "name": {
            "$ref": "#/components/schemas/VersionName"
          },
          "range": {
            "$ref": "#/components/schemas/VersionRange"
          },
          "initialized": {
            "type": "boolean",
            "default": true,
            "deprecated": true,
            "description": "Deprecated. Assume `true`."
          },
          "mirroring": {
            "type": "boolean",
            "default": false,
            "deprecated": true,
            "description": "Deprecated. Assume `false`."
          }
        }
      },
      "ListPlugin": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Plugin"
          },
          {
            "type": "object",
            "properties": {
              "latest_version": {
                "$ref": "#/components/schemas/VersionName"
              },
              "pinned_version": {
                "$ref": "#/components/schemas/ListPluginPinnedVersion"
              }
            }
          }
        ]
      },
      "ListPlugins": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ListPlugin"
        },
        "example": [
          {
            "name": "aws",
            "kind": "source",
            "team_name": "cloudquery",
            "display_name": "AWS Source Plugin",
            "category": "cloud-infrastructure",
            "created_at": "2017-07-14T16:53:42Z",
            "updated_at": "2017-07-14T16:53:42Z",
            "homepage": "https://cloudquery.io",
            "logo": "https://storage.googleapis.com/cq-cloud-images/9ac4cb31-e971-4879-8619-87dc22b0f98e",
            "official": true,
            "short_description": "Sync data from AWS to any destination",
            "repository": "https://github.com/cloudquery/cloudquery",
            "tier": "paid",
            "usd_per_row": "0.00123",
            "free_rows_per_month": 10000,
            "release_stage": "preview"
          }
        ]
      },
      "PluginReleaseStageCreate": {
        "description": "Official plugins can go through three release stages: Coming Soon, Preview, and GA.\nThe Coming Soon stage is for plugins that are not yet ready for Preview, but users can subscribe to be notified when they are ready.\nBoth Preview and GA plugins follow semantic versioning. The main differences between the two stages are:\nPreview plugins are still experimental and may have frequent breaking changes. Preview plugins might get deprecated due to lack of usage. Long Term Support with community Discord and bug fixes is only guaranteed for GA plugins. Premium plugins are often discounted or free during the Preview stage.",
        "type": "string",
        "enum": [
          "coming-soon",
          "preview",
          "ga"
        ],
        "default": "coming-soon"
      },
      "PluginCreate": {
        "type": "object",
        "required": [
          "team_name",
          "kind",
          "name",
          "category",
          "display_name",
          "short_description",
          "public"
        ],
        "properties": {
          "team_name": {
            "$ref": "#/components/schemas/TeamName"
          },
          "kind": {
            "$ref": "#/components/schemas/PluginKind"
          },
          "name": {
            "$ref": "#/components/schemas/PluginName"
          },
          "category": {
            "$ref": "#/components/schemas/PluginCategory"
          },
          "price_category": {
            "$ref": "#/components/schemas/PluginPriceCategory"
          },
          "tier": {
            "$ref": "#/components/schemas/PluginTier"
          },
          "display_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "The plugin's display name, as shown in the CloudQuery Hub.",
            "example": "AWS Source Plugin"
          },
          "short_description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 512,
            "description": "Short description of the plugin. This will be shown in the CloudQuery Hub.",
            "example": "Sync data from AWS to any destination"
          },
          "homepage": {
            "type": "string",
            "example": "https://cloudquery.io"
          },
          "public": {
            "type": "boolean",
            "description": "Whether the plugin is listed in the CloudQuery Hub. If false, the plugin will not be shown in the CloudQuery Hub and will only be visible to members of the team.",
            "example": true
          },
          "repository": {
            "type": "string",
            "example": "https://github.com/cloudquery/cloudquery"
          },
          "release_stage": {
            "$ref": "#/components/schemas/PluginReleaseStageCreate"
          },
          "logo": {
            "type": "string",
            "description": "URL to the plugin's logo. This will be shown in the CloudQuery Hub.",
            "example": "https://storage.googleapis.com/cq-cloud-images/9ac4cb31-e971-4879-8619-87dc22b0f98e",
            "format": "url"
          },
          "usd_per_row": {
            "deprecated": true,
            "type": "string",
            "pattern": "^\\d+(?:\\.\\d{1,10})?$",
            "description": "Deprecated. Use `price_category` instead.",
            "example": "0.00001",
            "x-go-name": "USDPerRow",
            "x-pattern-message": "must be a valid decimal number with up to 10 decimal places."
          },
          "free_rows_per_month": {
            "deprecated": true,
            "type": "integer",
            "format": "int64",
            "description": "Deprecated. Use `price_category` instead.",
            "example": 10000
          }
        }
      },
      "PluginReleaseStageUpdate": {
        "description": "Official plugins can go through three release stages: Coming Soon, Preview, and GA.\nThe Coming Soon stage is for plugins that are not yet ready for Preview, but users can subscribe to be notified when they are ready.\nBoth Preview and GA plugins follow semantic versioning. The main differences between the two stages are:\nPreview plugins are still experimental and may have frequent breaking changes. Preview plugins might get deprecated due to lack of usage. Long Term Support with community Discord and bug fixes is only guaranteed for GA plugins. Premium plugins are often discounted or free during the Preview stage.",
        "type": "string",
        "enum": [
          "coming-soon",
          "preview",
          "ga",
          "deprecated"
        ]
      },
      "PluginUpdate": {
        "type": "object",
        "properties": {
          "category": {
            "$ref": "#/components/schemas/PluginCategory"
          },
          "price_category": {
            "$ref": "#/components/schemas/PluginPriceCategory"
          },
          "tier": {
            "$ref": "#/components/schemas/PluginTier"
          },
          "display_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "The plugin's display name, as shown in the CloudQuery Hub.",
            "example": "AWS Source Plugin"
          },
          "short_description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 512,
            "description": "Short description of the plugin. This will be shown in the CloudQuery Hub.",
            "example": "Sync data from AWS to any destination"
          },
          "homepage": {
            "type": "string",
            "example": "https://cloudquery.io"
          },
          "repository": {
            "type": "string",
            "example": "https://github.com/cloudquery/cloudquery"
          },
          "logo": {
            "type": "string",
            "description": "URL to the plugin's logo. This will be shown in the CloudQuery Hub.",
            "example": "https://storage.googleapis.com/cq-cloud-images/9ac4cb31-e971-4879-8619-87dc22b0f9e8",
            "format": "url"
          },
          "public": {
            "type": "boolean",
            "description": "If plugin is not public, it won't be visible to other teams in the CloudQuery Hub."
          },
          "release_stage": {
            "$ref": "#/components/schemas/PluginReleaseStageUpdate"
          },
          "usd_per_row": {
            "deprecated": true,
            "type": "string",
            "pattern": "^\\d+(?:\\.\\d{1,10})?$",
            "description": "Deprecated. Update `price_category` instead.",
            "example": "0.0001",
            "x-go-name": "USDPerRow",
            "x-pattern-message": "must be a valid decimal number with up to 10 decimal places."
          },
          "free_rows_per_month": {
            "deprecated": true,
            "type": "integer",
            "format": "int64",
            "description": "Deprecated. Update `price_category` instead.",
            "example": 1000
          }
        }
      },
      "VersionFilter": {
        "type": "string",
        "description": "A version filter in semantic version format with prefix ranges.",
        "pattern": "^[^~]?v[0-9]+\\.[0-9]+\\.[0-9]+(-[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?$",
        "x-pattern-message": "should be in semantic version format with prefix ranges"
      },
      "PluginProtocols": {
        "description": "The CloudQuery protocols supported by this plugin version (only protocol 3 is supported by new plugins).",
        "type": "array",
        "items": {
          "type": "integer",
          "enum": [
            3
          ]
        }
      },
      "PluginPackageType": {
        "description": "The package type of the plugin assets",
        "type": "string",
        "enum": [
          "native",
          "docker"
        ]
      },
      "PluginVersionBase": {
        "additionalProperties": false,
        "description": "CloudQuery Plugin Version",
        "required": [
          "created_at",
          "name",
          "message",
          "draft",
          "retracted",
          "protocols",
          "supported_targets",
          "checksums",
          "package_type"
        ],
        "properties": {
          "created_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string",
            "description": "The date and time the plugin version was created."
          },
          "published_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string",
            "description": "The date and time the plugin version was set to non-draft (published)."
          },
          "name": {
            "$ref": "#/components/schemas/VersionName"
          },
          "message": {
            "type": "string",
            "description": "Description of what's new or changed in this version (supports markdown)",
            "example": "- Added support for AWS S3 - Added support for AWS EC2"
          },
          "draft": {
            "type": "boolean",
            "description": "If a plugin version is in draft, it will not show to members outside the team or be counted as the latest version."
          },
          "retracted": {
            "type": "boolean",
            "description": "If a plugin version is retracted, assets will still be available for download, but the version will be marked as retracted to discourage use."
          },
          "protocols": {
            "$ref": "#/components/schemas/PluginProtocols"
          },
          "supported_targets": {
            "type": "array",
            "description": "The targets supported by this plugin version, formatted as <os>_<arch>",
            "example": [
              "linux_arm64",
              "darwin_amd64",
              "windows_amd64"
            ],
            "items": {
              "type": "string"
            }
          },
          "checksums": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The checksums of the plugin assets"
          },
          "package_type": {
            "$ref": "#/components/schemas/PluginPackageType"
          }
        },
        "title": "CloudQuery Plugin Version",
        "type": "object"
      },
      "PluginVersionList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginVersionBase"
          }
        ]
      },
      "PluginSpecJSONSchema": {
        "description": "The specification of the plugin. This is a JSON schema that describes the configuration of the plugin.",
        "type": "string"
      },
      "PluginVersion": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginVersionBase"
          },
          {
            "type": "object",
            "properties": {
              "spec_json_schema": {
                "$ref": "#/components/schemas/PluginSpecJSONSchema"
              },
              "connector_required": {
                "type": "boolean",
                "description": "Whether a connector is required for this plugin version"
              },
              "connector_types": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of connector types available for this plugin version"
              }
            }
          }
        ]
      },
      "PluginVersionDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginVersion"
          },
          {
            "type": "object",
            "required": [
              "example_config"
            ],
            "properties": {
              "example_config": {
                "type": "string",
                "description": "Example configuration for the plugin. This can be used in generated quickstart guides, for example. Markdown format."
              },
              "ui_base_url": {
                "type": "string",
                "description": "Base URL for the plugin's UI. Only available for plugins with a UI and for logged in users.",
                "x-go-name": "UIBaseURL"
              }
            }
          }
        ]
      },
      "PluginVersionUpdate": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Description of what's new or changed in this version (supports markdown)",
            "example": "- Added support for *AWS S3* - Added support for *AWS EC2*"
          },
          "draft": {
            "type": "boolean",
            "description": "If a plugin version is in draft, it will not show to members outside the team or be counted as the latest version. Once draft is set to false, only certain fields can be updated."
          },
          "retracted": {
            "type": "boolean",
            "description": "If a plugin version is retracted, assets will still be available for download, but the version will be marked as retracted to discourage use."
          },
          "protocols": {
            "$ref": "#/components/schemas/PluginProtocols"
          },
          "supported_targets": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "checksums": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The SHA-256 checksums of the plugin binaries, one per supported target."
          },
          "package_type": {
            "type": "string",
            "description": "The package type of the plugin binaries"
          },
          "spec_json_schema": {
            "$ref": "#/components/schemas/PluginSpecJSONSchema"
          }
        }
      },
      "PluginAsset": {
        "additionalProperties": false,
        "description": "CloudQuery Plugin Asset",
        "required": [
          "checksum",
          "location"
        ],
        "properties": {
          "checksum": {
            "type": "string",
            "description": "The checksum of the plugin asset"
          },
          "location": {
            "type": "string",
            "format": "uri",
            "description": "The location to download the plugin asset from"
          }
        },
        "title": "CloudQuery Plugin Asset",
        "type": "object"
      },
      "ReleaseURL": {
        "required": [
          "url"
        ],
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "PluginDocsPageName": {
        "description": "The unique name for the plugin documentation page.",
        "maxLength": 255,
        "pattern": "^[\\w,\\s-]+$",
        "type": "string",
        "example": "overview",
        "x-pattern-message": "can contain only letters, numbers, hyphens and commas"
      },
      "PluginDocsPage": {
        "additionalProperties": false,
        "description": "CloudQuery Plugin Documentation Page",
        "required": [
          "name",
          "content"
        ],
        "properties": {
          "name": {
            "$ref": "#/components/schemas/PluginDocsPageName"
          },
          "content": {
            "type": "string",
            "description": "The content of the documentation page. Supports markdown.",
            "example": "# Getting Started\n\nThis is the getting started page."
          }
        },
        "title": "CloudQuery Plugin Documentation Page",
        "type": "object"
      },
      "PluginDocsPageCreate": {
        "additionalProperties": false,
        "description": "CloudQuery Plugin Documentation Page",
        "required": [
          "name",
          "content"
        ],
        "properties": {
          "name": {
            "$ref": "#/components/schemas/PluginDocsPageName"
          },
          "content": {
            "type": "string",
            "minLength": 1,
            "description": "The content of the documentation page. Supports markdown.",
            "example": "# Getting Started\n\nThis is the getting started page."
          }
        },
        "title": "CloudQuery Plugin Documentation Page",
        "type": "object"
      },
      "PluginTableName": {
        "description": "Name of the table",
        "maxLength": 255,
        "pattern": "^[a-z](_?[a-z0-9]+)+$",
        "type": "string",
        "example": "aws_ec2_instances",
        "x-pattern-message": "can contain only lowercase alphanumerical characters and underscores, starting with a letter"
      },
      "PluginTable": {
        "additionalProperties": false,
        "description": "CloudQuery Plugin Table",
        "required": [
          "description",
          "is_incremental",
          "name",
          "relations",
          "title"
        ],
        "properties": {
          "description": {
            "description": "Description of the table",
            "type": "string",
            "example": "AWS S3 Buckets"
          },
          "is_incremental": {
            "description": "Whether the table is incremental",
            "type": "boolean"
          },
          "name": {
            "$ref": "#/components/schemas/PluginTableName"
          },
          "parent": {
            "description": "Name of the parent table, if any",
            "type": "string",
            "example": "nil"
          },
          "relations": {
            "description": "Names of the tables that depend on this table",
            "items": {
              "type": "string"
            },
            "type": "array",
            "example": [
              "aws_s3_bucket_cors_rules"
            ]
          },
          "title": {
            "description": "Title of the table",
            "type": "string",
            "example": "AWS S3 Buckets"
          },
          "is_paid": {
            "description": "Whether the table is paid",
            "type": "boolean"
          }
        },
        "title": "CloudQuery Plugin Table",
        "type": "object"
      },
      "PluginTableColumn": {
        "additionalProperties": false,
        "description": "CloudQuery Plugin Column",
        "required": [
          "description",
          "incremental_key",
          "name",
          "not_null",
          "primary_key",
          "type",
          "unique"
        ],
        "properties": {
          "description": {
            "description": "Description of the column",
            "type": "string"
          },
          "incremental_key": {
            "description": "Whether the column is used as an incremental key",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the column",
            "type": "string"
          },
          "not_null": {
            "description": "Whether the column is nullable",
            "type": "boolean"
          },
          "primary_key": {
            "description": "Whether the column is part of the primary key",
            "type": "boolean"
          },
          "type": {
            "description": "Arrow Type of the column",
            "type": "string"
          },
          "type_schema": {
            "description": "For columns of type JSON, the schema of the JSON object",
            "type": "string"
          },
          "unique": {
            "description": "Whether the column has a unique constraint",
            "type": "boolean"
          }
        },
        "title": "CloudQuery Plugin Table Column",
        "type": "object"
      },
      "PluginTableCreate": {
        "additionalProperties": false,
        "description": "CloudQuery Plugin Table",
        "required": [
          "name"
        ],
        "properties": {
          "description": {
            "description": "Description of the table",
            "type": "string",
            "example": "AWS S3 Buckets"
          },
          "is_incremental": {
            "description": "Whether the table is incremental",
            "type": "boolean"
          },
          "name": {
            "$ref": "#/components/schemas/PluginTableName"
          },
          "parent": {
            "description": "Name of the parent table, if any",
            "type": "string",
            "example": "nil"
          },
          "relations": {
            "description": "Names of the tables that depend on this table",
            "items": {
              "type": "string"
            },
            "type": "array",
            "example": [
              "aws_s3_bucket_cors_rules"
            ]
          },
          "permissions_needed": {
            "description": "List of permissions needed to access this table, if any",
            "items": {
              "type": "string"
            },
            "type": "array",
            "example": [
              "storage.buckets.list"
            ]
          },
          "title": {
            "description": "Title of the table",
            "type": "string",
            "example": "AWS S3 Buckets"
          },
          "is_paid": {
            "description": "Whether the table is paid",
            "type": "boolean"
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PluginTableColumn"
            }
          }
        },
        "title": "CloudQuery Plugin Table",
        "type": "object"
      },
      "PluginTableDetails": {
        "additionalProperties": false,
        "required": [
          "columns",
          "description",
          "is_incremental",
          "name",
          "relations",
          "title",
          "permissions_needed"
        ],
        "properties": {
          "columns": {
            "description": "List of columns",
            "items": {
              "$ref": "#/components/schemas/PluginTableColumn"
            },
            "type": "array"
          },
          "description": {
            "description": "Description of the table",
            "type": "string"
          },
          "is_incremental": {
            "description": "Whether the table is incremental",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the table",
            "type": "string"
          },
          "parent": {
            "description": "Name of the parent table, if any",
            "type": "string"
          },
          "relations": {
            "description": "Names of the tables that depend on this table",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "title": {
            "description": "Title of the table",
            "type": "string"
          },
          "is_paid": {
            "description": "Whether the table is paid",
            "type": "boolean"
          },
          "permissions_needed": {
            "description": "List of permissions needed to access this table, if any",
            "items": {
              "type": "string"
            },
            "type": "array",
            "example": [
              "storage.buckets.list"
            ]
          }
        },
        "type": "object"
      },
      "PluginUIAssetUploadRequest": {
        "additionalProperties": false,
        "description": "CloudQuery Plugin UI Asset Upload Request",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The path and name of the asset",
            "example": "scripts/main.js"
          },
          "content_type": {
            "type": "string",
            "description": "Content-type of the asset",
            "example": "application/json"
          }
        },
        "title": "CloudQuery Plugin UI Asset Upload Request",
        "type": "object"
      },
      "PluginUIAsset": {
        "additionalProperties": false,
        "description": "CloudQuery Plugin UI Asset",
        "required": [
          "name",
          "upload_url"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The path and name of the asset"
          },
          "upload_url": {
            "type": "string",
            "description": "URL to upload the asset to",
            "x-go-name": "UploadURL"
          }
        },
        "title": "CloudQuery Plugin UI Asset",
        "type": "object"
      },
      "TableListItem": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/TableName"
          },
          "total_rows": {
            "type": "integer",
            "x-go-type": "uint64"
          }
        },
        "required": [
          "name",
          "rows"
        ],
        "title": "TableListItem",
        "type": "object"
      },
      "TableSelect": {
        "title": "TableSelect",
        "type": "string"
      },
      "TableSortBy": {
        "title": "TableSortBy",
        "type": "string"
      },
      "TableSortDirection": {
        "title": "TableSortDirection",
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ],
        "default": "asc"
      },
      "TableGroupBy": {
        "title": "TableGroupBy",
        "type": "string"
      },
      "QueryExpression": {
        "title": "QueryExpression",
        "type": "string",
        "description": "Query expression",
        "example": "SELECT account_id, instance_id, instance_type, region, name, tags FROM aws_ec2_instance WHERE instance_type = 't2.micro'"
      },
      "TableData": {
        "additionalProperties": false,
        "properties": {
          "query": {
            "$ref": "#/components/schemas/QueryExpression"
          },
          "columns": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "type"
              ]
            }
          },
          "rows": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {}
            }
          }
        },
        "required": [
          "columns",
          "rows"
        ],
        "title": "TableData",
        "type": "object"
      },
      "TableRowID": {
        "description": "ID of the Resource",
        "type": "string",
        "example": "table_12345678-1234-1234-1234-1234567890ab"
      },
      "TableRow": {
        "additionalProperties": true,
        "title": "TableRow",
        "type": "object"
      },
      "TableRowFieldMatch": {
        "type": "object",
        "title": "TableRowFieldMatch",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "start_index": {
            "type": "integer",
            "format": "int64"
          },
          "end_index": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "TableSchemaColumnKind": {
        "description": "The kind of the schema column type",
        "type": "string",
        "enum": [
          "any",
          "array",
          "bool",
          "date",
          "datetime",
          "enum",
          "map",
          "number",
          "string",
          "tuple",
          "unknown",
          "uuid"
        ]
      },
      "TableSchemaColumn": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "example": "column_name",
            "description": "Column name"
          },
          "type": {
            "type": "string",
            "example": "Nullable(String)",
            "description": "Column type"
          },
          "default_kind": {
            "type": "string",
            "description": "Expression type (DEFAULT, MATERIALIZED, ALIAS) for the default value, or an empty string if it is not defined.",
            "example": "DEFAULT"
          },
          "default_expression": {
            "type": "string",
            "description": "Expression for the default value, or an empty string if it is not defined."
          },
          "comment": {
            "type": "string",
            "description": "Comment on the column, or an empty string if it is not defined."
          },
          "kind": {
            "$ref": "#/components/schemas/TableSchemaColumnKind"
          },
          "nullable": {
            "type": "boolean",
            "description": "Whether the column is nullable."
          }
        },
        "required": [
          "name",
          "type",
          "default_kind",
          "default_expression",
          "comment",
          "kind",
          "nullable"
        ],
        "title": "TableSchemaColumn",
        "type": "object"
      },
      "TableSchema": {
        "items": {
          "$ref": "#/components/schemas/TableSchemaColumn"
        },
        "title": "TableSchema",
        "type": "array"
      },
      "BatchTableSchemaItem": {
        "title": "BatchTableSchemaItem",
        "type": "object",
        "required": [
          "table_name",
          "schema",
          "default_columns"
        ],
        "properties": {
          "table_name": {
            "type": "string",
            "description": "Table name"
          },
          "schema": {
            "$ref": "#/components/schemas/TableSchema"
          },
          "default_columns": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Column name"
            }
          }
        }
      },
      "TableColumnName": {
        "description": "The name of the table column.",
        "type": "string",
        "example": "region"
      },
      "TableColumnListItem": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/TableColumnName"
          },
          "kind": {
            "$ref": "#/components/schemas/TableSchemaColumnKind"
          },
          "nullable": {
            "type": "boolean",
            "description": "Whether the column is nullable."
          }
        },
        "required": [
          "name",
          "kind",
          "nullable"
        ],
        "title": "TableColumnListItem",
        "type": "object"
      },
      "TableColumnValueListItem": {
        "additionalProperties": false,
        "properties": {
          "value": {
            "type": "string"
          },
          "kind": {
            "$ref": "#/components/schemas/TableSchemaColumnKind"
          }
        },
        "required": [
          "name",
          "kind"
        ],
        "title": "TableColumnValueListItem",
        "type": "object"
      },
      "FilterCreate": {
        "title": "Filter definition for creating a filter",
        "type": "object",
        "description": "Saved filter",
        "additionalProperties": false,
        "required": [
          "name",
          "expression"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "t2.micro EC2 instances"
          },
          "expression": {
            "$ref": "#/components/schemas/FilterExpression"
          },
          "public": {
            "type": "boolean",
            "default": true,
            "x-omitempty": false,
            "x-go-type-skip-optional-pointer": true,
            "description": "Whether the filter is visible to all users in the team, or only to the user who created it"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterTag"
            },
            "x-go-type-skip-optional-pointer": true
          },
          "description": {
            "type": "string",
            "example": "Filter to find all EC2 instances of type t2.micro from the aws_ec2_instance raw table"
          }
        }
      },
      "TableRelation": {
        "additionalProperties": false,
        "properties": {
          "table_name": {
            "type": "string",
            "example": "aws_ec2_images",
            "x-go-name": "Table"
          },
          "label": {
            "type": "string",
            "example": "EC2 Image"
          },
          "query": {
            "type": "string",
            "example": "SELECT aws_ec2_images.* FROM aws_ec2_instances JOIN aws_ec2_images ON aws_ec2_instances.image_id = aws_ec2_images.image_id"
          }
        },
        "required": [
          "table_name",
          "label",
          "query"
        ],
        "title": "TableRelation",
        "type": "object"
      },
      "AlertState": {
        "type": "string",
        "enum": [
          "unknown",
          "pending",
          "inactive",
          "triggered"
        ]
      },
      "AlertSeverity": {
        "type": "string",
        "enum": [
          "low",
          "medium",
          "high"
        ]
      },
      "NotificationDestinationID": {
        "description": "The unique ID for the notification destination.",
        "type": "string",
        "format": "uuid",
        "x-go-name": "NotificationDestinationID"
      },
      "NotificationDestinationListItem": {
        "title": "Notification Destination List Item",
        "type": "object",
        "description": "Notification Destination List Item",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "enabled",
          "url",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/NotificationDestinationID"
          },
          "name": {
            "type": "string",
            "example": "Send to Slack"
          },
          "enabled": {
            "type": "boolean"
          },
          "url": {
            "type": "string",
            "example": "https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXX",
            "x-go-name": "URL"
          },
          "created_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "AlertDetail": {
        "title": "Alert Detail",
        "type": "object",
        "description": "An alert instance that can be triggered by a query including notification destinations for the alert",
        "additionalProperties": false,
        "required": [
          "id",
          "query_id",
          "enabled",
          "message",
          "severity",
          "state",
          "total_violations",
          "created_at",
          "updated_at",
          "notification_destinations"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the alert",
            "x-go-name": "ID"
          },
          "query_id": {
            "type": "string",
            "format": "uuid",
            "description": "Reference to the associated query",
            "x-go-name": "QueryID"
          },
          "enabled": {
            "type": "boolean",
            "description": "Indicates if the alert is enabled"
          },
          "message": {
            "type": "string",
            "description": "Alert message content"
          },
          "severity": {
            "$ref": "#/components/schemas/AlertSeverity"
          },
          "state": {
            "$ref": "#/components/schemas/AlertState"
          },
          "total_violations": {
            "type": "integer",
            "format": "int64",
            "description": "Number of violations that triggered the alert"
          },
          "last_evaluated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the alert was last evaluated"
          },
          "triggered_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the alert was triggered"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the alert was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the alert was last updated"
          },
          "notification_destinations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationDestinationListItem"
            },
            "description": "List of notification destinations this alert is configured to send to",
            "x-go-type-skip-optional-pointer": true,
            "allowEmptyValue": true,
            "explode": true
          }
        }
      },
      "AlertCreate": {
        "title": "Alert Create",
        "type": "object",
        "description": "Create an alert",
        "additionalProperties": false,
        "required": [
          "message",
          "severity",
          "enabled"
        ],
        "properties": {
          "message": {
            "type": "string",
            "example": "All resources need to be tagged"
          },
          "severity": {
            "$ref": "#/components/schemas/AlertSeverity"
          },
          "enabled": {
            "type": "boolean",
            "description": "Indicates if the alert is enabled"
          },
          "notification_destinations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationDestinationID"
            },
            "description": "List of notification destinations to send alerts to",
            "x-go-type-skip-optional-pointer": true,
            "allowEmptyValue": true,
            "explode": true
          }
        }
      },
      "NotificationDestinationTestResponse": {
        "title": "Notification Destination Test Response",
        "type": "object",
        "description": "Notification Destination Test Response",
        "additionalProperties": false,
        "required": [
          "is_success",
          "http_status",
          "http_status_code",
          "http_body",
          "http_headers"
        ],
        "properties": {
          "is_success": {
            "type": "boolean",
            "description": "Indicates if the test was successful"
          },
          "http_status_code": {
            "type": "integer",
            "description": "HTTP status code returned by the notification destination",
            "x-go-name": "HTTPStatusCode"
          },
          "http_status": {
            "type": "string",
            "description": "HTTP status message returned by the notification destination",
            "x-go-name": "HTTPStatus"
          },
          "http_body": {
            "type": "string",
            "description": "Body of the HTTP response from the notification destination",
            "x-go-name": "HTTPBody"
          },
          "http_headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Headers returned by the notification destination",
            "x-go-name": "HTTPHeaders"
          }
        }
      },
      "AlertTestResponse": {
        "title": "Alert Test Response",
        "type": "object",
        "description": "Alert Test Response",
        "additionalProperties": false,
        "required": [
          "destination_id",
          "response"
        ],
        "properties": {
          "destination_id": {
            "type": "string",
            "description": "The ID of the notification destination.",
            "x-go-name": "DestinationID"
          },
          "error": {
            "type": "string",
            "description": "An error message if the test failed, otherwise null."
          },
          "response": {
            "$ref": "#/components/schemas/NotificationDestinationTestResponse"
          }
        }
      },
      "APIKeyName": {
        "description": "Name of the API key",
        "type": "string",
        "example": "cli-api-key",
        "maxLength": 255,
        "minLength": 1,
        "pattern": "^(?:[a-zA-Z0-9][a-zA-Z0-9- ]*)?[a-zA-Z0-9]$",
        "x-pattern-message": "can contain only letters, numbers, spaces, and hyphens, starting and ending with a letter or number"
      },
      "APIKeyID": {
        "description": "ID of the API key",
        "type": "string",
        "format": "uuid",
        "example": "12345678-1234-1234-1234-1234567890ab",
        "x-go-name": "APIKeyID"
      },
      "APIKeyRole": {
        "type": "string",
        "enum": [
          "admin:write",
          "admin:read",
          "general:read",
          "general:write",
          "ci"
        ]
      },
      "APIKeyTeamRole": {
        "type": "object",
        "required": [
          "role"
        ],
        "properties": {
          "team": {
            "$ref": "#/components/schemas/TeamName"
          },
          "role": {
            "$ref": "#/components/schemas/APIKeyRole"
          }
        }
      },
      "APIKey": {
        "description": "API Key to interact with CloudQuery Cloud under specific team",
        "type": "object",
        "required": [
          "id",
          "name",
          "expires_at",
          "expired",
          "roles"
        ],
        "properties": {
          "name": {
            "$ref": "#/components/schemas/APIKeyName"
          },
          "created_by": {
            "type": "string",
            "example": "user@example.com",
            "description": "email of the user that created the API key"
          },
          "id": {
            "$ref": "#/components/schemas/APIKeyID"
          },
          "key": {
            "type": "string",
            "description": "API key. Will be shown only in the response when creating the key.",
            "example": "1234567890abcdef1234567890abcdef"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2017-07-14T16:53:42Z"
          },
          "expires_at": {
            "type": "string",
            "description": "Timestamp at which API key will stop working",
            "format": "date-time",
            "example": "2017-07-14T16:53:42Z"
          },
          "last_access_at": {
            "type": "string",
            "format": "date-time",
            "example": "2017-07-14T16:53:42Z",
            "description": "Timestamp at which API key was last used - accurate to the day only."
          },
          "expired": {
            "type": "boolean",
            "description": "Whether the API key has expired or not",
            "example": false
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/APIKeyTeamRole"
            }
          }
        }
      },
      "ConnectorStatus": {
        "description": "The status of the connector",
        "type": "string",
        "enum": [
          "created",
          "authenticated",
          "failed",
          "revoked"
        ]
      },
      "Connector": {
        "description": "Connector definition",
        "type": "object",
        "required": [
          "id",
          "type",
          "created_at",
          "name",
          "status"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "12345678-1234-1234-1234-1234567890ab",
            "description": "unique ID of the connector",
            "x-go-name": "ID"
          },
          "type": {
            "description": "Type of the connector",
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the connector"
          },
          "status": {
            "$ref": "#/components/schemas/ConnectorStatus",
            "description": "Status of the connector"
          },
          "created_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string",
            "description": "Time the connector was created"
          }
        }
      },
      "ConnectorCreate": {
        "description": "Connector creation request",
        "type": "object",
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "type": {
            "description": "Type of the connector",
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the connector"
          }
        }
      },
      "ConnectorID": {
        "description": "ID of the Connector",
        "type": "string",
        "format": "uuid",
        "example": "12345678-1234-1234-1234-1234567890ab",
        "x-go-name": "ConnectorID"
      },
      "ConnectorUpdate": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the connector"
          }
        },
        "type": "object"
      },
      "SyncEnvCreate": {
        "type": "object",
        "description": "Environment variable. Environment variables are assumed to be secret.",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the environment variable"
          },
          "value": {
            "type": "string",
            "description": "Value of the environment variable"
          }
        }
      },
      "ConnectorAuthRequestAWS": {
        "type": "object",
        "description": "AWS connector authentication request to start the authentication process",
        "additionalProperties": false,
        "required": [
          "plugin_team",
          "plugin_kind",
          "plugin_name"
        ],
        "properties": {
          "plugin_team": {
            "type": "string",
            "description": "Team that owns the plugin we are authenticating the connector for",
            "example": "cloudquery"
          },
          "plugin_kind": {
            "type": "string",
            "description": "Kind of the plugin",
            "example": "source"
          },
          "plugin_name": {
            "type": "string",
            "description": "Name of the plugin",
            "example": "aws"
          },
          "plugin_version": {
            "type": "string",
            "description": "Version of the plugin",
            "example": "v27.1.0"
          },
          "spec": {
            "type": "object",
            "additionalProperties": true,
            "format": "Plugin parameters, specific to each plugin"
          },
          "env": {
            "description": "Environment variables used in the spec.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SyncEnvCreate"
            }
          },
          "tables": {
            "type": "array",
            "description": "Tables to authenticate, setting from the outer spec",
            "items": {
              "type": "string",
              "example": "aws_s3_buckets"
            }
          },
          "skip_tables": {
            "type": "array",
            "description": "Tables to skip authentication, setting from the outer spec",
            "items": {
              "type": "string",
              "example": "aws_s3_buckets"
            }
          },
          "skip_dependent_tables": {
            "type": "boolean",
            "description": "Whether to skip dependent tables, setting from the outer spec"
          }
        }
      },
      "ConnectorAuthResponseAWS": {
        "additionalProperties": false,
        "required": [
          "redirect_url",
          "role_template_url",
          "suggested_external_id",
          "suggested_policy_arns"
        ],
        "properties": {
          "redirect_url": {
            "type": "string",
            "description": "URL to redirect the user to, to authenticate",
            "x-go-name": "RedirectURL"
          },
          "role_template_url": {
            "type": "string",
            "description": "URL to the role template, to present to the user",
            "x-go-name": "RoleTemplateURL"
          },
          "suggested_external_id": {
            "type": "string",
            "description": "External ID suggested to enter into the role definition",
            "x-go-name": "SuggestedExternalID"
          },
          "suggested_policy_arns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of AWS policy ARNs suggested to grant inside the role definition",
            "x-go-name": "SuggestedPolicyARNs"
          }
        },
        "type": "object",
        "description": "AWS connector authentication response to start the authentication process"
      },
      "ConnectorAuthFinishRequestAWS": {
        "additionalProperties": false,
        "required": [
          "role_arn"
        ],
        "properties": {
          "role_arn": {
            "type": "string",
            "description": "ARN of role created by the user",
            "x-go-name": "RoleARN"
          },
          "external_id": {
            "type": "string",
            "description": "External ID in the role definition. Optional. If not provided the previously suggested external ID will be used. Empty string will remove the external ID.",
            "x-go-name": "ExternalID"
          }
        },
        "type": "object",
        "description": "AWS connector authentication request, filled in after the user has authenticated through AWS"
      },
      "ConnectorAuthRequestGCP": {
        "type": "object",
        "description": "GCP connector authentication request to start the authentication process",
        "additionalProperties": false,
        "required": [
          "plugin_team",
          "plugin_kind",
          "plugin_name"
        ],
        "properties": {
          "plugin_team": {
            "type": "string",
            "description": "Team that owns the plugin we are authenticating the connector for",
            "example": "cloudquery"
          },
          "plugin_kind": {
            "type": "string",
            "description": "Kind of the plugin",
            "example": "source"
          },
          "plugin_name": {
            "type": "string",
            "description": "Name of the plugin",
            "example": "aws"
          }
        }
      },
      "ConnectorAuthResponseGCP": {
        "additionalProperties": false,
        "required": [
          "service_account"
        ],
        "properties": {
          "service_account": {
            "type": "string",
            "description": "CloudQuery GCP Service Account to grant access to"
          }
        },
        "type": "object",
        "description": "GCP connector authentication response to start the authentication process"
      },
      "ConnectorAuthRequestOAuth": {
        "type": "object",
        "description": "OAuth connector authentication request to start the authentication process",
        "additionalProperties": false,
        "required": [
          "plugin_team",
          "plugin_kind",
          "plugin_name",
          "base_url"
        ],
        "properties": {
          "plugin_team": {
            "type": "string",
            "description": "Team that owns the plugin we are authenticating the connector for",
            "example": "cloudquery"
          },
          "plugin_kind": {
            "type": "string",
            "description": "Kind of the plugin",
            "example": "source"
          },
          "plugin_name": {
            "type": "string",
            "description": "Name of the plugin",
            "example": "googleanalytics"
          },
          "plugin_version": {
            "type": "string",
            "description": "Version of the plugin",
            "example": "v3.0.0"
          },
          "base_url": {
            "type": "string",
            "description": "Base of the URL the callback url will be constructed from",
            "example": "https://cloud.cloudquery.io/oauth",
            "x-go-name": "BaseURL"
          },
          "spec": {
            "type": "object",
            "additionalProperties": true,
            "format": "Plugin parameters, specific to each plugin"
          },
          "env": {
            "description": "Environment variables used in the spec.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SyncEnvCreate"
            }
          },
          "tables": {
            "type": "array",
            "description": "Tables to authenticate, setting from the outer spec",
            "items": {
              "type": "string",
              "example": "github_organizations"
            }
          },
          "skip_tables": {
            "type": "array",
            "description": "Tables to skip authentication, setting from the outer spec",
            "items": {
              "type": "string",
              "example": "github_organizations"
            }
          },
          "skip_dependent_tables": {
            "type": "boolean",
            "description": "Whether to skip dependent tables, setting from the outer spec"
          },
          "flavor": {
            "type": "string",
            "description": "Override default flavor"
          }
        }
      },
      "ConnectorAuthResponseOAuth": {
        "additionalProperties": false,
        "required": [
          "redirect_url"
        ],
        "properties": {
          "redirect_url": {
            "type": "string",
            "description": "URL to redirect the user to, to authenticate",
            "x-go-name": "RedirectURL"
          }
        },
        "type": "object",
        "description": "OAuth connector authentication response to start the authentication process"
      },
      "ConnectorAuthFinishRequestOAuth": {
        "additionalProperties": false,
        "required": [
          "return_url",
          "base_url"
        ],
        "properties": {
          "return_url": {
            "type": "string",
            "description": "URL the user was redirected to (including new parameter values) after the OAuth flow is complete",
            "x-go-name": "ReturnURL"
          },
          "base_url": {
            "type": "string",
            "description": "Base of the URL the callback url was constructed from",
            "example": "https://cloud.cloudquery.io/oauth",
            "x-go-name": "BaseURL"
          },
          "spec": {
            "type": "object",
            "additionalProperties": true,
            "format": "Plugin parameters, specific to each plugin"
          },
          "env": {
            "description": "Environment variables used in the spec.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SyncEnvCreate"
            }
          }
        },
        "type": "object",
        "description": "OAuth connector authentication request, filled in after the user has authenticated through OAuth"
      },
      "CustomColumnSortBy": {
        "title": "CustomColumnSortBy",
        "type": "string",
        "enum": [
          "id",
          "description",
          "table_name",
          "column_name",
          "label",
          "column_type",
          "value_type",
          "value_expr",
          "created_by",
          "team_name",
          "created_at",
          "updated_at"
        ]
      },
      "CustomColumnSortDirection": {
        "title": "CustomColumnSortDirection",
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ],
        "default": "asc"
      },
      "CustomColumnID": {
        "description": "The unique ID for the custom column.",
        "type": "string",
        "format": "uuid",
        "x-go-name": "CustomColumnID"
      },
      "CustomColumnColumnType": {
        "type": "string",
        "enum": [
          "String",
          "Integer",
          "Float",
          "Boolean",
          "DateTime"
        ]
      },
      "CustomColumnValueType": {
        "type": "string",
        "enum": [
          "expression",
          "external"
        ]
      },
      "CreatedBy": {
        "type": "object",
        "required": [
          "id",
          "name",
          "email"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UserID"
          },
          "name": {
            "$ref": "#/components/schemas/UserName"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "CustomColumn": {
        "title": "Custom Column",
        "type": "object",
        "description": "A custom column that is configured manually by the user.",
        "additionalProperties": false,
        "required": [
          "id",
          "table_name",
          "column_name",
          "label",
          "value_type",
          "created_by",
          "created_at",
          "team_name"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/CustomColumnID"
          },
          "description": {
            "type": "string"
          },
          "table_name": {
            "type": "string",
            "example": "cloud_assets",
            "description": "Table this column applies to."
          },
          "column_name": {
            "type": "string",
            "example": "environment"
          },
          "label": {
            "type": "string",
            "example": "Environment name"
          },
          "column_type": {
            "description": "Data type of the column. Only needed for value_type=external.",
            "$ref": "#/components/schemas/CustomColumnColumnType"
          },
          "value_type": {
            "$ref": "#/components/schemas/CustomColumnValueType"
          },
          "value_expr": {
            "description": "Value expression.\nFor value_type=expression, this is the actual SQL query.\nFor value_type=external this is the default value.\n",
            "type": "string"
          },
          "created_by": {
            "$ref": "#/components/schemas/CreatedBy"
          },
          "created_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string"
          },
          "team_name": {
            "$ref": "#/components/schemas/TeamName"
          }
        }
      },
      "CustomColumnCreateOrUpdate": {
        "title": "Custom Column Create or Update",
        "type": "object",
        "description": "Create or update a custom column",
        "additionalProperties": false,
        "required": [
          "table_name",
          "column_name",
          "label",
          "value_type"
        ],
        "properties": {
          "description": {
            "type": "string"
          },
          "table_name": {
            "type": "string",
            "example": "cloud_assets",
            "description": "Table this column applies to."
          },
          "column_name": {
            "type": "string",
            "example": "environment"
          },
          "label": {
            "type": "string",
            "example": "Environment name"
          },
          "column_type": {
            "description": "Data type of the column. Only needed for value_type=external.",
            "$ref": "#/components/schemas/CustomColumnColumnType"
          },
          "value_type": {
            "$ref": "#/components/schemas/CustomColumnValueType"
          },
          "value_expr": {
            "description": "Value expression.\nFor value_type=expression, this is the actual SQL query.\nFor value_type=external this is the default value.\n",
            "type": "string"
          }
        }
      },
      "CustomColumnDataImport": {
        "title": "Custom Column Data Import",
        "type": "object",
        "description": "Import data into the specified custom column",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "Filter selecting assets, and value which should be assigned to matches.",
              "description": "Asset Filter and corresponding value assignment",
              "additionalProperties": true
            }
          }
        }
      },
      "CustomColumnDataImportAccepted": {
        "type": "object",
        "required": [
          "id",
          "created_at"
        ],
        "properties": {
          "created_at": {
            "description": "The time the data import was created",
            "type": "string",
            "format": "date-time",
            "example": "2020-01-01T00:00:00Z"
          }
        }
      },
      "CustomColumnDataValues": {
        "title": "Custom Column Data Values",
        "type": "object",
        "description": "Edit one or more values within the specified custom column",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "The cq_id of the row and the value to set.",
              "description": "CQ_ID and corresponding value assignment",
              "additionalProperties": true
            }
          }
        }
      },
      "ContentType": {
        "description": "The HTTP Content-Type of the image or asset",
        "type": "string",
        "example": "image/png",
        "enum": [
          "image/jpeg",
          "image/png",
          "image/webp"
        ]
      },
      "TeamImageCreate": {
        "type": "object",
        "title": "Create Team Image Request",
        "additionalProperties": false,
        "required": [
          "name",
          "checksum",
          "content_type"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "description": "Name of image"
          },
          "checksum": {
            "type": "string",
            "minLength": 40,
            "maxLength": 40,
            "pattern": "^[a-f0-9]+$",
            "description": "SHA1 checksum of image",
            "x-pattern-message": "can contain only lowercase hexadecimal characters"
          },
          "content_type": {
            "$ref": "#/components/schemas/ContentType"
          }
        }
      },
      "TeamImage": {
        "required": [
          "url",
          "name",
          "checksum",
          "required_headers"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of image"
          },
          "checksum": {
            "type": "string",
            "description": "SHA1 checksum of image"
          },
          "url": {
            "type": "string",
            "description": "URL to download image",
            "x-go-name": "URL"
          },
          "upload_url": {
            "type": "string",
            "description": "URL to upload image",
            "x-go-name": "UploadURL"
          },
          "required_headers": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Required HTTP headers to include for the upload"
          }
        }
      },
      "Email": {
        "type": "string",
        "example": "user@example.com",
        "format": "email"
      },
      "Invitation": {
        "additionalProperties": false,
        "required": [
          "role",
          "email",
          "team_name",
          "created_at"
        ],
        "properties": {
          "team_name": {
            "$ref": "#/components/schemas/TeamName"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "role": {
            "type": "string",
            "example": "admin"
          },
          "created_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "MembershipWithTeam": {
        "additionalProperties": false,
        "properties": {
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "admin:read"
            }
          },
          "team": {
            "$ref": "#/components/schemas/Team"
          }
        },
        "required": [
          "roles",
          "team"
        ],
        "title": "CloudQuery Team Membership",
        "type": "object"
      },
      "NotificationDestinationData": {
        "title": "Notification Destination Data",
        "type": "object",
        "description": "Notification Destination Data",
        "required": [
          "url"
        ],
        "properties": {
          "url": {
            "type": "string",
            "example": "https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX",
            "x-go-name": "URL"
          },
          "http_headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "HTTPHeaders",
            "x-go-type-skip-optional-pointer": true
          },
          "http_body": {
            "type": "string",
            "example": "{\"text\": \"Alert: {{alert.name}}\"}",
            "x-go-name": "HTTPBody"
          }
        }
      },
      "NotificationDestinationCreate": {
        "title": "Create Notification Destination",
        "type": "object",
        "description": "Create Notification Destination",
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationDestinationData"
          },
          {
            "type": "object",
            "required": [
              "name",
              "enabled"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "Send to Slack"
              },
              "enabled": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "NotificationDestination": {
        "title": "Notification Destination",
        "type": "object",
        "description": "Notification Destination",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "enabled",
          "url",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/NotificationDestinationID"
          },
          "name": {
            "type": "string",
            "example": "Send to Slack"
          },
          "enabled": {
            "type": "boolean"
          },
          "url": {
            "type": "string",
            "example": "https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX",
            "x-go-name": "URL"
          },
          "http_headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "HTTPHeaders",
            "x-go-type-skip-optional-pointer": true
          },
          "http_body": {
            "type": "string",
            "example": "{\"text\": \"Alert: {{alert.name}}\"}",
            "x-go-name": "HTTPBody"
          },
          "created_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "NotificationDestinationUpdate": {
        "title": "Update Notification Destination",
        "type": "object",
        "description": "Update Notification Destination",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "example": "Send to Slack"
          },
          "enabled": {
            "type": "boolean"
          },
          "url": {
            "type": "string",
            "example": "https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX",
            "x-go-name": "URL"
          },
          "http_headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "HTTPHeaders"
          },
          "http_body": {
            "type": "string",
            "example": "{\"text\": \"Alert: {{alert.name}}\"}",
            "x-go-name": "HTTPBody"
          }
        }
      },
      "OnboardingID": {
        "description": "ID of the cloud provider onboarding session",
        "type": "string",
        "format": "uuid",
        "example": "12345678-1234-1234-1234-1234567890ab",
        "x-go-name": "OnboardingID"
      },
      "OnboardingAWSCreateResponse": {
        "type": "object",
        "description": "AWS OpenID onboarding",
        "additionalProperties": false,
        "required": [
          "id",
          "issuer_url",
          "audience",
          "subject",
          "template_url",
          "notify_path",
          "notify_token"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/OnboardingID"
          },
          "region": {
            "type": "string",
            "description": "An AWS region (such as 'us-east-1') where stack is deployed"
          },
          "stack_name": {
            "type": "string",
            "description": "Stack name that should be used",
            "maxLength": 128
          },
          "issuer_url": {
            "type": "string",
            "description": "URL of the OpenID server to use when setting up a trust relationship",
            "x-go-name": "IssuerURL"
          },
          "audience": {
            "type": "string",
            "description": "OpenID audience claim for the trust realshionship",
            "x-go-name": "Audience"
          },
          "subject": {
            "type": "string",
            "description": "OpenID subject claim for the trust relationship",
            "x-go-name": "Subject"
          },
          "notify_path": {
            "type": "string",
            "description": "Path of the notify endpoint to use for status updates",
            "x-go-name": "NotifyPath"
          },
          "template_url": {
            "type": "string",
            "description": "URL of the CloudFormation template to use for the authentication",
            "x-go-name": "TemplateURL"
          },
          "notify_token": {
            "type": "string",
            "description": "An authentication token that should be used for notifications"
          }
        }
      },
      "OnboardingAWS": {
        "type": "object",
        "description": "AWS OpenID onboarding",
        "additionalProperties": false,
        "required": [
          "id",
          "stage",
          "created_at",
          "updated_at",
          "issuer_url",
          "audience",
          "subject"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/OnboardingID"
          },
          "stage": {
            "type": "string",
            "description": "Stage of the onboarding process",
            "x-go-name": "OnboardingStage"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2017-07-14T16:53:42Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2017-07-14T16:53:42Z"
          },
          "issuer_url": {
            "type": "string",
            "description": "URL of the OpenID server to use when setting up a trust relationship",
            "x-go-name": "IssuerURL"
          },
          "audience": {
            "type": "string",
            "description": "OpenID audience claim for the trust realshionship",
            "x-go-name": "Audience"
          },
          "subject": {
            "type": "string",
            "description": "OpenID subject claim for the trust relationship",
            "x-go-name": "Subject"
          },
          "management_role_arn": {
            "type": "string",
            "description": "Role used to manage the platform onboarding",
            "x-go-name": "ManagementRoleARN"
          },
          "failure_reason": {
            "type": "string",
            "description": "CloudFormation stack errors",
            "x-go-name": "FailureReason"
          },
          "sync_role_name": {
            "type": "string",
            "x-go-name": "SyncRoleName",
            "description": "(organization mode) The name of the sync role used to sync a specific account within the organization.\nNote: This is the role name only, not the full ARN.\n"
          },
          "organizational_units": {
            "type": "array",
            "x-go-name": "OrganizationalUnitIDs",
            "description": "(organization mode) A list of Organizational Unit (OU) IDs included in this onboarding.\n",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BaseNotification": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "type": "string"
          }
        }
      },
      "StartedNotification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseNotification"
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "enum": [
                  "started"
                ]
              }
            }
          }
        ]
      },
      "RevokedNotification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseNotification"
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "enum": [
                  "revoked"
                ]
              }
            }
          }
        ]
      },
      "FailedNotification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseNotification"
          },
          {
            "type": "object",
            "required": [
              "reason"
            ],
            "properties": {
              "status": {
                "enum": [
                  "failed"
                ]
              },
              "reason": {
                "type": "string"
              }
            }
          }
        ]
      },
      "DeployedNotification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseNotification"
          },
          {
            "type": "object",
            "required": [
              "management_role_arn",
              "deployment_mode",
              "stack_id"
            ],
            "properties": {
              "status": {
                "enum": [
                  "deployed"
                ]
              },
              "management_role_arn": {
                "type": "string"
              },
              "deployment_mode": {
                "type": "string"
              },
              "stack_id": {
                "type": "string"
              }
            }
          }
        ]
      },
      "CompletedNotification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseNotification"
          },
          {
            "type": "object",
            "required": [
              "admin_role_arn",
              "sync_role_name",
              "organizational_units",
              "skipped_accounts"
            ],
            "properties": {
              "status": {
                "enum": [
                  "completed"
                ]
              },
              "admin_role_arn": {
                "type": "string"
              },
              "sync_role_name": {
                "type": "string"
              },
              "organizational_units": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "skipped_accounts": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "failed_accounts": {
                "type": "number"
              },
              "additional_stack_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "CompletedSingleAccountNotification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseNotification"
          },
          {
            "type": "object",
            "required": [
              "sync_role_arn",
              "stack_id"
            ],
            "properties": {
              "status": {
                "enum": [
                  "completed_account"
                ]
              },
              "sync_role_arn": {
                "type": "string"
              },
              "stack_id": {
                "type": "string"
              }
            }
          }
        ]
      },
      "OnboardingAWSNotification": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/StartedNotification"
          },
          {
            "$ref": "#/components/schemas/RevokedNotification"
          },
          {
            "$ref": "#/components/schemas/FailedNotification"
          },
          {
            "$ref": "#/components/schemas/DeployedNotification"
          },
          {
            "$ref": "#/components/schemas/CompletedNotification"
          },
          {
            "$ref": "#/components/schemas/CompletedSingleAccountNotification"
          }
        ],
        "discriminator": {
          "propertyName": "status",
          "mapping": {
            "started": "#/components/schemas/StartedNotification",
            "revoked": "#/components/schemas/RevokedNotification",
            "failed": "#/components/schemas/FailedNotification",
            "deployed": "#/components/schemas/DeployedNotification",
            "completed": "#/components/schemas/CompletedNotification",
            "completed_account": "#/components/schemas/CompletedSingleAccountNotification"
          }
        }
      },
      "OnboardingAWSAccounts": {
        "type": "object",
        "description": "AWS OpenID onboarding account structure",
        "additionalProperties": false,
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the account or OU",
            "x-go-name": "ID"
          },
          "arn": {
            "type": "string",
            "description": "ARN of the account or OU",
            "x-go-name": "ARN"
          },
          "type": {
            "type": "string",
            "description": "Type of the account",
            "enum": [
              "OU",
              "account",
              "root"
            ]
          },
          "name": {
            "type": "string",
            "description": "Display name of the account or OU"
          },
          "children": {
            "type": "array",
            "description": "Children accounts and OUs of the target account",
            "items": {
              "$ref": "#/components/schemas/OnboardingAWSAccounts"
            }
          }
        }
      },
      "OrganizationalUnitID": {
        "description": "ID of an organizational unit in AWS",
        "type": "string",
        "example": "ou-7f3s-j8zfa1ao",
        "pattern": "^ou-[a-z0-9]{4,32}-[a-z0-9]{8,32}$",
        "x-pattern-message": "must start with \"ou-\" followed by 4 to 32 lowercase letters or digits, then a second \"-\" dash, and finally 8 to 32 additional lowercase letters or digits",
        "x-go-name": "OrganizationalUnitID"
      },
      "OnboardingAWSProvision": {
        "type": "object",
        "description": "Stackset provisioning configuration",
        "required": [
          "notify_url",
          "organizational_units"
        ],
        "properties": {
          "notify_url": {
            "type": "string",
            "description": "URL that should be used for provisioning notifications (including scheme, hostname, and path)"
          },
          "organizational_units": {
            "type": "array",
            "description": "OUs to provision roles into",
            "items": {
              "type": "string",
              "pattern": "^(r-[0-9a-z]{4,32}|ou-[a-z0-9]{4,32}-[a-z0-9]{8,32})$",
              "example": "r-xvfz",
              "x-pattern-message": "must start with either \"r-\" followed by 4 to 32 lowercase letters or digits,  or \"ou-\" followed by 4 to 32 lowercase letters or digits, a hyphen, and then  8 to 32 lowercase letters or digits, with no additional characters before or after."
            }
          },
          "skip_accounts": {
            "type": "array",
            "description": "Account IDs to skip onboarding",
            "items": {
              "description": "ID of an account in AWS",
              "type": "string",
              "example": "615713231484",
              "pattern": "^\\d{12}$",
              "x-pattern-message": "account ID must be exactly 12 digits"
            }
          }
        }
      },
      "PlatformPolicySortBy": {
        "title": "PlatformPolicySortBy",
        "type": "string",
        "enum": [
          "id",
          "name",
          "description",
          "status",
          "filter_id",
          "evaluated_resources",
          "rule_violations",
          "created_by",
          "created_at",
          "updated_at"
        ]
      },
      "PlatformPolicySortDirection": {
        "title": "CustomColumnSortDirection",
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ],
        "default": "asc"
      },
      "PlatformPolicy": {
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "status",
          "framework_ids",
          "resource_categories"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "paused",
              "active"
            ]
          },
          "framework_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "x-go-name": "FrameworkIDs"
          },
          "filter_id": {
            "type": "string",
            "x-go-name": "FilterID"
          },
          "evaluated_resources": {
            "type": "integer"
          },
          "rule_violations": {
            "type": "integer"
          },
          "created_by": {
            "type": "string",
            "description": "Deprecated: Use created_by2 instead"
          },
          "created_by2": {
            "$ref": "#/components/schemas/CreatedBy"
          },
          "updated_by": {
            "$ref": "#/components/schemas/CreatedBy"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "PlatformCreateOrUpdatePolicy": {
        "type": "object",
        "required": [
          "name",
          "description",
          "framework_ids",
          "status"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "framework_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "x-go-name": "FrameworkIDs"
          },
          "filter_id": {
            "type": "string",
            "x-go-name": "FilterID"
          },
          "status": {
            "type": "string",
            "enum": [
              "paused",
              "active"
            ]
          }
        }
      },
      "PlatformPolicyFramework": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "ID"
          },
          "label": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "label"
        ]
      },
      "PlatformPolicyFrameworkSortBy": {
        "title": "PlatformPolicyFrameworkSortBy",
        "type": "string",
        "enum": [
          "id",
          "label",
          "description"
        ]
      },
      "PlatformPolicyRuleSortBy": {
        "title": "PlatformPolicyRuleSortBy",
        "type": "string",
        "enum": [
          "id",
          "framework_id",
          "name",
          "description",
          "risk",
          "category",
          "violations",
          "version"
        ]
      },
      "PlatformPolicyRule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "ID"
          },
          "framework_id": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "FrameworkID"
          },
          "framework_name": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "risk": {
            "type": "string",
            "enum": [
              "critical",
              "high",
              "medium",
              "low"
            ]
          },
          "category": {
            "type": "string"
          },
          "violations": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "remediation": {
            "type": "string"
          },
          "learn_more_link": {
            "type": "string"
          }
        }
      },
      "PlatformPolicyRuleDetailSortBy": {
        "title": "PlatformPolicyRuleDetailSortBy",
        "type": "string",
        "enum": [
          "name",
          "cloud",
          "account",
          "region",
          "tags"
        ]
      },
      "PlatformPolicyRuleDetail": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "account": {
            "type": "string"
          },
          "cloud": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlatformPolicyViolationHistory": {
        "type": "object",
        "required": [
          "id",
          "rule_violations",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "ID"
          },
          "rule_violations": {
            "type": "integer",
            "description": "Number of rule violations logged."
          },
          "created_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string",
            "description": "Time the rule violations were logged."
          }
        }
      },
      "QueryTag": {
        "description": "A saved query tag.",
        "type": "string"
      },
      "Alert": {
        "title": "Alert",
        "type": "object",
        "description": "An alert instance that can be triggered by a query",
        "additionalProperties": false,
        "required": [
          "id",
          "query_id",
          "enabled",
          "message",
          "severity",
          "state",
          "total_violations",
          "created_at",
          "updated_at",
          "num_destinations"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the alert",
            "x-go-name": "ID"
          },
          "query_id": {
            "type": "string",
            "format": "uuid",
            "description": "Reference to the associated query",
            "x-go-name": "QueryID"
          },
          "enabled": {
            "type": "boolean",
            "description": "Indicates if the alert is enabled"
          },
          "message": {
            "type": "string",
            "description": "Alert message content"
          },
          "severity": {
            "$ref": "#/components/schemas/AlertSeverity"
          },
          "state": {
            "$ref": "#/components/schemas/AlertState"
          },
          "total_violations": {
            "type": "integer",
            "format": "int64",
            "description": "Number of violations that triggered the alert"
          },
          "last_evaluated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the alert was last evaluated"
          },
          "triggered_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the alert was triggered"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the alert was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the alert was last updated"
          },
          "num_destinations": {
            "type": "integer",
            "description": "Number of notification destinations this alert is configured to send to"
          }
        }
      },
      "Query": {
        "title": "Query",
        "type": "object",
        "description": "Saved query",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "query",
          "created_at",
          "alert_configured"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/QueryID"
          },
          "name": {
            "type": "string",
            "example": "Find all t2.micro EC2 instances"
          },
          "query": {
            "$ref": "#/components/schemas/QueryExpression"
          },
          "description": {
            "type": "string",
            "example": "Query to find all EC2 instances of type t2.micro from the aws_ec2_instance raw table"
          },
          "user_id": {
            "$ref": "#/components/schemas/UserID"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryTag"
            },
            "x-go-type-skip-optional-pointer": true
          },
          "created_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string"
          },
          "alert_configured": {
            "type": "boolean",
            "description": "Indicates if the query has an alert configured"
          },
          "alert": {
            "$ref": "#/components/schemas/Alert"
          }
        }
      },
      "QueryCreate": {
        "title": "Query Create",
        "type": "object",
        "description": "Create a saved query",
        "additionalProperties": false,
        "required": [
          "name",
          "query"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Find all t2.micro EC2 instances"
          },
          "query": {
            "type": "string",
            "example": "SELECT account_id, instance_id, instance_type, region, name, tags FROM aws_ec2_instance WHERE instance_type = 't2.micro'"
          },
          "public": {
            "type": "boolean",
            "default": true,
            "x-omitempty": false,
            "x-go-type-skip-optional-pointer": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryTag"
            },
            "x-go-type-skip-optional-pointer": true
          },
          "description": {
            "type": "string",
            "example": "Query to find all EC2 instances of type t2.micro from the aws_ec2_instance raw table"
          },
          "alert": {
            "$ref": "#/components/schemas/AlertCreate"
          }
        }
      },
      "QueryDetail": {
        "title": "Query Detail",
        "type": "object",
        "description": "Query Detail",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "query",
          "created_at",
          "alert_configured"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/QueryID"
          },
          "name": {
            "type": "string",
            "example": "Find all t2.micro EC2 instances"
          },
          "query": {
            "$ref": "#/components/schemas/QueryExpression"
          },
          "description": {
            "type": "string",
            "example": "Query to find all EC2 instances of type t2.micro from the aws_ec2_instance raw table"
          },
          "user_id": {
            "$ref": "#/components/schemas/UserID"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryTag"
            },
            "x-go-type-skip-optional-pointer": true
          },
          "created_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string"
          },
          "alert_configured": {
            "type": "boolean",
            "description": "Indicates if the query has an alert configured. When this is set, the alert field will be populated with the alert details."
          },
          "alert": {
            "$ref": "#/components/schemas/AlertDetail"
          }
        }
      },
      "AlertUpdate": {
        "title": "Alert Update",
        "description": "Alert Update Definition",
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "All resources need to be tagged"
          },
          "severity": {
            "$ref": "#/components/schemas/AlertSeverity"
          },
          "enabled": {
            "type": "boolean",
            "description": "Indicates if the alert is enabled"
          },
          "notification_destinations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationDestinationID"
            },
            "description": "List of notification destinations to send alerts to",
            "allowEmptyValue": true,
            "explode": true
          }
        }
      },
      "QueryUpdate": {
        "title": "Query Update",
        "type": "object",
        "description": "Update a saved query",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "example": "Find all t2.micro EC2 instances"
          },
          "query": {
            "type": "string",
            "example": "SELECT account_id, instance_id, instance_type, region, name, tags FROM aws_ec2_instances WHERE instance_type = 't2.micro'"
          },
          "public": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryTag"
            }
          },
          "description": {
            "type": "string",
            "example": "Query to find all EC2 instances of type t2.micro from the aws_ec2_instances raw table"
          },
          "alert": {
            "$ref": "#/components/schemas/AlertUpdate"
          }
        }
      },
      "ReportSortBy": {
        "title": "ReportSortBy",
        "type": "string",
        "enum": [
          "id",
          "title",
          "description",
          "private",
          "created_at",
          "updated_at"
        ]
      },
      "ReportSortDirection": {
        "title": "ReportTemplateSortDirection",
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ],
        "default": "asc"
      },
      "Report": {
        "type": "object",
        "required": [
          "id",
          "title",
          "description",
          "content",
          "private"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "ID"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "content": {
            "description": "YAML body",
            "type": "string"
          },
          "private": {
            "type": "boolean"
          },
          "created_by": {
            "$ref": "#/components/schemas/CreatedBy"
          },
          "updated_by": {
            "$ref": "#/components/schemas/CreatedBy"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ReportCreateOrUpdate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "content": {
            "type": "string",
            "description": "YAML body"
          },
          "private": {
            "type": "boolean"
          },
          "template_id": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "TemplateID",
            "description": "Template ID, if report is being created from a template"
          }
        }
      },
      "ReportTemplateSortBy": {
        "title": "ReportTemplateSortBy",
        "type": "string",
        "enum": [
          "id",
          "title",
          "description",
          "visible",
          "created_at",
          "updated_at"
        ]
      },
      "ReportTemplateSortDirection": {
        "title": "ReportTemplateSortDirection",
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ],
        "default": "asc"
      },
      "ReportTemplate": {
        "type": "object",
        "required": [
          "id",
          "title",
          "description",
          "content",
          "visible"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "ID"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "content": {
            "description": "YAML body",
            "type": "string"
          },
          "visible": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ReportTemplateCreateOrUpdate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "content": {
            "type": "string",
            "description": "YAML body"
          },
          "visible": {
            "type": "boolean"
          }
        }
      },
      "SyncPluginPath": {
        "type": "string",
        "description": "Plugin path in CloudQuery registry",
        "pattern": "^cloudquery/[^/]+",
        "x-pattern-message": "should be in the format cloudquery/<name>"
      },
      "SyncDestinationWriteMode": {
        "type": "string",
        "description": "Write mode for the destination",
        "enum": [
          "append",
          "overwrite",
          "overwrite-delete-stale"
        ],
        "default": "overwrite-delete-stale"
      },
      "SyncDestinationMigrateMode": {
        "type": "string",
        "description": "Migrate mode for the destination",
        "enum": [
          "safe",
          "forced"
        ],
        "default": "safe"
      },
      "SyncDestinationTestConnectionCreate": {
        "title": "Sync Destination Test Connection creation definition",
        "type": "object",
        "required": [
          "path",
          "version"
        ],
        "properties": {
          "path": {
            "$ref": "#/components/schemas/SyncPluginPath",
            "example": "cloudquery/postgresql"
          },
          "destination_name": {
            "type": "string",
            "description": "Name of an existing destination"
          },
          "version": {
            "type": "string",
            "description": "Version of the plugin",
            "example": "v1.2.3"
          },
          "write_mode": {
            "$ref": "#/components/schemas/SyncDestinationWriteMode"
          },
          "migrate_mode": {
            "$ref": "#/components/schemas/SyncDestinationMigrateMode"
          },
          "sync_group_id": {
            "type": "string",
            "x-go-name": "SyncGroupID"
          },
          "spec": {
            "type": "object",
            "additionalProperties": true,
            "format": "Plugin parameters, specific to each plugin"
          },
          "env": {
            "description": "Environment variables for the plugin. All environment variables will be stored as secrets.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SyncEnvCreate"
            }
          },
          "connector_id": {
            "$ref": "#/components/schemas/ConnectorID",
            "description": "ID of the connector that will be used to authenticate the destination."
          }
        }
      },
      "SyncTestConnectionID": {
        "type": "string",
        "format": "uuid",
        "example": "12345678-1234-1234-1234-1234567890ab",
        "description": "unique ID of the test connection",
        "x-go-name": "ID"
      },
      "SyncTestConnectionStatus": {
        "description": "The status of the sync run",
        "type": "string",
        "enum": [
          "completed",
          "failed",
          "started",
          "created"
        ]
      },
      "SyncDestinationTestConnection": {
        "type": "object",
        "required": [
          "id",
          "created_at",
          "status"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/SyncTestConnectionID",
            "x-go-name": "ID"
          },
          "status": {
            "$ref": "#/components/schemas/SyncTestConnectionStatus",
            "description": "Status of the sync test connection"
          },
          "failure_reason": {
            "type": "string",
            "description": "Reason for failure",
            "example": "password authentication failed for user \"exampleuser\""
          },
          "failure_code": {
            "example": "INVALID_CREDENTIALS",
            "type": "string",
            "description": "Code for failure"
          },
          "created_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string",
            "description": "Time the test connection was created"
          },
          "completed_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string",
            "description": "Time the test connection was completed"
          },
          "plugin_path": {
            "$ref": "#/components/schemas/SyncPluginPath",
            "example": "cloudquery/postgresql"
          },
          "plugin_version": {
            "$ref": "#/components/schemas/VersionName",
            "description": "Version of the plugin"
          },
          "sync_group_id": {
            "type": "string",
            "x-go-name": "SyncGroupID"
          }
        }
      },
      "SyncDestinationTestConnectionID": {
        "description": "ID of the Sync Destination Test Connection",
        "type": "string",
        "format": "uuid",
        "example": "12345678-1234-1234-1234-1234567890ab",
        "x-go-name": "SyncDestinationTestConnectionID"
      },
      "DisplayName": {
        "description": "A human-readable display name",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[a-zA-Z\\p{L}\\p{N}_][a-zA-Z\\p{L}\\p{N}_ \\-'\\(\\)\\[\\]]*$",
        "x-pattern-message": "can contain only letters, numbers, spaces, hyphens, underscores, brackets and apostrophes",
        "type": "string",
        "example": "Human Readable Name"
      },
      "PromoteSyncDestinationTestConnection": {
        "title": "Sync Destination definition for creating a new source",
        "description": "Sync Destination Definition",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "my-destination-definition",
            "description": "Descriptive, unique name for the destination",
            "pattern": "^[a-zA-Z0-9_-]+$",
            "x-pattern-message": "can contain only alphanumerical characters, dashes, and underscores"
          },
          "display_name": {
            "$ref": "#/components/schemas/DisplayName"
          },
          "write_mode": {
            "$ref": "#/components/schemas/SyncDestinationWriteMode"
          },
          "migrate_mode": {
            "$ref": "#/components/schemas/SyncDestinationMigrateMode"
          },
          "send_sync_summary": {
            "type": "boolean"
          },
          "overwrite_destination": {
            "type": "boolean",
            "description": "Set this to allow overwriting an existing sync destination. Defaults to true to preserve compatibility."
          }
        }
      },
      "SyncLastUpdateSource": {
        "description": "How was the source or destination been created or updated last",
        "type": "string",
        "enum": [
          "yaml",
          "ui"
        ]
      },
      "SyncDestinationCreate": {
        "title": "Sync Destination definition for creating a new destination",
        "description": "Sync Destination Definition",
        "type": "object",
        "required": [
          "name",
          "path",
          "version"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "my-destination-definition",
            "description": "Descriptive, unique name for the destination",
            "pattern": "^[a-zA-Z0-9_-]+$",
            "x-pattern-message": "can contain only alphanumerical characters, dashes, and underscores"
          },
          "display_name": {
            "$ref": "#/components/schemas/DisplayName"
          },
          "path": {
            "$ref": "#/components/schemas/SyncPluginPath",
            "example": "cloudquery/postgresql"
          },
          "version": {
            "type": "string",
            "description": "Version of the plugin",
            "example": "v1.2.3"
          },
          "write_mode": {
            "$ref": "#/components/schemas/SyncDestinationWriteMode"
          },
          "migrate_mode": {
            "$ref": "#/components/schemas/SyncDestinationMigrateMode"
          },
          "sync_group_id": {
            "type": "string",
            "x-go-name": "SyncGroupID"
          },
          "send_sync_summary": {
            "type": "boolean"
          },
          "spec": {
            "type": "object",
            "additionalProperties": true,
            "format": "Plugin parameters, specific to each plugin"
          },
          "env": {
            "description": "Environment variables for the plugin. All environment variables will be stored as secrets.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SyncEnvCreate"
            }
          },
          "last_update_source": {
            "$ref": "#/components/schemas/SyncLastUpdateSource"
          },
          "connector_id": {
            "$ref": "#/components/schemas/ConnectorID",
            "description": "ID of the connector that will be used to authenticate the destination."
          },
          "transformers": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Unique name of the transformer",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "x-pattern-message": "can contain only alphanumerical characters, dashes, and underscores"
            }
          }
        }
      },
      "SyncEnv": {
        "type": "object",
        "description": "Environment variable. Environment variables are assumed to be secret.",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the environment variable"
          }
        }
      },
      "SyncDestination": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SyncDestinationCreate"
          },
          {
            "type": "object",
            "required": [
              "name",
              "display_name",
              "path",
              "version",
              "write_mode",
              "migrate_mode",
              "spec",
              "env",
              "created_at",
              "updated_at",
              "last_update_source",
              "draft",
              "transformers"
            ],
            "properties": {
              "created_at": {
                "type": "string",
                "format": "date-time",
                "example": "2023-07-14T16:53:42Z",
                "description": "Time when the source was created"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "example": "2023-07-14T16:53:42Z",
                "description": "Time when the source was last updated"
              },
              "env": {
                "description": "Environment variables for the plugin.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SyncEnv"
                }
              },
              "draft": {
                "type": "boolean",
                "description": "If a sync destination is in draft, it cannot be used in syncs. To get it out of draft, 'promote' it using a successful test connection ID."
              },
              "previous_version": {
                "type": "string",
                "description": "Previous version of the plugin during a version upgrade",
                "example": "v1.2.2"
              }
            }
          }
        ]
      },
      "SyncGenericSortBy": {
        "title": "SyncGenericSortBy",
        "type": "string",
        "enum": [
          "name",
          "display_name",
          "path",
          "version",
          "created_at",
          "updated_at",
          "draft"
        ]
      },
      "SyncSortDirection": {
        "title": "SyncSortDirection",
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ],
        "default": "asc"
      },
      "SyncDestinationWriteModeUpdate": {
        "type": "string",
        "description": "Write mode for the destination, for updating",
        "enum": [
          "append",
          "overwrite",
          "overwrite-delete-stale"
        ]
      },
      "SyncDestinationMigrateModeUpdate": {
        "type": "string",
        "description": "Migrate mode for the destination, for updating",
        "enum": [
          "safe",
          "forced"
        ]
      },
      "SyncDestinationUpdate": {
        "title": "Sync Destination definition for updating a destination",
        "description": "Sync Destination Update Definition",
        "type": "object",
        "properties": {
          "display_name": {
            "$ref": "#/components/schemas/DisplayName"
          },
          "write_mode": {
            "$ref": "#/components/schemas/SyncDestinationWriteModeUpdate"
          },
          "migrate_mode": {
            "$ref": "#/components/schemas/SyncDestinationMigrateModeUpdate"
          },
          "send_sync_summary": {
            "type": "boolean"
          },
          "last_update_source": {
            "$ref": "#/components/schemas/SyncLastUpdateSource"
          },
          "transformers": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Unique name of the transformer",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "x-pattern-message": "can contain only alphanumerical characters, dashes, and underscores"
            }
          }
        }
      },
      "SyncSortBy": {
        "title": "SyncSortBy",
        "type": "string",
        "enum": [
          "cpu",
          "created_at",
          "created_by",
          "destinations",
          "disabled",
          "display_name",
          "memory",
          "name",
          "schedule",
          "source",
          "updated_at",
          "last_run_created_at",
          "last_run_updated_at",
          "last_run_completed_at",
          "last_run_errors",
          "last_run_warnings",
          "last_run_total_rows",
          "last_run_status",
          "last_run_migration"
        ]
      },
      "Sync": {
        "description": "Managed Sync definition",
        "type": "object",
        "required": [
          "name",
          "display_name",
          "source",
          "destinations",
          "disabled",
          "schedule",
          "cpu",
          "memory",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Descriptive, unique name for the sync",
            "pattern": "^[a-zA-Z0-9_-]+$",
            "x-pattern-message": "can contain only alphanumerical characters, dashes, and underscores"
          },
          "display_name": {
            "$ref": "#/components/schemas/DisplayName"
          },
          "source": {
            "type": "string",
            "description": "Unique name of the source"
          },
          "destinations": {
            "type": "array",
            "description": "List of destinations for the sync",
            "items": {
              "type": "string",
              "description": "Unique name of the destination"
            }
          },
          "disabled": {
            "type": "boolean",
            "description": "Whether the sync is disabled"
          },
          "schedule": {
            "type": "string",
            "description": "Cron schedule for the sync"
          },
          "cpu": {
            "type": "string",
            "description": "CPU quota for the sync",
            "example": "1",
            "x-go-name": "CPU"
          },
          "memory": {
            "type": "string",
            "description": "Memory quota for the sync",
            "example": "2Gi"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the sync was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the sync was updated"
          },
          "created_by": {
            "type": "string"
          }
        }
      },
      "SyncRunStatus": {
        "description": "The status of the sync run",
        "type": "string",
        "enum": [
          "completed",
          "failed",
          "started",
          "cancelled",
          "created",
          "pending"
        ]
      },
      "SyncRunStatusReason": {
        "description": "The reason for the status",
        "type": "string",
        "enum": [
          "error",
          "oom_killed",
          "partial_success"
        ]
      },
      "ListSyncLastRun": {
        "description": "Managed Sync List Entry Last Run Info",
        "required": [
          "id",
          "status",
          "migration",
          "created_at",
          "total_rows",
          "warnings",
          "errors"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "12345678-1234-1234-1234-1234567890ab",
            "description": "unique ID of the run",
            "x-go-name": "ID"
          },
          "status": {
            "$ref": "#/components/schemas/SyncRunStatus",
            "description": "Status of the sync run"
          },
          "status_reason": {
            "$ref": "#/components/schemas/SyncRunStatusReason",
            "description": "Reason for the status of the sync run"
          },
          "migration": {
            "type": "boolean",
            "description": "Whether the sync run was a migration"
          },
          "created_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string",
            "description": "Time the sync run was created"
          },
          "completed_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string",
            "description": "Time the sync run was completed"
          },
          "total_rows": {
            "type": "integer",
            "format": "int64",
            "description": "Total number of rows in the sync"
          },
          "warnings": {
            "type": "integer",
            "format": "int64",
            "description": "Number of warnings encountered during the sync"
          },
          "errors": {
            "type": "integer",
            "format": "int64",
            "description": "Number of errors encountered during the sync"
          }
        }
      },
      "ListSync": {
        "description": "Managed Sync List Entry",
        "allOf": [
          {
            "$ref": "#/components/schemas/Sync"
          },
          {
            "type": "object",
            "properties": {
              "last_run": {
                "$ref": "#/components/schemas/ListSyncLastRun"
              }
            }
          }
        ]
      },
      "SyncTestConnection": {
        "type": "object",
        "required": [
          "id",
          "created_at",
          "status"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/SyncTestConnectionID",
            "x-go-name": "ID"
          },
          "status": {
            "$ref": "#/components/schemas/SyncTestConnectionStatus",
            "description": "Status of the sync test connection"
          },
          "failure_reason": {
            "type": "string",
            "description": "Reason for failure",
            "example": "password authentication failed for user \"exampleuser\""
          },
          "failure_code": {
            "example": "INVALID_CREDENTIALS",
            "type": "string",
            "description": "Code for failure"
          },
          "created_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string",
            "description": "Time the test connection was created"
          },
          "completed_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string",
            "description": "Time the test connection was completed"
          },
          "plugin_path": {
            "$ref": "#/components/schemas/SyncPluginPath",
            "example": "cloudquery/postgresql"
          },
          "plugin_version": {
            "$ref": "#/components/schemas/VersionName",
            "description": "Version of the plugin"
          },
          "plugin_kind": {
            "$ref": "#/components/schemas/PluginKind"
          }
        }
      },
      "SyncSourceTestConnectionCreate": {
        "title": "Sync Source Test Connection creation definition",
        "type": "object",
        "required": [
          "path",
          "version"
        ],
        "properties": {
          "path": {
            "$ref": "#/components/schemas/SyncPluginPath",
            "example": "cloudquery/postgresql"
          },
          "source_name": {
            "type": "string",
            "description": "Name of an existing source"
          },
          "version": {
            "type": "string",
            "description": "Version of the plugin",
            "example": "v1.2.3"
          },
          "spec": {
            "type": "object",
            "additionalProperties": true,
            "format": "Plugin parameters, specific to each plugin"
          },
          "env": {
            "description": "Environment variables for the plugin. All environment variables will be stored as secrets.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SyncEnvCreate"
            }
          },
          "connector_id": {
            "$ref": "#/components/schemas/ConnectorID",
            "description": "ID of the connector that will be used to authenticate the destination."
          },
          "onboarding_id": {
            "$ref": "#/components/schemas/OnboardingID",
            "description": "ID of the onboarding that will be used to authenticate the source."
          }
        }
      },
      "SyncSourceTestConnection": {
        "type": "object",
        "required": [
          "id",
          "created_at",
          "status"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/SyncTestConnectionID",
            "x-go-name": "ID"
          },
          "status": {
            "$ref": "#/components/schemas/SyncTestConnectionStatus",
            "description": "Status of the sync test connection"
          },
          "failure_reason": {
            "type": "string",
            "description": "Reason for failure",
            "example": "password authentication failed for user \"exampleuser\""
          },
          "failure_code": {
            "example": "INVALID_CREDENTIALS",
            "type": "string",
            "description": "Code for failure"
          },
          "created_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string",
            "description": "Time the test connection was created"
          },
          "completed_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string",
            "description": "Time the test connection was completed"
          },
          "plugin_path": {
            "$ref": "#/components/schemas/SyncPluginPath",
            "example": "cloudquery/postgresql"
          },
          "plugin_version": {
            "$ref": "#/components/schemas/VersionName",
            "description": "Version of the plugin"
          }
        }
      },
      "SyncSourceTestConnectionID": {
        "description": "ID of the Sync Source Test Connection",
        "type": "string",
        "format": "uuid",
        "example": "12345678-1234-1234-1234-1234567890ab",
        "x-go-name": "SyncSourceTestConnectionID"
      },
      "PromoteSyncSourceTestConnection": {
        "title": "Sync Source definition for creating a new source",
        "description": "Sync Source Definition",
        "type": "object",
        "required": [
          "name",
          "tables"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "my-source-definition",
            "description": "Descriptive, unique name for the source",
            "pattern": "^[a-zA-Z0-9_-]+$",
            "x-pattern-message": "can contain only alphanumerical characters, dashes, and underscores"
          },
          "display_name": {
            "$ref": "#/components/schemas/DisplayName"
          },
          "tables": {
            "type": "array",
            "description": "Tables to sync. Wildcards are supported. Note that child tables are excluded by default, and need to be explicitly specified.",
            "items": {
              "type": "string"
            }
          },
          "skip_tables": {
            "type": "array",
            "description": "Tables matched by `tables` that should be skipped. Wildcards are supported.",
            "items": {
              "type": "string"
            }
          },
          "overwrite_source": {
            "type": "boolean",
            "description": "Set this to allow overwriting an existing sync source. Defaults to true to preserve compatibility."
          }
        }
      },
      "SyncSourceCreate": {
        "title": "Sync Source definition for creating a new source",
        "description": "Sync Source Definition",
        "type": "object",
        "required": [
          "name",
          "path",
          "version",
          "tables"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "my-source-definition",
            "description": "Descriptive, unique name for the source",
            "pattern": "^[a-zA-Z0-9_-]+$",
            "x-pattern-message": "can contain only alphanumerical characters, dashes, and underscores"
          },
          "display_name": {
            "$ref": "#/components/schemas/DisplayName"
          },
          "path": {
            "$ref": "#/components/schemas/SyncPluginPath",
            "example": "cloudquery/aws"
          },
          "version": {
            "type": "string",
            "description": "Version of the plugin",
            "example": "v1.2.3"
          },
          "tables": {
            "type": "array",
            "description": "Tables to sync. Wildcards are supported. Note that child tables are excluded by default, and need to be explicitly specified.",
            "items": {
              "type": "string"
            }
          },
          "skip_tables": {
            "type": "array",
            "description": "Tables matched by `tables` that should be skipped. Wildcards are supported.",
            "items": {
              "type": "string"
            }
          },
          "spec": {
            "type": "object",
            "additionalProperties": true,
            "format": "Plugin parameters, specific to each plugin"
          },
          "env": {
            "description": "Environment variables for the plugin. All environment variables will be stored as secrets.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SyncEnvCreate"
            }
          },
          "last_update_source": {
            "$ref": "#/components/schemas/SyncLastUpdateSource"
          },
          "connector_id": {
            "$ref": "#/components/schemas/ConnectorID",
            "description": "ID of the connector that will be used to authenticate the source."
          },
          "onboarding_id": {
            "$ref": "#/components/schemas/OnboardingID",
            "description": "ID of the onboarding that will be used to authenticate the source."
          }
        }
      },
      "SyncSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SyncSourceCreate"
          },
          {
            "type": "object",
            "required": [
              "name",
              "display_name",
              "path",
              "version",
              "tables",
              "skip_tables",
              "spec",
              "env",
              "created_at",
              "updated_at",
              "last_update_source",
              "draft"
            ],
            "properties": {
              "created_at": {
                "type": "string",
                "format": "date-time",
                "example": "2023-07-14T16:53:42Z",
                "description": "Time when the source was created"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "example": "2023-07-14T16:53:42Z",
                "description": "Time when the source was last updated"
              },
              "env": {
                "description": "Environment variables for the plugin.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SyncEnv"
                }
              },
              "draft": {
                "type": "boolean",
                "description": "If a sync source is in draft, it cannot be used in syncs. To get it out of draft, 'promote' it using a successful test connection ID."
              },
              "previous_version": {
                "type": "string",
                "description": "Previous version of the plugin during a version upgrade",
                "example": "v1.2.2"
              }
            }
          }
        ]
      },
      "SyncSourceUpdate": {
        "title": "Sync Source definition for updating a source",
        "description": "Sync Source Update Definition",
        "type": "object",
        "properties": {
          "display_name": {
            "$ref": "#/components/schemas/DisplayName"
          },
          "tables": {
            "type": "array",
            "description": "Tables to sync. Wildcards are supported. Note that child tables are excluded by default, and need to be explicitly specified.",
            "items": {
              "type": "string"
            }
          },
          "skip_tables": {
            "type": "array",
            "description": "Tables matched by `tables` that should be skipped. Wildcards are supported.",
            "items": {
              "type": "string"
            }
          },
          "last_update_source": {
            "$ref": "#/components/schemas/SyncLastUpdateSource"
          }
        }
      },
      "SyncTransformerTestConnectionCreate": {
        "title": "Sync Transformer Test Connection creation definition",
        "type": "object",
        "required": [
          "path",
          "version"
        ],
        "properties": {
          "path": {
            "$ref": "#/components/schemas/SyncPluginPath",
            "example": "cloudquery/postgresql"
          },
          "transformer_name": {
            "type": "string",
            "description": "Name of an existing transformer"
          },
          "version": {
            "type": "string",
            "description": "Version of the plugin",
            "example": "v1.2.3"
          },
          "spec": {
            "type": "object",
            "additionalProperties": true,
            "format": "Plugin parameters, specific to each plugin"
          },
          "env": {
            "description": "Environment variables for the plugin. All environment variables will be stored as secrets.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SyncEnvCreate"
            }
          },
          "connector_id": {
            "$ref": "#/components/schemas/ConnectorID",
            "description": "ID of the connector that will be used to authenticate the destination."
          }
        }
      },
      "SyncTransformerTestConnection": {
        "type": "object",
        "required": [
          "id",
          "created_at",
          "status"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/SyncTestConnectionID",
            "x-go-name": "ID"
          },
          "status": {
            "$ref": "#/components/schemas/SyncTestConnectionStatus",
            "description": "Status of the sync test connection"
          },
          "failure_reason": {
            "type": "string",
            "description": "Reason for failure",
            "example": "password authentication failed for user \"exampleuser\""
          },
          "failure_code": {
            "example": "INVALID_CREDENTIALS",
            "type": "string",
            "description": "Code for failure"
          },
          "created_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string",
            "description": "Time the test connection was created"
          },
          "completed_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string",
            "description": "Time the test connection was completed"
          },
          "plugin_path": {
            "$ref": "#/components/schemas/SyncPluginPath",
            "example": "cloudquery/postgresql"
          },
          "plugin_version": {
            "$ref": "#/components/schemas/VersionName",
            "description": "Version of the plugin"
          }
        }
      },
      "SyncTransformerTestConnectionID": {
        "description": "ID of the Sync Transformer Test Connection",
        "type": "string",
        "format": "uuid",
        "example": "12345678-1234-1234-1234-1234567890ab",
        "x-go-name": "SyncTransformerTestConnectionID"
      },
      "PromoteSyncTransformerTestConnection": {
        "title": "Sync Transformer definition for creating a new transformer",
        "description": "Sync Transformer Definition",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "my-transformer-definition",
            "description": "Descriptive, unique name for the transformer",
            "pattern": "^[a-zA-Z0-9_-]+$",
            "x-pattern-message": "can contain only alphanumerical characters, dashes, and underscores"
          },
          "display_name": {
            "$ref": "#/components/schemas/DisplayName"
          },
          "overwrite_transformer": {
            "type": "boolean",
            "description": "Set this to allow overwriting an existing sync transformer. Defaults to true to preserve compatibility."
          }
        }
      },
      "SyncTransformerCreate": {
        "title": "Sync Transformer definition for creating a new transformer",
        "description": "Sync Transformer Definition",
        "type": "object",
        "required": [
          "name",
          "path",
          "version",
          "tables"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "my-transformer-definition",
            "description": "Descriptive, unique name for the transformer",
            "pattern": "^[a-zA-Z0-9_-]+$",
            "x-pattern-message": "can contain only alphanumerical characters, dashes, and underscores"
          },
          "display_name": {
            "$ref": "#/components/schemas/DisplayName"
          },
          "path": {
            "$ref": "#/components/schemas/SyncPluginPath",
            "example": "cloudquery/basic"
          },
          "version": {
            "type": "string",
            "description": "Version of the plugin",
            "example": "v1.2.3"
          },
          "spec": {
            "type": "object",
            "additionalProperties": true,
            "format": "Plugin parameters, specific to each plugin"
          },
          "env": {
            "description": "Environment variables for the plugin. All environment variables will be stored as secrets.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SyncEnvCreate"
            }
          },
          "last_update_source": {
            "$ref": "#/components/schemas/SyncLastUpdateSource"
          },
          "connector_id": {
            "$ref": "#/components/schemas/ConnectorID",
            "description": "ID of the connector that will be used to authenticate the transformer."
          }
        }
      },
      "SyncTransformer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SyncTransformerCreate"
          },
          {
            "type": "object",
            "required": [
              "name",
              "display_name",
              "path",
              "version",
              "spec",
              "env",
              "created_at",
              "updated_at",
              "last_update_source",
              "draft"
            ],
            "properties": {
              "created_at": {
                "type": "string",
                "format": "date-time",
                "example": "2023-07-14T16:53:42Z",
                "description": "Time when the transformer was created"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "example": "2023-07-14T16:53:42Z",
                "description": "Time when the transformer was last updated"
              },
              "env": {
                "description": "Environment variables for the plugin.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SyncEnv"
                }
              },
              "draft": {
                "type": "boolean",
                "description": "If a sync transformer is in draft, it cannot be used in syncs. To get it out of draft, 'promote' it using a successful test connection ID."
              }
            }
          }
        ]
      },
      "SyncTransformerUpdate": {
        "title": "Sync Transformer definition for updating a transformer",
        "description": "Sync Transformer Update Definition",
        "type": "object",
        "properties": {
          "display_name": {
            "$ref": "#/components/schemas/DisplayName"
          },
          "last_update_source": {
            "$ref": "#/components/schemas/SyncLastUpdateSource"
          }
        }
      },
      "SyncUpgrade": {
        "title": "Sync version upgrade definition",
        "description": "Sync Version Upgrade Definition",
        "type": "object",
        "required": [
          "path",
          "kind",
          "prev_version",
          "new_version",
          "platform_version",
          "created_at",
          "sync_source_destination_names",
          "sync_source_destination_display_names"
        ],
        "properties": {
          "path": {
            "$ref": "#/components/schemas/SyncPluginPath",
            "example": "cloudquery/aws"
          },
          "kind": {
            "$ref": "#/components/schemas/PluginKind"
          },
          "prev_version": {
            "type": "string",
            "description": "Previous version of the plugin",
            "example": "v1.2.3"
          },
          "new_version": {
            "type": "string",
            "description": "Upgraded version of the plugin",
            "example": "v1.3.0"
          },
          "platform_version": {
            "type": "string",
            "description": "Version of the platform that the upgrade was made on",
            "example": "v1.1.0"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-07-14T16:53:42Z",
            "description": "Time when the upgrade record was created"
          },
          "sync_source_destination_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of sync sources or sync destinations (depending on kind) that were upgraded",
            "x-go-name": "Names"
          },
          "sync_source_destination_display_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of sync sources or sync destinations (depending on kind) display names that were upgraded",
            "x-go-name": "DisplayNames"
          }
        }
      },
      "SyncCreate": {
        "type": "object",
        "description": "Managed Sync definition",
        "required": [
          "name",
          "source",
          "destinations"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Descriptive, unique name for the sync",
            "pattern": "^[a-zA-Z0-9_-]+$",
            "x-pattern-message": "can contain only alphanumerical characters, dashes, and underscores"
          },
          "display_name": {
            "$ref": "#/components/schemas/DisplayName"
          },
          "source": {
            "type": "string",
            "description": "Unique name of the source",
            "pattern": "^[a-zA-Z0-9_-]+$",
            "x-pattern-message": "can contain only alphanumerical characters, dashes, and underscores"
          },
          "destinations": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Unique name of the destination",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "x-pattern-message": "can contain only alphanumerical characters, dashes, and underscores"
            },
            "minItems": 1
          },
          "schedule": {
            "type": "string",
            "description": "Cron schedule for the sync"
          },
          "disabled": {
            "type": "boolean",
            "description": "Whether the sync is disabled",
            "default": false
          },
          "cpu": {
            "type": "string",
            "description": "CPU quota for the sync",
            "default": "1",
            "x-go-name": "CPU"
          },
          "memory": {
            "type": "string",
            "description": "Memory quota for the sync",
            "default": "2Gi"
          }
        }
      },
      "SyncUpdate": {
        "type": "object",
        "description": "Managed Sync definition",
        "properties": {
          "display_name": {
            "$ref": "#/components/schemas/DisplayName"
          },
          "source": {
            "type": "string",
            "description": "Unique name of the source",
            "pattern": "^[a-zA-Z0-9_-]+$",
            "x-pattern-message": "can contain only alphanumerical characters, dashes, and underscores"
          },
          "destinations": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Unique name of the destination",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "x-pattern-message": "can contain only alphanumerical characters, dashes, and underscores"
            },
            "minItems": 1
          },
          "schedule": {
            "type": "string",
            "description": "Cron schedule for the sync"
          },
          "disabled": {
            "type": "boolean",
            "description": "Whether the sync is disabled",
            "default": false
          },
          "env": {
            "type": "array",
            "description": "Environment variables for the sync",
            "items": {
              "$ref": "#/components/schemas/SyncEnv"
            }
          },
          "cpu": {
            "type": "string",
            "description": "CPU quota for the sync",
            "default": "1",
            "x-go-name": "CPU"
          },
          "memory": {
            "type": "string",
            "description": "Memory quota for the sync",
            "default": "2Gi"
          }
        }
      },
      "SyncRunWorkerPhase": {
        "description": "Phase of the worker in the sync run",
        "type": "string",
        "enum": [
          "Pending",
          "Running",
          "Succeeded",
          "Failed",
          "Unknown"
        ]
      },
      "SyncRunWorkerStatus": {
        "description": "The worker information for a sync run",
        "type": "object",
        "required": [
          "phase"
        ],
        "properties": {
          "phase": {
            "$ref": "#/components/schemas/SyncRunWorkerPhase",
            "description": "Phase that the worker is in"
          },
          "reason": {
            "type": "string",
            "description": "The reason for the status of the worker"
          }
        }
      },
      "SyncRun": {
        "description": "Managed Sync Run definition",
        "type": "object",
        "required": [
          "created_at",
          "sync_name",
          "id",
          "status",
          "total_rows",
          "warnings",
          "errors",
          "migrate"
        ],
        "properties": {
          "sync_name": {
            "type": "string",
            "description": "Name of the sync"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "12345678-1234-1234-1234-1234567890ab",
            "description": "unique ID of the run",
            "x-go-name": "ID"
          },
          "status": {
            "$ref": "#/components/schemas/SyncRunStatus",
            "description": "Status of the sync run"
          },
          "status_reason": {
            "$ref": "#/components/schemas/SyncRunStatusReason",
            "description": "Reason for the status of the sync run"
          },
          "workers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SyncRunWorkerStatus"
            },
            "description": "Information about the workers used in the sync run"
          },
          "created_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string",
            "description": "Time the sync run was created"
          },
          "completed_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string",
            "description": "Time the sync run was completed"
          },
          "total_rows": {
            "type": "integer",
            "format": "int64",
            "description": "Total number of rows in the sync"
          },
          "warnings": {
            "type": "integer",
            "format": "int64",
            "description": "Number of warnings encountered during the sync"
          },
          "errors": {
            "type": "integer",
            "format": "int64",
            "description": "Number of errors encountered during the sync"
          },
          "migration": {
            "type": "boolean",
            "description": "Whether the sync run is a migration"
          }
        }
      },
      "SyncRunID": {
        "description": "ID of the SyncRun",
        "type": "string",
        "format": "uuid",
        "example": "12345678-1234-1234-1234-1234567890ab",
        "x-go-name": "SyncRunID"
      },
      "SyncRunDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SyncRun"
          },
          {
            "type": "object",
            "required": [
              "created_at",
              "sync_name",
              "id",
              "status",
              "total_rows",
              "warnings",
              "errors"
            ],
            "properties": {
              "cpu_seconds": {
                "type": "number",
                "format": "double",
                "description": "Total CPU seconds utilized during this sync run",
                "x-go-name": "CPUSeconds"
              },
              "memory_byte_seconds": {
                "type": "number",
                "format": "double",
                "description": "Total memory byte seconds utilized during this sync run"
              },
              "network_egress_bytes": {
                "type": "number",
                "format": "double",
                "description": "Total network egress bytes during this sync run"
              }
            }
          }
        ]
      },
      "SyncRunStats": {
        "type": "object",
        "required": [
          "started_at",
          "completed_tables",
          "resources",
          "errors",
          "panics"
        ],
        "properties": {
          "completed_tables": {
            "type": "integer",
            "format": "uint64",
            "description": "Number of tables completed"
          },
          "started_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string",
            "description": "Time the table sync was started"
          },
          "last_completed_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string",
            "description": "Time the last table was completed"
          },
          "resources": {
            "type": "integer",
            "format": "uint64",
            "description": "Number of total resources fetched"
          },
          "errors": {
            "type": "integer",
            "format": "uint64",
            "description": "Number of total errors encountered"
          },
          "panics": {
            "type": "integer",
            "format": "uint64",
            "description": "Number of total panics encountered"
          }
        }
      },
      "SyncRunTableStat": {
        "type": "object",
        "required": [
          "service_name",
          "name",
          "started_at"
        ],
        "properties": {
          "service_name": {
            "type": "string",
            "description": "Name of the service",
            "example": "aws"
          },
          "name": {
            "type": "string",
            "description": "Name of the table",
            "example": "aws_ec2_instances"
          },
          "started_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string",
            "description": "Time the table sync was started"
          },
          "completed_at": {
            "example": "2017-07-14T16:53:42Z",
            "format": "date-time",
            "type": "string",
            "description": "Time the table sync was completed"
          },
          "resources": {
            "type": "integer",
            "format": "uint64",
            "description": "Number of resources fetched"
          },
          "errors": {
            "type": "integer",
            "format": "uint64",
            "description": "Number of errors encountered"
          },
          "panics": {
            "type": "integer",
            "format": "uint64",
            "description": "Number of panics encountered"
          }
        }
      },
      "ConnectorCredentialsResponseAWS": {
        "additionalProperties": false,
        "required": [
          "access_key_id",
          "secret_access_key",
          "session_token",
          "source",
          "can_expire",
          "expires"
        ],
        "properties": {
          "access_key_id": {
            "type": "string"
          },
          "secret_access_key": {
            "type": "string"
          },
          "session_token": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "can_expire": {
            "type": "boolean"
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object",
        "description": "AWS connector credentials response"
      },
      "ConnectorCredentialsResponseOAuth": {
        "additionalProperties": false,
        "required": [
          "access_token"
        ],
        "properties": {
          "access_token": {
            "type": "string"
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object",
        "description": "OAuth connector credentials response"
      },
      "ConnectorIdentityResponseAWS": {
        "additionalProperties": false,
        "required": [
          "role_arn"
        ],
        "properties": {
          "role_arn": {
            "type": "string",
            "description": "Role ARN to assume",
            "x-go-name": "RoleARN"
          }
        },
        "type": "object",
        "description": "AWS connector identity response"
      },
      "UsageSummaryGroup": {
        "title": "CloudQuery Usage Summary Group",
        "description": "A usage summary group.",
        "type": "object",
        "required": [
          "name",
          "value"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the group.",
            "example": "plugin"
          },
          "value": {
            "type": "string",
            "description": "The value of the group at this index.",
            "example": "cloudquery/source/aws"
          }
        }
      },
      "UsageSummaryValue": {
        "title": "CloudQuery Usage Summary Value",
        "description": "A usage summary value.",
        "type": "object",
        "required": [
          "timestamp"
        ],
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp marking the start of a period."
          },
          "paid_rows": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "The paid rows that were synced in this period, one per group."
          },
          "cloud_vcpu_seconds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "vCPU/seconds consumed in this period, one per group."
          },
          "cloud_vram_byte_seconds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "vRAM/byte-seconds consumed in this period, one per group."
          },
          "cloud_egress_bytes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Egress bytes consumed in this period, one per group."
          }
        }
      },
      "UsageSummary": {
        "title": "CloudQuery Usage Summary",
        "description": "A usage summary for a team, summarizing the paid rows synced and/or cloud resource usage over a given time range.\nNote that empty or all-zero values are not included in the response.\n",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "groups",
          "values",
          "metadata"
        ],
        "properties": {
          "groups": {
            "type": "array",
            "description": "The groups of the usage summary. Every group will have a corresponding value at the same index in the values array.",
            "items": {
              "$ref": "#/components/schemas/UsageSummaryGroup"
            },
            "example": [
              {
                "name": "plugin",
                "value": "cloudquery/source/aws"
              },
              {
                "name": "plugin",
                "value": "cloudquery/source/gcp"
              }
            ]
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/UsageSummaryValue"
            },
            "type": "array",
            "example": [
              {
                "timestamp": "2021-01-01T00:00:00Z",
                "paid_rows": [
                  100,
                  200
                ]
              },
              {
                "timestamp": "2021-01-02T00:00:00Z",
                "paid_rows": [
                  150,
                  300
                ]
              }
            ]
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the usage summary. This may include information about the time range, the aggregation period, or other details.",
            "required": [
              "start",
              "end",
              "aggregation_period",
              "metrics"
            ],
            "additionalProperties": false,
            "properties": {
              "start": {
                "type": "string",
                "format": "date-time",
                "description": "The inclusive start of the query time range."
              },
              "end": {
                "type": "string",
                "format": "date-time",
                "description": "The exclusive end of the query time range."
              },
              "aggregation_period": {
                "type": "string",
                "description": "The aggregation period to sum data over. In other words, data will be returned at this granularity.",
                "enum": [
                  "day",
                  "month"
                ]
              },
              "metrics": {
                "type": "array",
                "description": "List of metrics included in the response.",
                "items": {
                  "type": "string",
                  "enum": [
                    "paid_rows",
                    "cloud_egress_bytes",
                    "cloud_vcpu_seconds",
                    "cloud_vram_byte_seconds"
                  ]
                },
                "default": [
                  "paid_rows"
                ]
              }
            }
          }
        }
      },
      "ImageURL": {
        "properties": {
          "upload_url": {
            "type": "string",
            "example": "https://cloudquery.io/api/v1/upload/1234567890abcdef1234567890abcdef"
          },
          "download_url": {
            "type": "string",
            "example": "https://cloudquery.io/api/v1/download/1234567890abcdef1234567890abcdef"
          },
          "required_headers": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Required HTTP headers to include for the upload"
          }
        },
        "required": [
          "upload_url",
          "download_url",
          "required_headers"
        ]
      },
      "InvitationWithToken": {
        "additionalProperties": false,
        "allOf": [
          {
            "$ref": "#/components/schemas/Invitation"
          },
          {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "format": "uuid",
                "description": "The token used to accept the invitation"
              }
            },
            "required": [
              "token"
            ]
          }
        ]
      },
      "RegistryAuthToken": {
        "type": "object",
        "description": "JWT token for the image registry",
        "additionalProperties": false,
        "properties": {
          "access_token": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "required": [
          "access_token",
          "token"
        ]
      },
      "DockerError": {
        "additionalProperties": false,
        "description": "Error Returned from the Docker Authorization Handler to the Docker Registry",
        "required": [
          "details"
        ],
        "properties": {
          "details": {
            "type": "string"
          }
        },
        "title": "Docker Error",
        "type": "object"
      }
    },
    "responses": {
      "RequiresAuthentication": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BasicError"
            }
          }
        },
        "description": "Requires authentication"
      },
      "Forbidden": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FieldError"
            }
          }
        },
        "description": "Forbidden"
      },
      "InternalError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BasicError"
            }
          }
        },
        "description": "Internal Error"
      },
      "NotFound": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BasicError"
            }
          }
        },
        "description": "Resource not found"
      },
      "UnprocessableEntity": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FieldError"
            }
          }
        },
        "description": "UnprocessableEntity"
      },
      "BadRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FieldError"
            }
          }
        },
        "description": "Bad request"
      },
      "TooManyRequests": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BasicError"
            }
          }
        },
        "description": "Too Many Requests"
      },
      "MethodNotAllowed": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BasicError"
            }
          }
        },
        "description": "Method not allowed"
      },
      "Conflict": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BasicError"
            }
          }
        },
        "description": "Conflict"
      },
      "DockerError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DockerError"
            }
          }
        },
        "description": "Error Returned from the Docker Authorization Handler to the Docker Registry"
      }
    }
  }
}