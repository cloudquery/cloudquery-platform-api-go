{
  "openapi" : "3.1.0",
  "info" : {
    "contact" : {
      "email" : "support@cloudquery.io",
      "name" : "CloudQuery Support Team",
      "url" : "https://cloudquery.io"
    },
    "description" : "Welcome to the CloudQuery Platform API documentation! This API can be used to interact with the CloudQuery platform. As a user, the API allows you to search the CloudQuery asset inventory, run SQL queries against the data warehouse, save and load searches, and much more. As an administrator, it allows you to manage your teams, syncs, and other objects.\n### Authentication\nThe API is secured using bearer tokens. To get started, you can generate an API key for your Platform deployment from your platform dashboard. For a step-by-step guide, see: https://docs.cloudquery.io/docs/deployment/generate-api-key.\nThe base URL for the API depends on where your CloudQuery Platform is hosted. If running locally, this is usually http://localhost:3000/api. In a production deployment it should be an HTTPS URL. For purposes of illustration, we will assume the platform instance is available at https://cloudquery.mycompany.com. In this case, the base API endpoint will be https://cloudquery.mycompany.com/api.\n### Example Request\nTo test your connection to the API, we can use the `/plugins` endpoint. For example:\n`curl -v -H \"Authorization: Bearer $CLOUDQUERY_API_KEY\" \\ https://cloudquery.mycompany.com/api/plugins`\n",
    "license" : {
      "name" : "MIT",
      "url" : "https://spdx.org/licenses/MIT"
    },
    "termsOfService" : "https://www.cloudquery.io/terms",
    "title" : "CloudQuery Platform OpenAPI Spec",
    "version" : "1.0.0"
  },
  "servers" : [ {
    "description" : "Example CloudQuery Platform production instance (Adjust URL to your instance as needed)",
    "url" : "https://example-instance-xyz.mycloudquery.com",
    "x-internal" : true
  } ],
  "security" : [ {
    "bearerAuth" : [ ]
  }, {
    "cookieAuth" : [ ]
  } ],
  "tags" : [ {
    "name" : "admin"
  }, {
    "name" : "alerts"
  }, {
    "name" : "analytics"
  }, {
    "name" : "audit-logs"
  }, {
    "name" : "custom-columns"
  }, {
    "name" : "filters"
  }, {
    "name" : "healthcheck"
  }, {
    "name" : "images"
  }, {
    "name" : "plugins"
  }, {
    "name" : "policies"
  }, {
    "name" : "queries"
  }, {
    "name" : "registry"
  }, {
    "name" : "reports"
  }, {
    "name" : "syncs"
  }, {
    "name" : "tables"
  }, {
    "name" : "teams"
  }, {
    "name" : "users"
  } ],
  "paths" : {
    "/" : {
      "get" : {
        "description" : "Index endpoint, returns 200",
        "operationId" : "Index",
        "responses" : {
          "200" : {
            "description" : "Response",
            "headers" : {
              "Link" : {
                "description" : "RFC 8631 compliant link relation information",
                "explode" : false,
                "schema" : {
                  "example" : "<https://platform-api-docs.cloudquery.io>; rel=\"service-doc\"",
                  "type" : "string"
                },
                "style" : "simple"
              }
            }
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Index_400_response"
                }
              }
            },
            "description" : "Bad request"
          }
        },
        "security" : [ ],
        "tags" : [ "healthcheck" ]
      }
    },
    "/audit-logs" : {
      "get" : {
        "description" : "List audit log events with pagination and filtering",
        "operationId" : "ListAuditLogs",
        "parameters" : [ {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "description" : "Filter by user ID",
          "explode" : true,
          "in" : "query",
          "name" : "user_id",
          "required" : false,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Filter by team name",
          "explode" : true,
          "in" : "query",
          "name" : "team_name",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Filter by event type",
          "explode" : true,
          "in" : "query",
          "name" : "event_type",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Filter by entity display name",
          "explode" : true,
          "in" : "query",
          "name" : "entity_display_name",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Filter by user IP address",
          "explode" : true,
          "in" : "query",
          "name" : "user_ip_address",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Filter by start time (inclusive)",
          "explode" : true,
          "in" : "query",
          "name" : "start_time",
          "required" : false,
          "schema" : {
            "format" : "date-time",
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Filter by end time (inclusive)",
          "explode" : true,
          "in" : "query",
          "name" : "end_time",
          "required" : false,
          "schema" : {
            "format" : "date-time",
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Search across user name, team name, event type, entity display name, and user IP address",
          "explode" : true,
          "in" : "query",
          "name" : "search",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListAuditLogs_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "audit-logs" ]
      }
    },
    "/audit-logs/{id}" : {
      "get" : {
        "description" : "Get a specific audit log event by ID",
        "operationId" : "GetAuditLog",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuditLogEvent"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "audit-logs" ]
      }
    },
    "/filters" : {
      "get" : {
        "description" : "List Filters",
        "operationId" : "ListFilters",
        "parameters" : [ {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/filter_tags"
        }, {
          "$ref" : "#/components/parameters/filter_name_filter"
        }, {
          "$ref" : "#/components/parameters/filter_expression_filter"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListFilters_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "filters" ]
      }
    },
    "/filters/tags" : {
      "get" : {
        "description" : "List Filter Tags",
        "operationId" : "ListFilterTags",
        "parameters" : [ {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListFilterTags_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "filters" ]
      }
    },
    "/filters/{filter_id}" : {
      "delete" : {
        "description" : "Delete a table filter",
        "operationId" : "DeleteFilter",
        "parameters" : [ {
          "$ref" : "#/components/parameters/filter_id"
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "filters" ]
      },
      "get" : {
        "description" : "Get a table filter by ID",
        "operationId" : "GetFilterByID",
        "parameters" : [ {
          "$ref" : "#/components/parameters/filter_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Filter"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "filters" ]
      },
      "patch" : {
        "description" : "Update a table filter",
        "operationId" : "UpdateFilter",
        "parameters" : [ {
          "$ref" : "#/components/parameters/filter_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilterUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Filter"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "filters" ]
      }
    },
    "/healthcheck" : {
      "get" : {
        "description" : "Health check endpoint, returns 200",
        "operationId" : "HealthCheck",
        "responses" : {
          "200" : {
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ ],
        "tags" : [ "healthcheck" ]
      },
      "head" : {
        "description" : "Health check endpoint, returns 200",
        "operationId" : "HealthCheckHead",
        "responses" : {
          "200" : {
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ ],
        "tags" : [ "healthcheck" ],
        "x-internal" : true
      }
    },
    "/openapi.json" : {
      "get" : {
        "description" : "Returns the OpenAPI definition in JSON format.",
        "operationId" : "GetOpenAPIJSON",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "description" : "The OpenAPI document for this API in JSON format",
                  "type" : "object"
                }
              }
            },
            "description" : "OpenAPI specification in JSON format"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          }
        },
        "security" : [ ],
        "summary" : "Get OpenAPI JSON"
      }
    },
    "/manage/assetview" : {
      "get" : {
        "description" : "Get assetview status",
        "operationId" : "AssetViewGetStatus",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetViewGetStatus_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "admin" ]
      },
      "post" : {
        "description" : "Trigger assetview run",
        "operationId" : "AssetViewTrigger",
        "responses" : {
          "201" : {
            "description" : "Triggered new run"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "admin" ]
      }
    },
    "/manage/assetview/logs" : {
      "get" : {
        "description" : "List asset view logs",
        "operationId" : "AssetViewListLogs",
        "parameters" : [ {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/assetview_run_type"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetViewListLogs_200_response"
                }
              }
            },
            "description" : "Created"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "admin" ]
      }
    },
    "/manage/auth/saml" : {
      "get" : {
        "description" : "Get SAML integration information",
        "operationId" : "ManageGetSAML",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SAMLConfig"
                }
              }
            },
            "description" : "Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "admin" ]
      },
      "patch" : {
        "description" : "Update SAML integration information",
        "operationId" : "ManageUpdateSAML",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SAMLConfigUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SAMLConfig"
                }
              }
            },
            "description" : "Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "admin" ]
      }
    },
    "/manage/register-platform" : {
      "get" : {
        "description" : "Get platform registry information",
        "operationId" : "ManageGetPlatformRegistry",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ManageGetPlatformRegistry_200_response"
                }
              }
            },
            "description" : "Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "429" : {
            "$ref" : "#/components/responses/TooManyRequests"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "admin" ]
      },
      "post" : {
        "description" : "Register platform usage by API key",
        "operationId" : "ManageRegisterPlatform",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ManageRegisterPlatform_request"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ManageRegisterPlatform_200_response"
                }
              }
            },
            "description" : "Success"
          },
          "205" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ManageRegisterPlatform_205_response"
                }
              }
            },
            "description" : "Activation method is no longer valid"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "429" : {
            "$ref" : "#/components/responses/TooManyRequests"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "admin" ]
      }
    },
    "/manage/register-platform/offline" : {
      "post" : {
        "description" : "Register platform usage by offline license",
        "operationId" : "ManageRegisterPlatformWithOfflineLicense",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ManageRegisterPlatformWithOfflineLicense_request"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ManageRegisterPlatformWithOfflineLicense_200_response"
                }
              }
            },
            "description" : "Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "429" : {
            "$ref" : "#/components/responses/TooManyRequests"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "admin" ]
      }
    },
    "/manage/settings" : {
      "get" : {
        "description" : "Show current platform settings",
        "operationId" : "GetSettings",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PlatformSettings"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "admin" ]
      },
      "patch" : {
        "description" : "Update platform settings",
        "operationId" : "UpdateSettings",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PlatformSettingsUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PlatformSettings"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "admin" ]
      }
    },
    "/manage/teams" : {
      "get" : {
        "description" : "List all teams",
        "operationId" : "ManageListAllTeams",
        "parameters" : [ {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ManageListAllTeams_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams", "admin" ]
      }
    },
    "/manage/teams/{team_name}" : {
      "delete" : {
        "description" : "Delete a team",
        "operationId" : "ManageDeleteTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams", "admin" ]
      },
      "get" : {
        "description" : "Get a team",
        "operationId" : "ManageGetTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Team"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams", "admin" ]
      }
    },
    "/manage/teams/{team_name}/members" : {
      "delete" : {
        "description" : "Remove team member",
        "operationId" : "ManageRemoveTeamMember",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ManageRemoveTeamMember_request"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams", "admin" ]
      },
      "get" : {
        "description" : "List team members",
        "operationId" : "ManageListTeamMembers",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ManageListTeamMembers_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams", "admin" ]
      },
      "put" : {
        "description" : "Add team member",
        "operationId" : "ManageAddTeamMember",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ManageAddTeamMember_request"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams", "admin" ]
      }
    },
    "/manage/users" : {
      "get" : {
        "description" : "List all users",
        "operationId" : "ListLocalUsers",
        "parameters" : [ {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListLocalUsers_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "users", "admin" ]
      }
    },
    "/manage/users/add" : {
      "post" : {
        "description" : "Add new user",
        "operationId" : "AddLocalUser",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddLocalUser_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LocalUser"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "405" : {
            "$ref" : "#/components/responses/MethodNotAllowed"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "users", "admin" ]
      }
    },
    "/manage/users/{user_id}" : {
      "delete" : {
        "description" : "Delete user",
        "operationId" : "DeleteLocalUser",
        "parameters" : [ {
          "$ref" : "#/components/parameters/user_id"
        } ],
        "responses" : {
          "204" : {
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "users", "admin" ]
      },
      "get" : {
        "description" : "Get user details",
        "operationId" : "GetLocalUser",
        "parameters" : [ {
          "$ref" : "#/components/parameters/user_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LocalUserWithTeams"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "users", "admin" ]
      },
      "patch" : {
        "description" : "Update user",
        "operationId" : "UpdateLocalUser",
        "parameters" : [ {
          "$ref" : "#/components/parameters/user_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateLocalUser_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LocalUser"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "users", "admin" ]
      }
    },
    "/manage/users/{user_id}/reset" : {
      "post" : {
        "description" : "Create password reset token for user",
        "operationId" : "CreateLocalUserResetToken",
        "parameters" : [ {
          "$ref" : "#/components/parameters/user_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateLocalUserResetToken_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "users", "admin" ]
      }
    },
    "/manage/users/{user_id}/totp" : {
      "delete" : {
        "description" : "Disable/Reset MFA for a specific user",
        "operationId" : "ManageUserTOTPDelete",
        "parameters" : [ {
          "$ref" : "#/components/parameters/user_id"
        } ],
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "405" : {
            "$ref" : "#/components/responses/MethodNotAllowed"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "users" ]
      }
    },
    "/platform-info" : {
      "get" : {
        "description" : "Information about the platform",
        "operationId" : "GetPlatformInfo",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPlatformInfo_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "platform" ]
      }
    },
    "/platform-versions" : {
      "get" : {
        "description" : "List platform versions",
        "operationId" : "ListPlatformVersions",
        "parameters" : [ {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListPlatformVersions_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "platform" ]
      }
    },
    "/plugins" : {
      "get" : {
        "description" : "List all plugins",
        "operationId" : "ListPlugins",
        "parameters" : [ {
          "$ref" : "#/components/parameters/plugin_sort_by"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/plugin_include_release_stages"
        }, {
          "$ref" : "#/components/parameters/plugin_exclude_release_stages"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListPlugins_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ ],
        "tags" : [ "plugins" ]
      },
      "post" : {
        "description" : "Create a plugin owned by the specified team. User must be part of that team.",
        "operationId" : "CreatePlugin",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PluginCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Plugin"
                }
              }
            },
            "description" : "Created"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      }
    },
    "/plugins/{team_name}/{plugin_kind}/{plugin_name}" : {
      "delete" : {
        "description" : "Delete plugin by team and plugin name",
        "operationId" : "DeletePluginByTeamAndPluginName",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        } ],
        "responses" : {
          "204" : {
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      },
      "get" : {
        "description" : "Get details about a given plugin.",
        "operationId" : "GetPlugin",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListPlugin"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ ],
        "tags" : [ "plugins" ]
      },
      "patch" : {
        "description" : "Update a plugin",
        "operationId" : "UpdatePlugin",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PluginUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Plugin"
                }
              }
            },
            "description" : "Updated"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      }
    },
    "/plugins/{team_name}/{plugin_kind}/{plugin_name}/versions" : {
      "get" : {
        "description" : "List all versions for a given plugin",
        "operationId" : "ListPluginVersions",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_sort_by"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/include_drafts"
        }, {
          "$ref" : "#/components/parameters/include_prereleases"
        }, {
          "$ref" : "#/components/parameters/version_filter"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListPluginVersions_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ ],
        "tags" : [ "plugins" ]
      }
    },
    "/plugins/{team_name}/{plugin_kind}/{plugin_name}/versions/{version_name}" : {
      "get" : {
        "description" : "Get details about a given plugin version.",
        "operationId" : "GetPluginVersion",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PluginVersionDetails"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ ],
        "tags" : [ "plugins" ]
      },
      "patch" : {
        "description" : "Update a given plugin version",
        "operationId" : "UpdatePluginVersion",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PluginVersionUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PluginVersion"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      },
      "put" : {
        "description" : "Create a new plugin version, or update a draft version",
        "operationId" : "CreatePluginVersion",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePluginVersion_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PluginVersion"
                }
              }
            },
            "description" : "Success (the plugin version was updated)"
          },
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PluginVersion"
                }
              }
            },
            "description" : "Success (the plugin version was created)"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      }
    },
    "/plugins/{team_name}/{plugin_kind}/{plugin_name}/versions/{version_name}/assets/{target_name}" : {
      "get" : {
        "description" : "Download an asset for a given plugin version and target",
        "operationId" : "DownloadPluginAsset",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        }, {
          "$ref" : "#/components/parameters/target_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PluginAsset"
                }
              }
            },
            "description" : "Response"
          },
          "302" : {
            "description" : "Response",
            "headers" : {
              "Location" : {
                "explode" : false,
                "schema" : {
                  "type" : "string"
                },
                "style" : "simple"
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "429" : {
            "$ref" : "#/components/responses/TooManyRequests"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ ],
        "tags" : [ "plugins" ]
      },
      "post" : {
        "description" : "Get a URL to upload an asset for a given plugin version and target",
        "operationId" : "UploadPluginAsset",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        }, {
          "$ref" : "#/components/parameters/target_name"
        } ],
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReleaseURL"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      }
    },
    "/plugins/{team_name}/{plugin_kind}/{plugin_name}/versions/{version_name}/docs" : {
      "delete" : {
        "description" : "Delete one or more plugin version docs pages.",
        "operationId" : "DeletePluginVersionDocs",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeletePluginVersionDocs_request"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "The resource was deleted successfully."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      },
      "get" : {
        "description" : "List all documentation pages for a given plugin version",
        "operationId" : "ListPluginVersionDocs",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListPluginVersionDocs_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ ],
        "tags" : [ "plugins" ]
      },
      "post" : {
        "description" : "Replace (override) multiple plugin version docs pages",
        "operationId" : "ReplacePluginVersionDocs",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePluginVersionDocs_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreatePluginVersionDocs_201_response"
                }
              }
            },
            "description" : "Successfully created or updated"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      },
      "put" : {
        "description" : "Create or update one or more plugin version docs pages",
        "operationId" : "CreatePluginVersionDocs",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePluginVersionDocs_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreatePluginVersionDocs_201_response"
                }
              }
            },
            "description" : "Successfully created or updated"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      }
    },
    "/plugins/{team_name}/{plugin_kind}/{plugin_name}/versions/{version_name}/tables" : {
      "delete" : {
        "description" : "Delete one or more plugin version tables.",
        "operationId" : "DeletePluginVersionTables",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeletePluginVersionTables_request"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "The resource was deleted successfully."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      },
      "get" : {
        "description" : "List tables for a given plugin version. This only applies to source plugins.",
        "operationId" : "ListPluginVersionTables",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListPluginVersionTables_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ ],
        "tags" : [ "plugins" ]
      },
      "put" : {
        "description" : "Create or update one or more plugin version tables. This only applies to source plugins, and can only be done if the plugin version is in draft.",
        "operationId" : "CreatePluginVersionTables",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePluginVersionTables_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreatePluginVersionTables_201_response"
                }
              }
            },
            "description" : "Successfully created or updated"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      }
    },
    "/plugins/{team_name}/{plugin_kind}/{plugin_name}/versions/{version_name}/tables/{table_name}" : {
      "get" : {
        "description" : "Get schema for a given table and plugin version. This only applies to source plugins.",
        "operationId" : "GetPluginVersionTable",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        }, {
          "explode" : false,
          "in" : "path",
          "name" : "table_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PluginTableDetails"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ ],
        "tags" : [ "plugins" ]
      }
    },
    "/plugins/{team_name}/{plugin_kind}/{plugin_name}/versions/{version_name}/uiassets" : {
      "delete" : {
        "description" : "Remove UI assets for a given plugin version",
        "operationId" : "RemovePluginUIAssets",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "responses" : {
          "204" : {
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      },
      "post" : {
        "description" : "Get URLs to upload UI assets for a given plugin version",
        "operationId" : "UploadPluginUIAssets",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UploadPluginUIAssets_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UploadPluginUIAssets_201_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      },
      "put" : {
        "description" : "Finalize UI asset upload",
        "operationId" : "FinalizePluginUIAssetUpload",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FinalizePluginUIAssetUpload_request"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      }
    },
    "/tables" : {
      "get" : {
        "description" : "List Tables",
        "operationId" : "ListTables",
        "parameters" : [ {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListTables_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "tables" ]
      }
    },
    "/tables/{table_name}/data" : {
      "get" : {
        "description" : "List Table Rows",
        "operationId" : "TableListRows",
        "parameters" : [ {
          "$ref" : "#/components/parameters/table_name"
        }, {
          "$ref" : "#/components/parameters/table_selects"
        }, {
          "$ref" : "#/components/parameters/table_filter_mode"
        }, {
          "$ref" : "#/components/parameters/table_filters"
        }, {
          "$ref" : "#/components/parameters/table_filter_ids"
        }, {
          "$ref" : "#/components/parameters/table_sort_bys"
        }, {
          "$ref" : "#/components/parameters/table_sort_dirs"
        }, {
          "$ref" : "#/components/parameters/table_group_bys"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableListRows_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "tables" ]
      }
    },
    "/tables/{table_name}/data/{table_row_id}" : {
      "get" : {
        "description" : "Get Table row",
        "operationId" : "TableRowById",
        "parameters" : [ {
          "$ref" : "#/components/parameters/table_name"
        }, {
          "$ref" : "#/components/parameters/table_row_id"
        }, {
          "$ref" : "#/components/parameters/table_filter_mode"
        }, {
          "$ref" : "#/components/parameters/table_filters"
        }, {
          "$ref" : "#/components/parameters/table_filter_ids"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableRowById_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "tables" ]
      }
    },
    "/tables/{table_name}/schema" : {
      "get" : {
        "description" : "Get Table Schema",
        "operationId" : "TableSchema",
        "parameters" : [ {
          "$ref" : "#/components/parameters/table_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableSchema_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "tables" ]
      }
    },
    "/tables/schemas" : {
      "get" : {
        "description" : "Get Table Schemas",
        "operationId" : "BatchTableSchemas",
        "parameters" : [ {
          "description" : "A list of table names to retrieve schemas for",
          "explode" : true,
          "in" : "query",
          "name" : "tables",
          "required" : true,
          "schema" : {
            "example" : [ "aws_ec2_instances", "aws_s3_buckets" ],
            "items" : {
              "minLength" : 1,
              "type" : "string"
            },
            "type" : "array"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchTableSchemas_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "tables" ]
      }
    },
    "/tables/{table_name}/columns" : {
      "get" : {
        "description" : "Get Table Columns",
        "operationId" : "TableListColumns",
        "parameters" : [ {
          "$ref" : "#/components/parameters/table_name"
        }, {
          "$ref" : "#/components/parameters/table_filter_mode"
        }, {
          "$ref" : "#/components/parameters/table_column_name_filter"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableListColumns_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "tables" ]
      }
    },
    "/tables/{table_name}/columns/{column_name}/values" : {
      "get" : {
        "description" : "Get Table Column Values",
        "operationId" : "TableColumnListValues",
        "parameters" : [ {
          "$ref" : "#/components/parameters/table_name"
        }, {
          "$ref" : "#/components/parameters/column_name"
        }, {
          "$ref" : "#/components/parameters/table_filter_mode"
        }, {
          "$ref" : "#/components/parameters/table_column_value_filter"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableColumnListValues_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "tables" ]
      }
    },
    "/tables/{table_name}/filters" : {
      "get" : {
        "description" : "List Table Filters",
        "operationId" : "TableListFilters",
        "parameters" : [ {
          "$ref" : "#/components/parameters/table_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/filter_tags"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListFilters_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "tables", "filters" ]
      },
      "post" : {
        "description" : "Save Table Filter",
        "operationId" : "TableSaveFilter",
        "parameters" : [ {
          "$ref" : "#/components/parameters/table_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilterCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Filter"
                }
              }
            },
            "description" : "Filter already exists"
          },
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Filter"
                }
              }
            },
            "description" : "Filter created"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "tables", "filters" ]
      }
    },
    "/tables/{table_name}/filters/tags" : {
      "get" : {
        "description" : "List Filter Tags For A Table",
        "operationId" : "TableListFilterTags",
        "parameters" : [ {
          "$ref" : "#/components/parameters/table_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListFilterTags_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "queries", "filters" ]
      }
    },
    "/tables/{table_name}/relations" : {
      "get" : {
        "description" : "List Table Relations",
        "operationId" : "TableListRelations",
        "parameters" : [ {
          "$ref" : "#/components/parameters/table_name"
        }, {
          "description" : "Filter by related table name",
          "explode" : true,
          "in" : "query",
          "name" : "relation_name",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableListRelations_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "tables" ]
      }
    },
    "/teams" : {
      "get" : {
        "description" : "List all teams",
        "operationId" : "ListTeams",
        "parameters" : [ {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ManageListAllTeams_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      },
      "post" : {
        "description" : "Create a team owned by the current user.",
        "operationId" : "CreateTeam",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTeam_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Team"
                }
              }
            },
            "description" : "Created"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}" : {
      "delete" : {
        "description" : "Delete team",
        "operationId" : "DeleteTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "responses" : {
          "204" : {
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ],
        "x-internal" : true
      },
      "get" : {
        "description" : "Get a team by name",
        "operationId" : "GetTeamByName",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Team"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      },
      "patch" : {
        "description" : "Update team attributes",
        "operationId" : "UpdateTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateTeam_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Team"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/alerts" : {
      "get" : {
        "description" : "List all alerts",
        "operationId" : "ListAllAlerts",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/alert_states"
        }, {
          "$ref" : "#/components/parameters/enabled"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListAllAlerts_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "alerts" ]
      }
    },
    "/teams/{team_name}/alerts/test" : {
      "post" : {
        "description" : "Test an unsaved alert",
        "operationId" : "TestUnsavedAlert",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "description" : "ID of the query to fill in the alert",
          "explode" : true,
          "in" : "query",
          "name" : "query_id",
          "required" : false,
          "schema" : {
            "$ref" : "#/components/schemas/QueryID"
          },
          "style" : "form",
          "x-go-name" : "QueryID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AlertCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestUnsavedAlert_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "alerts" ]
      }
    },
    "/teams/{team_name}/apikeys" : {
      "get" : {
        "description" : "List all team API Keys",
        "operationId" : "ListTeamAPIKeys",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListTeamAPIKeys_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      },
      "post" : {
        "description" : "Create new team API Key.",
        "operationId" : "CreateTeamAPIKey",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTeamAPIKey_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIKey"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/apikeys/{apikey_id}" : {
      "delete" : {
        "description" : "Delete API Key. This will remove any future access by this API Key.",
        "operationId" : "DeleteTeamAPIKey",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/apikey_id"
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/connectors" : {
      "get" : {
        "description" : "List all configured connectors",
        "operationId" : "ListConnectors",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "description" : "Filter connectors by a given type.",
          "explode" : true,
          "in" : "query",
          "name" : "filter_type",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Filter connectors by a given plugin reference. Mutually exclusive with `type`.",
          "example" : "cloudquery/source/googleanalytics",
          "explode" : true,
          "in" : "query",
          "name" : "filter_plugin",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListConnectors_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "post" : {
        "description" : "Create new connector",
        "operationId" : "CreateConnector",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConnectorCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Connector"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/connectors/{connector_id}" : {
      "get" : {
        "description" : "Get a configured connector",
        "operationId" : "GetConnector",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/connector_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Connector"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "patch" : {
        "description" : "Update a connector",
        "operationId" : "UpdateConnector",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/connector_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConnectorUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Connector"
                }
              }
            },
            "description" : "Update response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/connectors/{connector_id}/authenticate" : {
      "delete" : {
        "description" : "Revoke authentication for a given connector. Any syncs relying on this connector will stop running until the connector is reauthenticated or sync references are updated.",
        "operationId" : "RevokeConnector",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/connector_id"
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/connectors/{connector_id}/authenticate/aws" : {
      "get" : {
        "description" : "Get authentication status for the given AWS connector",
        "operationId" : "GetConnectorAuthStatusAWS",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/connector_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetConnectorAuthStatusAWS_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "patch" : {
        "description" : "Complete authentication for the given AWS connector",
        "operationId" : "AuthenticateConnectorFinishAWS",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/connector_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConnectorAuthFinishRequestAWS"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Authentication is complete."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "post" : {
        "description" : "Authenticate or reauthenticate the given AWS connector",
        "operationId" : "AuthenticateConnectorAWS",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/connector_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConnectorAuthRequestAWS"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConnectorAuthResponseAWS"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/connectors/{connector_id}/authenticate/gcp" : {
      "get" : {
        "description" : "Get authentication status for the given GCP connector",
        "operationId" : "GetConnectorAuthStatusGCP",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/connector_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetConnectorAuthStatusGCP_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "post" : {
        "description" : "Authenticate or reauthenticate the given GCP connector",
        "operationId" : "AuthenticateConnectorGCP",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/connector_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConnectorAuthRequestGCP"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConnectorAuthResponseGCP"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/connectors/{connector_id}/authenticate/gcp/finish" : {
      "post" : {
        "description" : "Complete authentication for the given GCP connector",
        "operationId" : "AuthenticateConnectorFinishGCP",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/connector_id"
        } ],
        "responses" : {
          "204" : {
            "description" : "Authentication is complete."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/connectors/{connector_id}/authenticate/oauth" : {
      "patch" : {
        "description" : "Complete authentication for the given OAuth connector",
        "operationId" : "AuthenticateConnectorFinishOAuth",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/connector_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConnectorAuthFinishRequestOAuth"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConnectorAuthResponseOAuth"
                }
              }
            },
            "description" : "First part of authentication is complete, follow redirect to continue"
          },
          "204" : {
            "description" : "Authentication is complete."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "post" : {
        "description" : "Authenticate or reauthenticate the given OAuth connector",
        "operationId" : "AuthenticateConnectorOAuth",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/connector_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConnectorAuthRequestOAuth"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConnectorAuthResponseOAuth"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/custom-columns" : {
      "get" : {
        "description" : "List all custom columns",
        "operationId" : "ListAllCustomColumns",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/custom_columns_sort_bys"
        }, {
          "$ref" : "#/components/parameters/custom_columns_sort_dirs"
        }, {
          "description" : "Filter columns by table name.",
          "explode" : true,
          "in" : "query",
          "name" : "table",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Filter columns by name, label, or description.",
          "explode" : true,
          "in" : "query",
          "name" : "search_term",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListAllCustomColumns_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "custom-columns" ]
      },
      "post" : {
        "description" : "Save a custom column",
        "operationId" : "SaveCustomColumn",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomColumnCreateOrUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomColumn"
                }
              }
            },
            "description" : "Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "custom-columns" ]
      }
    },
    "/teams/{team_name}/custom-columns/{custom_column_id}" : {
      "delete" : {
        "description" : "Delete a custom column",
        "operationId" : "DeleteCustomColumn",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/custom_column_id"
        } ],
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "custom-columns" ]
      },
      "get" : {
        "description" : "Get a custom column",
        "operationId" : "GetCustomColumn",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/custom_column_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomColumn"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "custom-columns" ]
      },
      "patch" : {
        "description" : "Update a custom column",
        "operationId" : "UpdateCustomColumn",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/custom_column_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomColumnCreateOrUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomColumn"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "custom-columns" ]
      }
    },
    "/teams/{team_name}/custom-columns/{custom_column_id}/import" : {
      "put" : {
        "description" : "Import data into a Custom Column",
        "operationId" : "PutCustomColumnData",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/custom_column_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomColumnDataImport"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PutCustomColumnData_202_response"
                }
              }
            },
            "description" : "Accepted import"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "tags" : [ "custom-columns" ]
      }
    },
    "/teams/{team_name}/custom-columns/{custom_column_id}/values" : {
      "put" : {
        "description" : "Edit values within a Custom Column",
        "operationId" : "PutCustomColumnValues",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/custom_column_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomColumnDataValues"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            },
            "description" : "Accepted values"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          }
        },
        "tags" : [ "custom-columns" ]
      }
    },
    "/teams/{team_name}/filters" : {
      "get" : {
        "description" : "List Filters",
        "operationId" : "ListFiltersTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/filter_tags"
        }, {
          "$ref" : "#/components/parameters/filter_name_filter"
        }, {
          "$ref" : "#/components/parameters/filter_expression_filter"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListFilters_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "filters" ]
      }
    },
    "/teams/{team_name}/filters/tags" : {
      "get" : {
        "description" : "List Filter Tags",
        "operationId" : "ListFilterTagsTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListFilterTags_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "filters" ]
      }
    },
    "/teams/{team_name}/filters/{filter_id}" : {
      "delete" : {
        "description" : "Delete a table filter",
        "operationId" : "DeleteFilterTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/filter_id"
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "filters" ]
      },
      "get" : {
        "description" : "Get a table filter by ID",
        "operationId" : "GetFilterByIDTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/filter_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Filter"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "filters" ]
      },
      "patch" : {
        "description" : "Update a table filter",
        "operationId" : "UpdateFilterTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/filter_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilterUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Filter"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "filters" ]
      }
    },
    "/teams/{team_name}/images" : {
      "post" : {
        "description" : "Get URLs to upload images for a given team",
        "operationId" : "CreateTeamImages",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTeamImages_request"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateTeamImages_201_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/invitations" : {
      "delete" : {
        "description" : "Delete an invitation to the team, preventing the user becoming a team member",
        "operationId" : "DeleteTeamInvitation",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeleteTeamInvitation_request"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      },
      "get" : {
        "description" : "List of open invitations to the team",
        "operationId" : "ListTeamInvitations",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListTeamInvitations_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/invitations/accept" : {
      "post" : {
        "description" : "Accept an invitation to the team, creating a user membership",
        "operationId" : "AcceptTeamInvitation",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AcceptTeamInvitation_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MembershipWithTeam"
                }
              }
            },
            "description" : "The invitation has been accepted and the authenticated user is now a member of the team."
          },
          "303" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MembershipWithTeam"
                }
              }
            },
            "description" : "The authenticated user is already a member of this team."
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden",
            "description" : "You do not have an invitation to join this team."
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/memberships" : {
      "delete" : {
        "description" : "Remove a user from the team",
        "operationId" : "RemoveTeamMembership",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RemoveTeamMembership_request"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      },
      "get" : {
        "description" : "Get memberships to the team.",
        "operationId" : "GetTeamMemberships",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTeamMemberships_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/memberships/{email}" : {
      "delete" : {
        "deprecated" : true,
        "description" : "Remove a user from the team",
        "operationId" : "DeleteTeamMembership",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/email_basic"
        } ],
        "responses" : {
          "204" : {
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/notifications/destinations" : {
      "get" : {
        "description" : "List all notification destinations",
        "operationId" : "ListAllNotificationDestinations",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListAllNotificationDestinations_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "alerts" ]
      },
      "post" : {
        "description" : "Create notification destination",
        "operationId" : "CreateNotificationDestination",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NotificationDestinationCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationDestination"
                }
              }
            },
            "description" : "Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "alerts" ]
      }
    },
    "/teams/{team_name}/notifications/destinations/test" : {
      "post" : {
        "description" : "Test an unsaved notification destination",
        "operationId" : "TestUnsavedNotificationDestination",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NotificationDestinationData"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationDestinationTestResponse"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "alerts" ]
      }
    },
    "/teams/{team_name}/notifications/destination/{notification_destination_id}" : {
      "delete" : {
        "description" : "Delete a notification destination",
        "operationId" : "DeleteNotificationDestination",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/notification_destination_id"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "alerts" ]
      },
      "get" : {
        "description" : "Get notification destination",
        "operationId" : "GetNotificationDestination",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/notification_destination_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationDestination"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "alerts" ]
      },
      "patch" : {
        "description" : "Update a notification destination",
        "operationId" : "UpdateNotificationDestination",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/notification_destination_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NotificationDestinationUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationDestination"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "alerts" ]
      }
    },
    "/teams/{team_name}/notifications/destination/{notification_destination_id}/alerts" : {
      "get" : {
        "description" : "Get notification destination alerts",
        "operationId" : "GetNotificationDestinationAlerts",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/notification_destination_id"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListAllAlerts_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "alerts" ]
      }
    },
    "/teams/{team_name}/notifications/destination/{notification_destination_id}/test" : {
      "post" : {
        "description" : "Test a notification destination",
        "operationId" : "TestNotificationDestination",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/notification_destination_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationDestinationTestResponse"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "429" : {
            "$ref" : "#/components/responses/TooManyRequests"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "alerts" ]
      }
    },
    "/teams/{team_name}/onboardings/aws/oidc" : {
      "post" : {
        "description" : "Create an interactive onboarding for AWS",
        "operationId" : "CreateAWSOnboarding",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateAWSOnboarding_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingAWSCreateResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/onboardings/aws/oidc/{onboarding_id}" : {
      "get" : {
        "description" : "Query an interactive onboarding for AWS",
        "operationId" : "GetAWSOnboarding",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/onboarding_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingAWS"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/onboardings/aws/oidc/{onboarding_id}/notify" : {
      "post" : {
        "description" : "Update onboarding state",
        "operationId" : "NotifyOnboarding",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/onboarding_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OnboardingAWSNotification"
              }
            }
          }
        },
        "responses" : {
          "202" : { },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/onboardings/aws/oidc/{onboarding_id}/accounts" : {
      "get" : {
        "description" : "Query AWS accounts under organization root",
        "operationId" : "GetAWSAccountsInRoot",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/onboarding_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingAWSAccounts"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/onboardings/aws/oidc/{onboarding_id}/accounts/{aws_orgunit_id}" : {
      "get" : {
        "description" : "Query AWS accounts under a specifc Organizational Unit",
        "operationId" : "GetAWSAccountsInParent",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/onboarding_id"
        }, {
          "$ref" : "#/components/parameters/aws_orgunit_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OnboardingAWSAccounts"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/onboardings/aws/oidc/{onboarding_id}/accounts/provision" : {
      "post" : {
        "description" : "Provision onboarding configuration into the cloud account",
        "operationId" : "ProvisionOnboardingConfiguration",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/onboarding_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OnboardingAWSProvision"
              }
            }
          }
        },
        "responses" : {
          "202" : { },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/plugins" : {
      "delete" : {
        "description" : "Delete plugins by team",
        "operationId" : "DeletePluginsByTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "responses" : {
          "204" : {
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ],
        "x-internal" : true
      },
      "get" : {
        "description" : "List all plugins for the team.",
        "operationId" : "ListPluginsByTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/include_private"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListPluginsByTeam_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      }
    },
    "/teams/{team_name}/plugins/{plugin_team}/{plugin_kind}/{plugin_name}/versions/{version_name}/assets/{target_name}" : {
      "get" : {
        "description" : "Download an asset for a given plugin version as the current team.",
        "operationId" : "DownloadPluginAssetByTeam",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/plugin_team"
        }, {
          "$ref" : "#/components/parameters/plugin_kind"
        }, {
          "$ref" : "#/components/parameters/plugin_name"
        }, {
          "$ref" : "#/components/parameters/version_name"
        }, {
          "$ref" : "#/components/parameters/target_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PluginAsset"
                }
              }
            },
            "description" : "Response"
          },
          "302" : {
            "description" : "Response",
            "headers" : {
              "Location" : {
                "explode" : false,
                "schema" : {
                  "type" : "string"
                },
                "style" : "simple"
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "429" : {
            "$ref" : "#/components/responses/TooManyRequests"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "plugins" ]
      }
    },
    "/teams/{team_name}/policies" : {
      "get" : {
        "description" : "List Policies",
        "operationId" : "ListPolicies",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "description" : "Filter policies by name.",
          "explode" : true,
          "in" : "query",
          "name" : "search_term",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/platform_policies_sort_bys"
        }, {
          "$ref" : "#/components/parameters/platform_policies_sort_dirs"
        }, {
          "description" : "DEPRECATED! Sorting order.",
          "explode" : true,
          "in" : "query",
          "name" : "sort",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListPolicies_200_response"
                }
              }
            },
            "description" : "List of policies."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "tags" : [ "policies" ]
      },
      "post" : {
        "description" : "Create Policy",
        "operationId" : "CreatePolicy",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PlatformCreateOrUpdatePolicy"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreatePolicy_201_response"
                }
              }
            },
            "description" : "Created policy."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        },
        "tags" : [ "policies" ]
      }
    },
    "/teams/{team_name}/policies/frameworks" : {
      "get" : {
        "description" : "List All Frameworks",
        "operationId" : "ListAllFrameworks",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListAllFrameworks_200_response"
                }
              }
            },
            "description" : "List of all frameworks."
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "tags" : [ "policies" ]
      }
    },
    "/teams/{team_name}/policies/{policy_id}" : {
      "delete" : {
        "description" : "Delete Policy",
        "operationId" : "DeletePolicy",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "description" : "ID of the policy.",
          "explode" : false,
          "in" : "path",
          "name" : "policy_id",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "204" : {
            "description" : "Policy deleted."
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "tags" : [ "policies" ]
      },
      "get" : {
        "description" : "Get Policy",
        "operationId" : "GetPolicy",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "description" : "ID of the policy.",
          "explode" : false,
          "in" : "path",
          "name" : "policy_id",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreatePolicy_201_response"
                }
              }
            },
            "description" : "Retrieved policy."
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "tags" : [ "policies" ]
      },
      "put" : {
        "description" : "Update Policy",
        "operationId" : "UpdatePolicy",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "description" : "ID of the policy.",
          "explode" : false,
          "in" : "path",
          "name" : "policy_id",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PlatformCreateOrUpdatePolicy"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreatePolicy_201_response"
                }
              }
            },
            "description" : "Updated policy."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "tags" : [ "policies" ]
      }
    },
    "/teams/{team_name}/policies/{policy_id}/frameworks" : {
      "get" : {
        "description" : "List Policy Frameworks",
        "operationId" : "ListPolicyFrameworks",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "description" : "ID of the policy.",
          "explode" : false,
          "in" : "path",
          "name" : "policy_id",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/platform_policy_frameworks_sort_bys"
        }, {
          "$ref" : "#/components/parameters/platform_policies_sort_dirs"
        }, {
          "description" : "Filter rules by name.",
          "explode" : true,
          "in" : "query",
          "name" : "search_term",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "DEPRECATED! Sorting order.",
          "explode" : true,
          "in" : "query",
          "name" : "sort",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListAllFrameworks_200_response"
                }
              }
            },
            "description" : "List of policy frameworks."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "tags" : [ "policies" ]
      }
    },
    "/teams/{team_name}/policies/{policy_id}/rules" : {
      "get" : {
        "description" : "List Policy Rules",
        "operationId" : "ListPolicyRules",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "description" : "ID of the policy.",
          "explode" : false,
          "in" : "path",
          "name" : "policy_id",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/platform_policy_rules_sort_bys"
        }, {
          "$ref" : "#/components/parameters/platform_policies_sort_dirs"
        }, {
          "description" : "Filter rules by name.",
          "explode" : true,
          "in" : "query",
          "name" : "search_term",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Sorting order.",
          "explode" : true,
          "in" : "query",
          "name" : "sort",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListPolicyRules_200_response"
                }
              }
            },
            "description" : "List of policy rules."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "tags" : [ "policies" ]
      }
    },
    "/teams/{team_name}/policies/{policy_id}/rules/{rule_id}/details" : {
      "get" : {
        "description" : "List Policy Rule Details",
        "operationId" : "ListPolicyRuleDetails",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "description" : "ID of the policy.",
          "explode" : false,
          "in" : "path",
          "name" : "policy_id",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "ID of the rule.",
          "explode" : false,
          "in" : "path",
          "name" : "rule_id",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/platform_policy_rule_details_sort_bys"
        }, {
          "$ref" : "#/components/parameters/platform_policies_sort_dirs"
        }, {
          "description" : "Filter rules by name.",
          "explode" : true,
          "in" : "query",
          "name" : "search_term",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "DEPRECATED! Sorting order.",
          "explode" : true,
          "in" : "query",
          "name" : "sort",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListPolicyRuleDetails_200_response"
                }
              }
            },
            "description" : "List of policy rule details."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "tags" : [ "policies" ]
      }
    },
    "/teams/{team_name}/policies/{policy_id}/toggle" : {
      "post" : {
        "description" : "Toggle Policy status",
        "operationId" : "TogglePolicy",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "description" : "ID of the policy.",
          "explode" : false,
          "in" : "path",
          "name" : "policy_id",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "explode" : true,
          "in" : "query",
          "name" : "status",
          "required" : true,
          "schema" : {
            "enum" : [ "paused", "active" ],
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "description" : "Toggled policy state."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "tags" : [ "policies" ]
      }
    },
    "/teams/{team_name}/policies/{policy_id}/violations-history" : {
      "get" : {
        "description" : "Get Policy Violations History for defined period.",
        "operationId" : "GetPolicyViolationsHistory",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "description" : "ID of the policy.",
          "explode" : false,
          "in" : "path",
          "name" : "policy_id",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "A valid ISO 8601 date string representing the inclusive start of the period within which to return history entities. Defaults to start of current month if not specified.",
          "explode" : true,
          "in" : "query",
          "name" : "start",
          "required" : false,
          "schema" : {
            "format" : "date-time",
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "A valid ISO 8601 date string representing the exclusive end of the period within which to return history entities. Defaults to end of current month if not specified.",
          "explode" : true,
          "in" : "query",
          "name" : "end",
          "required" : false,
          "schema" : {
            "format" : "date-time",
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPolicyViolationsHistory_200_response"
                }
              }
            },
            "description" : "List of policy violation history entities, sorted by descending date. Where no history for a given day, no object will be returned. Where multiple, the max will be returned."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          }
        },
        "tags" : [ "policies" ]
      }
    },
    "/teams/{team_name}/queries" : {
      "get" : {
        "description" : "List all queries",
        "operationId" : "ListAllQueriesTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/query_tags"
        }, {
          "$ref" : "#/components/parameters/query_name_filter"
        }, {
          "$ref" : "#/components/parameters/query_filter"
        }, {
          "$ref" : "#/components/parameters/alert_configured"
        }, {
          "$ref" : "#/components/parameters/alert_message_filter"
        }, {
          "$ref" : "#/components/parameters/alert_enabled"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListAllQueriesTeam_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "queries" ]
      }
    },
    "/teams/{team_name}/queries/execute" : {
      "post" : {
        "description" : "Run an ad-hoc SQL query against any table.\nFurther filtering can optionally be applied on top of the raw SQL results using the optional parameters. Filtering can be useful in situations where a saved query needs to be further filtered, grouped or paginated, such as in dashboards or reports.\n",
        "operationId" : "ExecuteAdHocQueryTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/table_selects"
        }, {
          "$ref" : "#/components/parameters/table_filter_mode"
        }, {
          "$ref" : "#/components/parameters/table_filters"
        }, {
          "$ref" : "#/components/parameters/table_filter_ids"
        }, {
          "$ref" : "#/components/parameters/table_sort_bys"
        }, {
          "$ref" : "#/components/parameters/table_sort_dirs"
        }, {
          "$ref" : "#/components/parameters/table_group_bys"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExecuteAdHocQueryTeam_request"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableListRows_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "queries" ]
      }
    },
    "/teams/{team_name}/queries/save" : {
      "post" : {
        "description" : "Save a query to execute later",
        "operationId" : "SaveQueryTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/QueryCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/QueryDetail"
                }
              }
            },
            "description" : "Success"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "queries" ]
      }
    },
    "/teams/{team_name}/queries/tags" : {
      "get" : {
        "description" : "List Query Tags",
        "operationId" : "ListQueryTagsTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListQueryTagsTeam_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "queries" ]
      }
    },
    "/teams/{team_name}/queries/{query_id}" : {
      "delete" : {
        "description" : "Delete a saved query",
        "operationId" : "DeleteSavedQueryTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/query_id"
        } ],
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "queries" ]
      },
      "get" : {
        "description" : "Get a saved query",
        "operationId" : "GetSavedQueryTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/query_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/QueryDetail"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "queries" ]
      },
      "patch" : {
        "description" : "Update a saved query",
        "operationId" : "UpdateQueryTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/query_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/QueryUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/QueryDetail"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "queries" ]
      }
    },
    "/teams/{team_name}/queries/{query_id}/alert" : {
      "delete" : {
        "description" : "Delete alert from saved query",
        "operationId" : "DeleteAlert",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/query_id"
        } ],
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "queries", "alerts" ]
      }
    },
    "/teams/{team_name}/queries/{query_id}/execute" : {
      "post" : {
        "description" : "Execute a saved query",
        "operationId" : "ExecuteSavedQueryTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/query_id"
        }, {
          "$ref" : "#/components/parameters/table_selects"
        }, {
          "$ref" : "#/components/parameters/table_filter_mode"
        }, {
          "$ref" : "#/components/parameters/table_filters"
        }, {
          "$ref" : "#/components/parameters/table_filter_ids"
        }, {
          "$ref" : "#/components/parameters/table_sort_bys"
        }, {
          "$ref" : "#/components/parameters/table_sort_dirs"
        }, {
          "$ref" : "#/components/parameters/table_group_bys"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableListRows_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "queries" ]
      }
    },
    "/teams/{team_name}/queries/{query_id}/filters" : {
      "get" : {
        "description" : "List Query Filters",
        "operationId" : "QueryListFiltersTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/query_id"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/filter_tags"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListFilters_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "queries", "filters" ]
      },
      "post" : {
        "description" : "Save Query Filter",
        "operationId" : "QuerySaveFilterTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/query_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilterCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Filter"
                }
              }
            },
            "description" : "Filter already exists"
          },
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Filter"
                }
              }
            },
            "description" : "Filter created"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "queries", "filters" ]
      }
    },
    "/teams/{team_name}/queries/{query_id}/filters/tags" : {
      "get" : {
        "description" : "List Filter Tags For A Saved Query",
        "operationId" : "QueryListFilterTagsTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/query_id"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListFilterTags_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "queries", "filters" ]
      }
    },
    "/teams/{team_name}/reports" : {
      "get" : {
        "description" : "List reports",
        "operationId" : "ListReports",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "description" : "Filter reports by title or description.",
          "explode" : true,
          "in" : "query",
          "name" : "search_term",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "explode" : true,
          "in" : "query",
          "name" : "visibility",
          "required" : false,
          "schema" : {
            "enum" : [ "private", "public" ],
            "type" : "string"
          },
          "style" : "form"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/report_sort_bys"
        }, {
          "$ref" : "#/components/parameters/report_sort_dirs"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListReports_200_response"
                }
              }
            },
            "description" : "List of reports."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "tags" : [ "reports" ]
      },
      "post" : {
        "description" : "Create Report",
        "operationId" : "CreateReport",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReportCreateOrUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateReport_201_response"
                }
              }
            },
            "description" : "Created report."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        },
        "tags" : [ "reports" ]
      }
    },
    "/teams/{team_name}/reports/{report_id}" : {
      "delete" : {
        "description" : "Delete Report",
        "operationId" : "DeleteReport",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "description" : "ID of the report.",
          "explode" : false,
          "in" : "path",
          "name" : "report_id",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "204" : {
            "description" : "Report deleted."
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "tags" : [ "reports" ]
      },
      "get" : {
        "description" : "Get Report",
        "operationId" : "GetReport",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "description" : "ID of the report.",
          "explode" : false,
          "in" : "path",
          "name" : "report_id",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateReport_201_response"
                }
              }
            },
            "description" : "Retrieved report."
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "tags" : [ "reports" ]
      },
      "put" : {
        "description" : "Update Report",
        "operationId" : "UpdateReport",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "description" : "ID of the report.",
          "explode" : false,
          "in" : "path",
          "name" : "report_id",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReportCreateOrUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateReport_201_response"
                }
              }
            },
            "description" : "Updated report."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "tags" : [ "reports" ]
      }
    },
    "/teams/{team_name}/reports/templates" : {
      "get" : {
        "description" : "List report templates",
        "operationId" : "ListReportTemplates",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "description" : "Filter report templates by name.",
          "explode" : true,
          "in" : "query",
          "name" : "search_term",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/report_templates_sort_bys"
        }, {
          "$ref" : "#/components/parameters/report_templates_sort_dirs"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListReportTemplates_200_response"
                }
              }
            },
            "description" : "List of report templates."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "tags" : [ "reports" ]
      },
      "post" : {
        "description" : "Create Report Template",
        "operationId" : "CreateReportTemplate",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReportTemplateCreateOrUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateReportTemplate_201_response"
                }
              }
            },
            "description" : "Created report template."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        },
        "tags" : [ "reports" ]
      }
    },
    "/teams/{team_name}/reports/templates/{template_id}" : {
      "delete" : {
        "description" : "Delete Report Template",
        "operationId" : "DeleteReportTemplate",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "description" : "ID of the report template.",
          "explode" : false,
          "in" : "path",
          "name" : "template_id",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "204" : {
            "description" : "Report template deleted."
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "tags" : [ "reports" ]
      },
      "get" : {
        "description" : "Get Report Template",
        "operationId" : "GetReportTemplate",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "description" : "ID of the report template.",
          "explode" : false,
          "in" : "path",
          "name" : "template_id",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateReportTemplate_201_response"
                }
              }
            },
            "description" : "Retrieved report template."
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "tags" : [ "reports" ]
      },
      "put" : {
        "description" : "Update Report Template",
        "operationId" : "UpdateReportTemplate",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "description" : "ID of the report template.",
          "explode" : false,
          "in" : "path",
          "name" : "template_id",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReportTemplateCreateOrUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateReportTemplate_201_response"
                }
              }
            },
            "description" : "Updated report template."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "tags" : [ "reports" ]
      }
    },
    "/teams/{team_name}/sync-destination-test-connections" : {
      "post" : {
        "description" : "Create a test destination connection.",
        "operationId" : "CreateSyncDestinationTestConnection",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncDestinationTestConnectionCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncDestinationTestConnection"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "429" : {
            "$ref" : "#/components/responses/TooManyRequests"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-destination-test-connections/{sync_destination_test_connection_id}" : {
      "get" : {
        "description" : "Get a sync destination test connection.",
        "operationId" : "GetSyncDestinationTestConnection",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_destination_test_connection_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncDestinationTestConnection"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "patch" : {
        "description" : "Update a sync destination test connection.",
        "operationId" : "UpdateSyncTestConnectionForSyncDestination",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_destination_test_connection_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateSyncTestConnectionForSyncDestination_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncDestinationTestConnection"
                }
              }
            },
            "description" : "Updated"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-destination-test-connections/{sync_destination_test_connection_id}/logs" : {
      "get" : {
        "deprecated" : true,
        "description" : "Deprecated. Get logs for a sync destination test connection.",
        "operationId" : "GetSyncDestinationTestConnectionLogs",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_destination_test_connection_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Test_Connection_Logs"
                }
              },
              "text/plain" : {
                "schema" : {
                  "description" : "Chunked response logs for a test connection that is in progress.",
                  "type" : "string"
                }
              }
            },
            "description" : "Response"
          },
          "204" : {
            "description" : "No logs available for a test connection that has not started."
          },
          "302" : {
            "description" : "Redirect to the logs download URL for a test connection that has completed.",
            "headers" : {
              "Location" : {
                "explode" : false,
                "schema" : {
                  "description" : "URL to download logs",
                  "type" : "string"
                },
                "style" : "simple"
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-destination-test-connections/{sync_destination_test_connection_id}/logs/query" : {
      "get" : {
        "description" : "Get logs for a sync destination test connection.",
        "operationId" : "GetSyncDestinationTestConnectionLogsQuery",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_destination_test_connection_id"
        }, {
          "$ref" : "#/components/parameters/table_filters"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableListRows_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "204" : {
            "description" : "No logs available for a test connection that has not started."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-destination-test-connections/{sync_destination_test_connection_id}/logs/live" : {
      "get" : {
        "description" : "Get live logs for a sync destination test connection.",
        "operationId" : "GetSyncDestinationTestConnectionLogsLive",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_destination_test_connection_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "schema" : {
                  "description" : "Chunked response logs for a test connection that is in progress.",
                  "type" : "string"
                }
              }
            },
            "description" : "Response"
          },
          "204" : {
            "description" : "No logs available for a test connection that has not started."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-destination-test-connections/{sync_destination_test_connection_id}/promote" : {
      "post" : {
        "description" : "Promote a sync destination test connection to a sync destination.",
        "operationId" : "PromoteSyncDestinationTestConnection",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_destination_test_connection_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PromoteSyncDestinationTestConnection"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncDestination"
                }
              }
            },
            "description" : "Successful response indicating that an existing sync destination was replaced."
          },
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncDestination"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-destinations" : {
      "get" : {
        "description" : "List all sync destination definitions.",
        "operationId" : "ListSyncDestinations",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/sync_name_filter"
        }, {
          "$ref" : "#/components/parameters/sync_generic_sort_bys"
        }, {
          "$ref" : "#/components/parameters/sync_sort_dirs"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListSyncDestinations_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-destinations/{sync_destination_name}" : {
      "delete" : {
        "description" : "Delete a Sync Destination definition. Any syncs relying on this destination must be deleted first.",
        "operationId" : "DeleteSyncDestination",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_destination_name"
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "get" : {
        "description" : "Get a single sync destination definition.",
        "operationId" : "GetSyncDestination",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_destination_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncDestination"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "patch" : {
        "description" : "Update a Sync Destination definition.",
        "operationId" : "UpdateSyncDestination",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_destination_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncDestinationUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncDestination"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-destinations/{sync_destination_name}/migrate" : {
      "post" : {
        "description" : "Run migrations on all syncs which use this Sync Destination.",
        "operationId" : "MigrateSyncDestination",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_destination_name"
        } ],
        "responses" : {
          "204" : {
            "description" : "Migrations have been queued for all syncs using this Sync Destination."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-destinations/{sync_destination_name}/syncs" : {
      "get" : {
        "description" : "List all Syncs for a given sync destination.",
        "operationId" : "ListSyncDestinationSyncs",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_destination_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/sync_sort_bys"
        }, {
          "$ref" : "#/components/parameters/sync_sort_dirs"
        }, {
          "$ref" : "#/components/parameters/sync_name_filter"
        }, {
          "$ref" : "#/components/parameters/migration_filter"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListSyncDestinationSyncs_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-destinations/{sync_destination_name}/test-connections/{sync_test_connection_id}" : {
      "get" : {
        "description" : "Get test connection details for sync destination.",
        "operationId" : "GetTestConnectionForSyncDestination",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_destination_name"
        }, {
          "$ref" : "#/components/parameters/sync_test_connection_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncTestConnection"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-source-test-connections" : {
      "post" : {
        "description" : "Create a test source connection.",
        "operationId" : "CreateSyncSourceTestConnection",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncSourceTestConnectionCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncSourceTestConnection"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "429" : {
            "$ref" : "#/components/responses/TooManyRequests"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-source-test-connections/{sync_source_test_connection_id}" : {
      "get" : {
        "description" : "Get a sync source test connection.",
        "operationId" : "GetSyncSourceTestConnection",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_source_test_connection_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncSourceTestConnection"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "patch" : {
        "description" : "Update a sync source test connection.",
        "operationId" : "UpdateSyncTestConnectionForSyncSource",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_source_test_connection_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateSyncTestConnectionForSyncDestination_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncSourceTestConnection"
                }
              }
            },
            "description" : "Updated"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-source-test-connections/{sync_source_test_connection_id}/logs" : {
      "get" : {
        "deprecated" : true,
        "description" : "Deprecated. Get logs for a sync source test connection.",
        "operationId" : "GetSyncSourceTestConnectionLogs",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_source_test_connection_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Test_Connection_Logs"
                }
              },
              "text/plain" : {
                "schema" : {
                  "description" : "Chunked response logs for a test connection that is in progress.",
                  "type" : "string"
                }
              }
            },
            "description" : "Response"
          },
          "204" : {
            "description" : "No logs available for a test connection that has not started."
          },
          "302" : {
            "description" : "Redirect to the logs download URL for a test connection that has completed.",
            "headers" : {
              "Location" : {
                "explode" : false,
                "schema" : {
                  "description" : "URL to download logs",
                  "type" : "string"
                },
                "style" : "simple"
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-source-test-connections/{sync_source_test_connection_id}/logs/query" : {
      "get" : {
        "description" : "Get logs for a sync source test connection.",
        "operationId" : "GetSyncSourceTestConnectionLogsQuery",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_source_test_connection_id"
        }, {
          "$ref" : "#/components/parameters/table_filters"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableListRows_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "204" : {
            "description" : "No logs available for a test connection that has not started."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-source-test-connections/{sync_source_test_connection_id}/logs/live" : {
      "get" : {
        "description" : "Get live logs for a sync source test connection.",
        "operationId" : "GetSyncSourceTestConnectionLogsLive",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_source_test_connection_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "schema" : {
                  "description" : "Chunked response logs for a test connection that is in progress.",
                  "type" : "string"
                }
              }
            },
            "description" : "Response"
          },
          "204" : {
            "description" : "No logs available for a test connection that has not started."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-source-test-connections/{sync_source_test_connection_id}/promote" : {
      "post" : {
        "description" : "Promote a sync source test connection to a sync source.",
        "operationId" : "PromoteSyncSourceTestConnection",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_source_test_connection_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PromoteSyncSourceTestConnection"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncSource"
                }
              }
            },
            "description" : "Successful response indicating that an existing sync source was replaced."
          },
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncSource"
                }
              }
            },
            "description" : "Successful response indicating that a new sync source was created."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-sources" : {
      "get" : {
        "description" : "List all sync source definitions.",
        "operationId" : "ListSyncSources",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/sync_name_filter"
        }, {
          "$ref" : "#/components/parameters/sync_generic_sort_bys"
        }, {
          "$ref" : "#/components/parameters/sync_sort_dirs"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListSyncSources_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-sources/{sync_source_name}" : {
      "delete" : {
        "description" : "Delete a Sync Source definition. Any syncs relying on this source must be deleted first.",
        "operationId" : "DeleteSyncSource",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_source_name"
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "get" : {
        "description" : "Get a single sync source definition.",
        "operationId" : "GetSyncSource",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_source_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncSource"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "patch" : {
        "description" : "Update a Sync Source definition.",
        "operationId" : "UpdateSyncSource",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_source_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncSourceUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncSource"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-sources/{sync_source_name}/migrate" : {
      "post" : {
        "description" : "Run migrations on all syncs which use this Sync Source.",
        "operationId" : "MigrateSyncSource",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_source_name"
        } ],
        "responses" : {
          "204" : {
            "description" : "Migrations have been queued for all syncs using this Sync Source."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-sources/{sync_source_name}/syncs" : {
      "get" : {
        "description" : "List all Syncs for a given sync source.",
        "operationId" : "ListSyncSourceSyncs",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_source_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/sync_sort_bys"
        }, {
          "$ref" : "#/components/parameters/sync_sort_dirs"
        }, {
          "$ref" : "#/components/parameters/sync_name_filter"
        }, {
          "$ref" : "#/components/parameters/migration_filter"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListSyncDestinationSyncs_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-sources/{sync_source_name}/test-connections/{sync_test_connection_id}" : {
      "get" : {
        "description" : "Get test connection details for sync source.",
        "operationId" : "GetTestConnectionForSyncSource",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_source_name"
        }, {
          "$ref" : "#/components/parameters/sync_test_connection_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncTestConnection"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-transformer-test-connections" : {
      "post" : {
        "description" : "Create a test transformer connection.",
        "operationId" : "CreateSyncTransformerTestConnection",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncTransformerTestConnectionCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncTransformerTestConnection"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "429" : {
            "$ref" : "#/components/responses/TooManyRequests"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-transformer-test-connections/{sync_transformer_test_connection_id}" : {
      "get" : {
        "description" : "Get a sync transformer test connection.",
        "operationId" : "GetSyncTransformerTestConnection",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_transformer_test_connection_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncTransformerTestConnection"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "patch" : {
        "description" : "Update a sync transformer test connection.",
        "operationId" : "UpdateSyncTestConnectionForSyncTransformer",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_transformer_test_connection_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateSyncTestConnectionForSyncDestination_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncTransformerTestConnection"
                }
              }
            },
            "description" : "Updated"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-transformer-test-connections/{sync_transformer_test_connection_id}/logs" : {
      "get" : {
        "description" : "Get logs for a sync transformer test connection.",
        "operationId" : "GetSyncTransformerTestConnectionLogs",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_transformer_test_connection_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Test_Connection_Logs"
                }
              },
              "text/plain" : {
                "schema" : {
                  "description" : "Chunked response logs for a test connection that is in progress.",
                  "type" : "string"
                }
              }
            },
            "description" : "Response"
          },
          "204" : {
            "description" : "No logs available for a test connection that has not started."
          },
          "302" : {
            "description" : "Redirect to the logs download URL for a test connection that has completed.",
            "headers" : {
              "Location" : {
                "explode" : false,
                "schema" : {
                  "description" : "URL to download logs",
                  "type" : "string"
                },
                "style" : "simple"
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-transformer-test-connections/{sync_transformer_test_connection_id}/promote" : {
      "post" : {
        "description" : "Promote a sync transformer test connection to a sync transformer.",
        "operationId" : "PromoteSyncTransformerTestConnection",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_transformer_test_connection_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PromoteSyncTransformerTestConnection"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncTransformer"
                }
              }
            },
            "description" : "Successful response indicating that an existing sync transformer was replaced."
          },
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncTransformer"
                }
              }
            },
            "description" : "Successful response indicating that a new sync transformer was created."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-transformers" : {
      "get" : {
        "description" : "List all sync transformer definitions.",
        "operationId" : "ListSyncTransformers",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/sync_name_filter"
        }, {
          "$ref" : "#/components/parameters/sync_generic_sort_bys"
        }, {
          "$ref" : "#/components/parameters/sync_sort_dirs"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListSyncTransformers_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-transformers/{sync_transformer_name}" : {
      "delete" : {
        "description" : "Delete a Sync Transformer definition. Any syncs relying on this transformer must be deleted first.",
        "operationId" : "DeleteSyncTransformer",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_transformer_name"
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "get" : {
        "description" : "Get a single sync transformer definition.",
        "operationId" : "GetSyncTransformer",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_transformer_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncTransformer"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "patch" : {
        "description" : "Update a Sync Transformer definition.",
        "operationId" : "UpdateSyncTransformer",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_transformer_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncTransformerUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncTransformer"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-transformers/{sync_transformer_name}/syncs" : {
      "get" : {
        "description" : "List all Syncs for a given sync transformer.",
        "operationId" : "ListSyncTransformerSyncs",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_transformer_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListSyncTransformerSyncs_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-transformers/{sync_transformer_name}/sync-destinations" : {
      "get" : {
        "description" : "List all Sync Destinations for a given sync transformer.",
        "operationId" : "ListSyncTransformerSyncDestinations",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_transformer_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListSyncDestinations_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-transformers/{sync_transformer_name}/test-connections/{sync_test_connection_id}" : {
      "get" : {
        "description" : "Get test connection details for sync transformer.",
        "operationId" : "GetTestConnectionForSyncTransformer",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_transformer_name"
        }, {
          "$ref" : "#/components/parameters/sync_test_connection_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncTestConnection"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/sync-upgrades" : {
      "get" : {
        "description" : "List all version upgrades for syncs",
        "operationId" : "ListSyncUpgrades",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/sync_upgrades_sort_bys"
        }, {
          "$ref" : "#/components/parameters/sync_sort_dirs"
        }, {
          "$ref" : "#/components/parameters/sync_upgrades_path_filter"
        }, {
          "$ref" : "#/components/parameters/sync_upgrades_kind_filter"
        }, {
          "$ref" : "#/components/parameters/sync_upgrades_platform_version_filter"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListSyncUpgrades_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/syncs" : {
      "get" : {
        "description" : "List all Syncs.",
        "operationId" : "ListSyncs",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/sync_sort_bys"
        }, {
          "$ref" : "#/components/parameters/sync_sort_dirs"
        }, {
          "$ref" : "#/components/parameters/sync_name_filter"
        }, {
          "$ref" : "#/components/parameters/migration_filter"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListSyncDestinationSyncs_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "post" : {
        "description" : "Create new Sync definition. Sync runs can be scheduled automatically, or triggered manually after sync is created.",
        "operationId" : "CreateSync",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Sync"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/syncs/{sync_name}" : {
      "delete" : {
        "description" : "Delete Sync. This will delete Sync configuration and all associated sync runs, but will not delete the associated source and destination(s). These will need to be deleted separately.",
        "operationId" : "DeleteSync",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_name"
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "get" : {
        "description" : "Get a Sync",
        "operationId" : "GetSync",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Sync"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "patch" : {
        "description" : "Update a Sync",
        "operationId" : "UpdateSync",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Sync"
                }
              }
            },
            "description" : "Updated"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/syncs/{sync_name}/runs" : {
      "get" : {
        "description" : "List all Sync Runs.",
        "operationId" : "ListSyncRuns",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_name"
        }, {
          "$ref" : "#/components/parameters/migration_filter"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListSyncRuns_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "post" : {
        "description" : "Create new SyncRun. This will trigger a manual job run.",
        "operationId" : "CreateSyncRun",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_name"
        } ],
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncRun"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/syncs/{sync_name}/runs/{sync_run_id}" : {
      "get" : {
        "description" : "Get a Sync Run.",
        "operationId" : "GetSyncRun",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_name"
        }, {
          "$ref" : "#/components/parameters/sync_run_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncRunDetails"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      },
      "patch" : {
        "description" : "Update a SyncRun",
        "operationId" : "UpdateSyncRun",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_name"
        }, {
          "$ref" : "#/components/parameters/sync_run_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateSyncRun_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncRun"
                }
              }
            },
            "description" : "Updated"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/syncs/{sync_name}/runs/{sync_run_id}/logs" : {
      "get" : {
        "description" : "Deprecated. Get logs for a sync run.",
        "operationId" : "GetSyncRunLogs",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_name"
        }, {
          "$ref" : "#/components/parameters/sync_run_id"
        }, {
          "explode" : true,
          "in" : "query",
          "name" : "table",
          "required" : false,
          "schema" : {
            "description" : "Table name to filter logs by. Use a single dash (\"-\") as input to exclude all table-specific log lines.",
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Sync_Run_Logs"
                }
              },
              "text/plain" : {
                "schema" : {
                  "description" : "Chunked response logs for a sync run that is in progress.",
                  "type" : "string"
                }
              }
            },
            "description" : "Response"
          },
          "204" : {
            "description" : "No logs available for a sync run that has not started."
          },
          "302" : {
            "description" : "Redirect to the logs download URL for a sync run that has completed.",
            "headers" : {
              "Location" : {
                "explode" : false,
                "schema" : {
                  "description" : "URL to download logs",
                  "type" : "string"
                },
                "style" : "simple"
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/syncs/{sync_name}/runs/{sync_run_id}/logs/query" : {
      "get" : {
        "description" : "Get logs for a sync run.",
        "operationId" : "GetSyncRunLogsQuery",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_name"
        }, {
          "$ref" : "#/components/parameters/sync_run_id"
        }, {
          "$ref" : "#/components/parameters/table_filters"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableListRows_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "204" : {
            "description" : "No logs available for a test connection that has not started."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/syncs/{sync_name}/runs/{sync_run_id}/logs/live" : {
      "get" : {
        "description" : "Get live logs for a sync run.",
        "operationId" : "GetSyncRunLogsLive",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_name"
        }, {
          "$ref" : "#/components/parameters/sync_run_id"
        }, {
          "explode" : true,
          "in" : "query",
          "name" : "table",
          "required" : false,
          "schema" : {
            "description" : "Table name to filter logs by. Use a single dash (\"-\") as input to exclude all table-specific log lines.",
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "schema" : {
                  "description" : "Chunked response logs for a sync run that is in progress.",
                  "type" : "string"
                }
              }
            },
            "description" : "Response"
          },
          "204" : {
            "description" : "No logs available for a sync run that has not started."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/syncs/{sync_name}/runs/{sync_run_id}/progress" : {
      "post" : {
        "description" : "Create a new sync run progress update.",
        "operationId" : "CreateSyncRunProgress",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_name"
        }, {
          "$ref" : "#/components/parameters/sync_run_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateSyncRunProgress_request"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Progress was reported successfully"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ],
        "x-internal" : true
      }
    },
    "/teams/{team_name}/syncs/{sync_name}/runs/{sync_run_id}/stats" : {
      "get" : {
        "description" : "Get statistics on a Sync Run",
        "operationId" : "GetSyncRunStats",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_name"
        }, {
          "$ref" : "#/components/parameters/sync_run_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncRunStats"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/syncs/{sync_name}/runs/{sync_run_id}/tables" : {
      "get" : {
        "description" : "Get table details on a Sync Run",
        "operationId" : "GetSyncRunTables",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_name"
        }, {
          "$ref" : "#/components/parameters/sync_run_id"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/table_sort_bys"
        }, {
          "$ref" : "#/components/parameters/table_sort_dirs"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetSyncRunTables_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ]
      }
    },
    "/teams/{team_name}/syncs/{sync_name}/runs/{sync_run_id}/connector/{connector_id}/credentials" : {
      "get" : {
        "description" : "Get connector credentials for a sync run.",
        "operationId" : "GetSyncRunConnectorCredentials",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_name"
        }, {
          "$ref" : "#/components/parameters/sync_run_id"
        }, {
          "$ref" : "#/components/parameters/connector_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetSyncRunConnectorCredentials_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ],
        "x-internal" : true
      }
    },
    "/teams/{team_name}/syncs/{sync_name}/runs/{sync_run_id}/connector/{connector_id}/identity" : {
      "get" : {
        "description" : "Get connector identity for a sync run.",
        "operationId" : "GetSyncRunConnectorIdentity",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_name"
        }, {
          "$ref" : "#/components/parameters/sync_run_id"
        }, {
          "$ref" : "#/components/parameters/connector_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetSyncRunConnectorIdentity_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ],
        "x-internal" : true
      }
    },
    "/teams/{team_name}/syncs/test-connections/{sync_test_connection_id}/connector/{connector_id}/credentials" : {
      "get" : {
        "description" : "Get connector credentials for a test connection",
        "operationId" : "GetTestConnectionConnectorCredentials",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_test_connection_id"
        }, {
          "$ref" : "#/components/parameters/connector_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetSyncRunConnectorCredentials_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ],
        "x-internal" : true
      }
    },
    "/teams/{team_name}/syncs/test-connections/{sync_test_connection_id}/connector/{connector_id}/identity" : {
      "get" : {
        "description" : "Get connector identity for a test connection.",
        "operationId" : "GetTestConnectionConnectorIdentity",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/sync_test_connection_id"
        }, {
          "$ref" : "#/components/parameters/connector_id"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetSyncRunConnectorIdentity_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "syncs" ],
        "x-internal" : true
      }
    },
    "/teams/{team_name}/tables" : {
      "get" : {
        "description" : "List Tables",
        "operationId" : "ListTablesTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListTables_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "tables" ]
      }
    },
    "/teams/{team_name}/tables/{table_name}/data" : {
      "get" : {
        "description" : "List Table Rows",
        "operationId" : "TableListRowsTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/table_name"
        }, {
          "$ref" : "#/components/parameters/table_selects"
        }, {
          "$ref" : "#/components/parameters/table_filter_mode"
        }, {
          "$ref" : "#/components/parameters/table_filters"
        }, {
          "$ref" : "#/components/parameters/table_filter_ids"
        }, {
          "$ref" : "#/components/parameters/table_sort_bys"
        }, {
          "$ref" : "#/components/parameters/table_sort_dirs"
        }, {
          "$ref" : "#/components/parameters/table_group_bys"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableListRows_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "tables" ]
      }
    },
    "/teams/{team_name}/tables/{table_name}/data/{table_row_id}" : {
      "get" : {
        "description" : "Get Table row",
        "operationId" : "TableRowByIdTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/table_name"
        }, {
          "$ref" : "#/components/parameters/table_row_id"
        }, {
          "$ref" : "#/components/parameters/table_filter_mode"
        }, {
          "$ref" : "#/components/parameters/table_filters"
        }, {
          "$ref" : "#/components/parameters/table_filter_ids"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableRowById_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "tables" ]
      }
    },
    "/teams/{team_name}/tables/{table_name}/schema" : {
      "get" : {
        "description" : "Get Table Schema",
        "operationId" : "TableSchemaTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/table_name"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableSchema_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "tables" ]
      }
    },
    "/teams/{team_name}/tables/schemas" : {
      "get" : {
        "description" : "Get Table Schemas",
        "operationId" : "BatchTableSchemasTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "description" : "A list of table names to retrieve schemas for",
          "explode" : true,
          "in" : "query",
          "name" : "tables",
          "required" : true,
          "schema" : {
            "example" : [ "aws_ec2_instances", "aws_s3_buckets" ],
            "items" : {
              "minLength" : 1,
              "type" : "string"
            },
            "type" : "array"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchTableSchemas_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "tables" ]
      }
    },
    "/teams/{team_name}/tables/{table_name}/columns" : {
      "get" : {
        "description" : "Get Table Columns",
        "operationId" : "TableListColumnsTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/table_name"
        }, {
          "$ref" : "#/components/parameters/table_filter_mode"
        }, {
          "$ref" : "#/components/parameters/table_column_name_filter"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableListColumns_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "tables" ]
      }
    },
    "/teams/{team_name}/tables/{table_name}/columns/{column_name}/values" : {
      "get" : {
        "description" : "Get Table Column Values",
        "operationId" : "TableColumnListValuesTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/table_name"
        }, {
          "$ref" : "#/components/parameters/column_name"
        }, {
          "$ref" : "#/components/parameters/table_filter_mode"
        }, {
          "$ref" : "#/components/parameters/table_column_value_filter"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableColumnListValues_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "tables" ]
      }
    },
    "/teams/{team_name}/tables/{table_name}/filters" : {
      "get" : {
        "description" : "List Table Filters",
        "operationId" : "TableListFiltersTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/table_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/filter_tags"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListFilters_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "tables", "filters" ]
      },
      "post" : {
        "description" : "Save Table Filter",
        "operationId" : "TableSaveFilterTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/table_name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilterCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Filter"
                }
              }
            },
            "description" : "Filter already exists"
          },
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Filter"
                }
              }
            },
            "description" : "Filter created"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "tables", "filters" ]
      }
    },
    "/teams/{team_name}/tables/{table_name}/filters/tags" : {
      "get" : {
        "description" : "List Filter Tags For A Table",
        "operationId" : "TableListFilterTagsTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/table_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListFilterTags_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "queries", "filters" ]
      }
    },
    "/teams/{team_name}/tables/{table_name}/relations" : {
      "get" : {
        "description" : "List Table Relations",
        "operationId" : "TableListRelationsTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/table_name"
        }, {
          "description" : "Filter by related table name",
          "explode" : true,
          "in" : "query",
          "name" : "relation_name",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableListRelations_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "tables" ]
      }
    },
    "/teams/{team_name}/usage-summary" : {
      "get" : {
        "description" : "Get a summary of usage for the specified time range.",
        "operationId" : "GetTeamUsageSummary",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "explode" : true,
          "in" : "query",
          "name" : "metrics",
          "required" : false,
          "schema" : {
            "default" : [ "paid_rows" ],
            "description" : "A list of metrics to include in the response. Each metric must be one of the predefined valid values. If not provided, only `paid-rows` will be included.",
            "items" : {
              "enum" : [ "paid_rows", "cloud_vcpu_seconds", "cloud_vram_byte_seconds", "network_egress_bytes" ],
              "type" : "string"
            },
            "type" : "array"
          },
          "style" : "form"
        }, {
          "explode" : true,
          "in" : "query",
          "name" : "start",
          "required" : false,
          "schema" : {
            "description" : "A valid ISO-8601-formatted date and time, indicating the inclusive start of the query time range. Defaults to 30 days ago.",
            "format" : "date-time",
            "type" : "string"
          },
          "style" : "form"
        }, {
          "explode" : true,
          "in" : "query",
          "name" : "end",
          "required" : false,
          "schema" : {
            "description" : "A valid ISO-8601-formatted date and time, indicating the exclusive end of the query time range. Defaults to the current time.",
            "format" : "date-time",
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "An aggregation period to sum data over. In other words, data will be returned at this granularity. Currently only supports day and month.",
          "explode" : true,
          "in" : "query",
          "name" : "aggregation_period",
          "required" : false,
          "schema" : {
            "default" : "day",
            "enum" : [ "day", "month" ],
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageSummary"
                }
              }
            },
            "description" : "A summary of usage for the specified time range."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/usage-summary/{group_by}" : {
      "get" : {
        "description" : "Get a grouped summary of usage for the specified time range.",
        "operationId" : "GetGroupedTeamUsageSummary",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "explode" : false,
          "in" : "path",
          "name" : "group_by",
          "required" : true,
          "schema" : {
            "description" : "Group by usage summary. `plugin` and `price_category` groupings are only available for `paid-rows`.",
            "enum" : [ "price_category", "plugin", "sync_id" ],
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "explode" : true,
          "in" : "query",
          "name" : "metrics",
          "required" : false,
          "schema" : {
            "default" : [ "paid_rows" ],
            "description" : "A list of metrics to include in the response. Each metric must be one of the predefined valid values. If not provided, only `paid-rows` will be included.",
            "items" : {
              "enum" : [ "paid_rows", "cloud_vcpu_seconds", "cloud_vram_byte_seconds", "network_egress_bytes" ],
              "type" : "string"
            },
            "type" : "array"
          },
          "style" : "form"
        }, {
          "explode" : true,
          "in" : "query",
          "name" : "start",
          "required" : false,
          "schema" : {
            "description" : "A valid ISO-8601-formatted date and time, indicating the inclusive start of the query time range. Defaults to 30 days ago.",
            "format" : "date-time",
            "type" : "string"
          },
          "style" : "form"
        }, {
          "explode" : true,
          "in" : "query",
          "name" : "end",
          "required" : false,
          "schema" : {
            "description" : "A valid ISO-8601-formatted date and time, indicating the exclusive end of the query time range. Defaults to the current time.",
            "format" : "date-time",
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "An aggregation period to sum data over. In other words, data will be returned at this granularity. Currently only supports day and month.",
          "explode" : true,
          "in" : "query",
          "name" : "aggregation_period",
          "required" : false,
          "schema" : {
            "default" : "day",
            "enum" : [ "day", "month" ],
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageSummary"
                }
              }
            },
            "description" : "A summary of usage for the specified time range."
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/teams/{team_name}/users" : {
      "get" : {
        "description" : "List all users in the current team.",
        "operationId" : "ListUsersByTeam",
        "parameters" : [ {
          "$ref" : "#/components/parameters/team_name"
        }, {
          "$ref" : "#/components/parameters/per_page"
        }, {
          "$ref" : "#/components/parameters/page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListUsersByTeam_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "teams" ]
      }
    },
    "/upload/image" : {
      "post" : {
        "description" : "Get a URL to upload image that will be publicly accessible",
        "operationId" : "UploadImage",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UploadImage_request"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImageURL"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "images" ]
      }
    },
    "/user" : {
      "get" : {
        "description" : "Get the current authenticated user from the OAuth token\n",
        "operationId" : "GetCurrentUser",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCurrentUser_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCurrentUser_401_response"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "users" ]
      },
      "patch" : {
        "description" : "Update attributes for the current authenticated user from the OAuth token",
        "operationId" : "UpdateCurrentUser",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateCurrentUser_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "405" : {
            "$ref" : "#/components/responses/MethodNotAllowed"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "users" ]
      }
    },
    "/user/anon-event" : {
      "post" : {
        "description" : "Send an anonymous event",
        "operationId" : "SendAnonymousEvent",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SendAnonymousEvent_request"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "429" : {
            "$ref" : "#/components/responses/TooManyRequests"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ ],
        "tags" : [ "analytics" ],
        "x-internal" : true
      }
    },
    "/user/authenticate" : {
      "post" : {
        "description" : "Authenticate a user with password",
        "operationId" : "AuthenticateLocalUser",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AuthenticateLocalUser_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuthenticateLocalUser_200_response"
                }
              }
            },
            "description" : "Authentication is successful"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "405" : {
            "$ref" : "#/components/responses/MethodNotAllowed"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "429" : {
            "$ref" : "#/components/responses/TooManyRequests"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ ],
        "tags" : [ "users" ]
      }
    },
    "/user/change-password" : {
      "post" : {
        "description" : "Change user password",
        "operationId" : "ChangeLocalUserPassword",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChangeLocalUserPassword_request"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Successful",
            "headers" : {
              "Set-Cookie" : {
                "description" : "Reset session cookie",
                "explode" : false,
                "schema" : {
                  "example" : "__session=; HttpOnly; Secure; SameSite=None; Path=/; Max-Age=3600",
                  "type" : "string"
                },
                "style" : "simple"
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "405" : {
            "$ref" : "#/components/responses/MethodNotAllowed"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "users" ]
      }
    },
    "/user/customer" : {
      "patch" : {
        "description" : "Update customer details",
        "operationId" : "UpdateCustomer",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateCustomer_request"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Queued for processing"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "analytics" ],
        "x-internal" : true
      }
    },
    "/user/event" : {
      "post" : {
        "description" : "Send a user event",
        "operationId" : "SendUserEvent",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SendUserEvent_request"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "analytics" ],
        "x-internal" : true
      }
    },
    "/user/invitations" : {
      "get" : {
        "description" : "List of the current user's unaccepted invitations",
        "operationId" : "ListCurrentUserInvitations",
        "parameters" : [ {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListCurrentUserInvitations_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "users" ]
      }
    },
    "/user/totp/verify" : {
      "post" : {
        "description" : "Verify a one time password for MFA",
        "operationId" : "UserTOTPVerify",
        "parameters" : [ {
          "explode" : true,
          "in" : "cookie",
          "name" : "__cqp_sess",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserTOTPVerify_request"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Multifactor authentication is complete.",
            "headers" : {
              "Set-Cookie" : {
                "description" : "Session cookie",
                "explode" : false,
                "schema" : {
                  "example" : "__session=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9Cg...; HttpOnly; Secure; SameSite=None; Path=/; Max-Age=3600",
                  "type" : "string"
                },
                "style" : "simple"
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "405" : {
            "$ref" : "#/components/responses/MethodNotAllowed"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "users" ]
      }
    },
    "/user/totp" : {
      "delete" : {
        "description" : "Disable MFA for the current user",
        "operationId" : "UserTOTPDelete",
        "parameters" : [ ],
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "405" : {
            "$ref" : "#/components/responses/MethodNotAllowed"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "users" ]
      },
      "post" : {
        "description" : "Set up MFA for the current user",
        "operationId" : "UserTOTPSetup",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserTOTPSetup_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "405" : {
            "$ref" : "#/components/responses/MethodNotAllowed"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "users" ]
      }
    },
    "/user/local" : {
      "get" : {
        "description" : "Get the current authenticated local user",
        "operationId" : "GetCurrentLocalUser",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LocalUserWithTeams"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "users" ]
      }
    },
    "/user/login" : {
      "delete" : {
        "description" : "Logout a session",
        "operationId" : "LogoutUser",
        "responses" : {
          "204" : {
            "description" : "Logout is complete.",
            "headers" : {
              "Set-Cookie" : {
                "description" : "Empty session cookie",
                "explode" : false,
                "schema" : {
                  "example" : "__session=; HttpOnly; Secure; SameSite=None; Path=/; Max-Age=3600",
                  "type" : "string"
                },
                "style" : "simple"
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "405" : {
            "$ref" : "#/components/responses/MethodNotAllowed"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "users" ]
      },
      "post" : {
        "description" : "Start a session using ID token",
        "operationId" : "LoginUser",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LoginUser_request"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Authentication is complete.",
            "headers" : {
              "Set-Cookie" : {
                "description" : "Session cookie",
                "explode" : false,
                "schema" : {
                  "example" : "__session=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9Cg...; HttpOnly; Secure; SameSite=None; Path=/; Max-Age=3600",
                  "type" : "string"
                },
                "style" : "simple"
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "405" : {
            "$ref" : "#/components/responses/MethodNotAllowed"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ ],
        "tags" : [ "users" ]
      }
    },
    "/user/memberships" : {
      "get" : {
        "description" : "Get memberships that the user has accepted.",
        "operationId" : "GetCurrentUserMemberships",
        "parameters" : [ {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/per_page"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCurrentUserMemberships_200_response"
                }
              }
            },
            "description" : "Response"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "users" ]
      }
    },
    "/user/reset-password-token" : {
      "post" : {
        "description" : "Reset user password with token",
        "operationId" : "ResetLocalUserPassword",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResetLocalUserPassword_request"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Successful",
            "headers" : {
              "Set-Cookie" : {
                "description" : "Reset session cookie",
                "explode" : false,
                "schema" : {
                  "example" : "__session=; HttpOnly; Secure; SameSite=None; Path=/; Max-Age=3600",
                  "type" : "string"
                },
                "style" : "simple"
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "405" : {
            "$ref" : "#/components/responses/MethodNotAllowed"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ ],
        "tags" : [ "users" ]
      }
    },
    "/user/token" : {
      "post" : {
        "description" : "Start a CLI session and create a custom token",
        "operationId" : "CreateUserToken",
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateUserToken_201_response"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "cookieAuth" : [ ]
        } ],
        "tags" : [ "users" ],
        "x-internal" : true
      }
    },
    "/users/{user_id}" : {
      "delete" : {
        "description" : "Delete user",
        "operationId" : "DeleteUser",
        "parameters" : [ {
          "$ref" : "#/components/parameters/user_id"
        } ],
        "responses" : {
          "204" : {
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/RequiresAuthentication"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "422" : {
            "$ref" : "#/components/responses/UnprocessableEntity"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "tags" : [ "users" ],
        "x-internal" : true
      }
    },
    "/registry/auth" : {
      "get" : {
        "description" : "Performs authentication and authorization for our image registry.",
        "operationId" : "AuthRegistryRequest",
        "parameters" : [ {
          "description" : "Plugin version name",
          "example" : "v1.0.0",
          "explode" : false,
          "in" : "header",
          "name" : "X-Meta-Plugin-Version",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "User's team name",
          "explode" : false,
          "in" : "header",
          "name" : "X-Meta-User-Team-Name",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "Username used for `docker login`",
          "explode" : true,
          "in" : "query",
          "name" : "account",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Service requesting the JWT token",
          "explode" : true,
          "in" : "query",
          "name" : "service",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Multi-value string containing the repository being access and the operation type (push/pull)",
          "explode" : true,
          "in" : "query",
          "name" : "scope",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegistryAuthToken"
                }
              }
            },
            "description" : "Response"
          },
          "400" : {
            "$ref" : "#/components/responses/DockerError"
          },
          "401" : {
            "$ref" : "#/components/responses/DockerError"
          },
          "404" : {
            "$ref" : "#/components/responses/DockerError"
          },
          "422" : {
            "$ref" : "#/components/responses/DockerError"
          },
          "500" : {
            "$ref" : "#/components/responses/DockerError"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "tags" : [ "registry" ]
      }
    }
  },
  "components" : {
    "parameters" : {
      "per_page" : {
        "description" : "The number of results per page (max 1000).",
        "explode" : true,
        "in" : "query",
        "name" : "per_page",
        "required" : false,
        "schema" : {
          "default" : 100,
          "format" : "int64",
          "maximum" : 1000,
          "minimum" : 1,
          "type" : "integer"
        },
        "style" : "form"
      },
      "page" : {
        "description" : "Page number of the results to fetch",
        "explode" : true,
        "in" : "query",
        "name" : "page",
        "required" : false,
        "schema" : {
          "default" : 1,
          "format" : "int64",
          "minimum" : 1,
          "type" : "integer"
        },
        "style" : "form"
      },
      "filter_tags" : {
        "allowEmptyValue" : true,
        "description" : "Filter tags",
        "explode" : true,
        "in" : "query",
        "name" : "tag",
        "required" : false,
        "schema" : {
          "items" : {
            "$ref" : "#/components/schemas/FilterTag"
          },
          "type" : "array"
        },
        "style" : "form",
        "x-go-name" : "FilterTags"
      },
      "filter_name_filter" : {
        "explode" : true,
        "in" : "query",
        "name" : "name_filter",
        "required" : false,
        "schema" : {
          "description" : "Filter by filter name",
          "type" : "string"
        },
        "style" : "form"
      },
      "filter_expression_filter" : {
        "explode" : true,
        "in" : "query",
        "name" : "expression_filter",
        "required" : false,
        "schema" : {
          "description" : "Filter by filter expression",
          "type" : "string"
        },
        "style" : "form"
      },
      "filter_id" : {
        "explode" : false,
        "in" : "path",
        "name" : "filter_id",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/FilterID"
        },
        "style" : "simple",
        "x-go-name" : "FilterID"
      },
      "assetview_run_type" : {
        "allowEmptyValue" : true,
        "description" : "AssetView run type filters",
        "explode" : true,
        "in" : "query",
        "name" : "type",
        "required" : false,
        "schema" : {
          "items" : {
            "$ref" : "#/components/schemas/AssetViewRunType"
          },
          "type" : "array"
        },
        "style" : "form",
        "x-go-name" : "AssetViewRunTypes"
      },
      "team_name" : {
        "explode" : false,
        "in" : "path",
        "name" : "team_name",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/TeamName"
        },
        "style" : "simple"
      },
      "user_id" : {
        "explode" : false,
        "in" : "path",
        "name" : "user_id",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/UserID"
        },
        "style" : "simple",
        "x-go-name" : "UserID"
      },
      "plugin_sort_by" : {
        "description" : "The field to sort by",
        "explode" : true,
        "in" : "query",
        "name" : "sort_by",
        "required" : false,
        "schema" : {
          "enum" : [ "created_at", "updated_at", "name", "downloads" ],
          "type" : "string"
        },
        "style" : "form"
      },
      "plugin_include_release_stages" : {
        "allowEmptyValue" : true,
        "description" : "Include these release stages in the response",
        "explode" : true,
        "in" : "query",
        "name" : "include_release_stages",
        "required" : false,
        "schema" : {
          "items" : {
            "$ref" : "#/components/schemas/PluginReleaseStage"
          },
          "type" : "array"
        },
        "style" : "form"
      },
      "plugin_exclude_release_stages" : {
        "allowEmptyValue" : true,
        "description" : "Exclude these release stages from the response",
        "explode" : true,
        "in" : "query",
        "name" : "exclude_release_stages",
        "required" : false,
        "schema" : {
          "default" : [ "deprecated" ],
          "items" : {
            "$ref" : "#/components/schemas/PluginReleaseStage"
          },
          "type" : "array"
        },
        "style" : "form"
      },
      "plugin_kind" : {
        "explode" : false,
        "in" : "path",
        "name" : "plugin_kind",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/PluginKind"
        },
        "style" : "simple"
      },
      "plugin_name" : {
        "explode" : false,
        "in" : "path",
        "name" : "plugin_name",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/PluginName"
        },
        "style" : "simple"
      },
      "version_sort_by" : {
        "description" : "The field to sort by",
        "explode" : true,
        "in" : "query",
        "name" : "sort_by",
        "required" : false,
        "schema" : {
          "enum" : [ "created_at" ],
          "type" : "string"
        },
        "style" : "form"
      },
      "include_drafts" : {
        "description" : "Whether to include draft versions",
        "explode" : true,
        "in" : "query",
        "name" : "include_drafts",
        "required" : false,
        "schema" : {
          "type" : "boolean"
        },
        "style" : "form"
      },
      "include_prereleases" : {
        "description" : "Whether to include prerelease versions",
        "explode" : true,
        "in" : "query",
        "name" : "include_prereleases",
        "required" : false,
        "schema" : {
          "type" : "boolean"
        },
        "style" : "form"
      },
      "version_filter" : {
        "explode" : true,
        "in" : "query",
        "name" : "version_filter",
        "required" : false,
        "schema" : {
          "$ref" : "#/components/schemas/VersionFilter"
        },
        "style" : "form"
      },
      "version_name" : {
        "explode" : false,
        "in" : "path",
        "name" : "version_name",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/VersionName"
        },
        "style" : "simple"
      },
      "target_name" : {
        "explode" : false,
        "in" : "path",
        "name" : "target_name",
        "required" : true,
        "schema" : {
          "type" : "string"
        },
        "style" : "simple"
      },
      "table_name" : {
        "explode" : false,
        "in" : "path",
        "name" : "table_name",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/TableName"
        },
        "style" : "simple"
      },
      "table_selects" : {
        "allowEmptyValue" : true,
        "description" : "Table selects. This filters the columns that are returned in the result set.",
        "explode" : true,
        "in" : "query",
        "name" : "select",
        "required" : false,
        "schema" : {
          "items" : {
            "$ref" : "#/components/schemas/TableSelect"
          },
          "type" : "array"
        },
        "style" : "form",
        "x-go-type-skip-optional-pointer" : true,
        "x-go-name" : "Selects"
      },
      "table_filter_mode" : {
        "description" : "Table filter mode.\n\nSmart mode switches between column and search mode based on the filtered table and\n\nSearch mode allows searching deeply nested data but is not available on all tables as it requires a separate indexing step.\nSearch mode is only available on resource tables or queries derived from resource tables results that contain _cq_id and _cq_source_id.\nSearch mode may also be used against cloud_assets but it will only return results from resource tables.\n\nColumn mode searches purely using the columns in the table.\nIt will work on all table results but it is not optimized for arbitrary substring searches and so may be slow on larger tables.\n",
        "explode" : true,
        "in" : "query",
        "name" : "filter_mode",
        "required" : false,
        "schema" : {
          "default" : "smart",
          "enum" : [ "smart", "search", "column" ],
          "type" : "string"
        },
        "style" : "form"
      },
      "table_filters" : {
        "allowEmptyValue" : true,
        "description" : "Table filters. This filters the rows that are returned in the result set.",
        "explode" : true,
        "in" : "query",
        "name" : "filter",
        "required" : false,
        "schema" : {
          "items" : {
            "$ref" : "#/components/schemas/FilterExpression"
          },
          "type" : "array"
        },
        "style" : "form",
        "x-go-type-skip-optional-pointer" : true,
        "x-go-name" : "Filters"
      },
      "table_filter_ids" : {
        "description" : "Table filter IDs. These should be valid Saved Filter IDs. These filters\nwill be applied to the query results before returning them.\n",
        "explode" : true,
        "in" : "query",
        "name" : "filter_id",
        "required" : false,
        "schema" : {
          "items" : {
            "$ref" : "#/components/schemas/FilterID"
          },
          "type" : "array"
        },
        "style" : "form",
        "x-go-type-skip-optional-pointer" : true,
        "x-go-name" : "FilterIDs"
      },
      "table_sort_bys" : {
        "allowEmptyValue" : true,
        "description" : "Table sort by options. This sorts the rows that are returned in the result set.",
        "explode" : true,
        "in" : "query",
        "name" : "sort_by",
        "required" : false,
        "schema" : {
          "items" : {
            "$ref" : "#/components/schemas/TableSortBy"
          },
          "type" : "array"
        },
        "style" : "form",
        "x-go-type-skip-optional-pointer" : true,
        "x-go-name" : "SortBys"
      },
      "table_sort_dirs" : {
        "allowEmptyValue" : true,
        "description" : "Table sort direction options. This sorts the rows that are returned in the result set.",
        "explode" : true,
        "in" : "query",
        "name" : "sort_dir",
        "required" : false,
        "schema" : {
          "items" : {
            "$ref" : "#/components/schemas/TableSortDirection"
          },
          "type" : "array"
        },
        "style" : "form",
        "x-go-type-skip-optional-pointer" : true,
        "x-go-name" : "SortDirections"
      },
      "table_group_bys" : {
        "allowEmptyValue" : true,
        "description" : "Table group by options. This groups the rows that are returned in the result set by the given columns.",
        "explode" : true,
        "in" : "query",
        "name" : "group_by",
        "required" : false,
        "schema" : {
          "items" : {
            "$ref" : "#/components/schemas/TableGroupBy"
          },
          "type" : "array"
        },
        "style" : "form",
        "x-go-type-skip-optional-pointer" : true,
        "x-go-name" : "GroupBys"
      },
      "table_row_id" : {
        "explode" : false,
        "in" : "path",
        "name" : "table_row_id",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/TableRowID"
        },
        "style" : "simple"
      },
      "table_column_name_filter" : {
        "explode" : true,
        "in" : "query",
        "name" : "filter",
        "required" : false,
        "schema" : {
          "description" : "Filter by column name",
          "type" : "string"
        },
        "style" : "form"
      },
      "column_name" : {
        "explode" : false,
        "in" : "path",
        "name" : "column_name",
        "required" : true,
        "schema" : {
          "description" : "The name of a table column.",
          "type" : "string"
        },
        "style" : "simple"
      },
      "table_column_value_filter" : {
        "explode" : true,
        "in" : "query",
        "name" : "filter",
        "required" : false,
        "schema" : {
          "description" : "Filter by column value.",
          "type" : "string"
        },
        "style" : "form"
      },
      "alert_states" : {
        "allowEmptyValue" : true,
        "description" : "Alert states",
        "explode" : true,
        "in" : "query",
        "name" : "state",
        "required" : false,
        "schema" : {
          "items" : {
            "$ref" : "#/components/schemas/AlertState"
          },
          "type" : "array"
        },
        "style" : "form",
        "x-go-type-skip-optional-pointer" : true,
        "x-go-name" : "AlertStates"
      },
      "enabled" : {
        "description" : "Enabled",
        "explode" : true,
        "in" : "query",
        "name" : "enabled",
        "required" : false,
        "schema" : {
          "type" : "boolean"
        },
        "style" : "form"
      },
      "apikey_id" : {
        "explode" : false,
        "in" : "path",
        "name" : "apikey_id",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/APIKeyID"
        },
        "style" : "simple",
        "x-go-name" : "APIKeyID"
      },
      "connector_id" : {
        "explode" : false,
        "in" : "path",
        "name" : "connector_id",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/ConnectorID"
        },
        "style" : "simple",
        "x-go-name" : "ConnectorID"
      },
      "custom_columns_sort_bys" : {
        "allowEmptyValue" : true,
        "description" : "Sort by options",
        "explode" : true,
        "in" : "query",
        "name" : "sort_by",
        "required" : false,
        "schema" : {
          "items" : {
            "$ref" : "#/components/schemas/CustomColumnSortBy"
          },
          "type" : "array"
        },
        "style" : "form",
        "x-go-type-skip-optional-pointer" : true,
        "x-go-name" : "CustomColumnSortBys"
      },
      "custom_columns_sort_dirs" : {
        "allowEmptyValue" : true,
        "description" : "Custom column sort direction options",
        "explode" : true,
        "in" : "query",
        "name" : "sort_dir",
        "required" : false,
        "schema" : {
          "items" : {
            "$ref" : "#/components/schemas/CustomColumnSortDirection"
          },
          "type" : "array"
        },
        "style" : "form",
        "x-go-type-skip-optional-pointer" : true,
        "x-go-name" : "CustomColumnSortDirections"
      },
      "custom_column_id" : {
        "explode" : false,
        "in" : "path",
        "name" : "custom_column_id",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/CustomColumnID"
        },
        "style" : "simple",
        "x-go-name" : "CustomColumnID"
      },
      "email_basic" : {
        "explode" : false,
        "in" : "path",
        "name" : "email",
        "required" : true,
        "schema" : {
          "example" : "user@example.com",
          "type" : "string"
        },
        "style" : "simple"
      },
      "notification_destination_id" : {
        "explode" : false,
        "in" : "path",
        "name" : "notification_destination_id",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/NotificationDestinationID"
        },
        "style" : "simple",
        "x-go-name" : "NotificationDestinationID"
      },
      "onboarding_id" : {
        "explode" : false,
        "in" : "path",
        "name" : "onboarding_id",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/OnboardingID"
        },
        "style" : "simple",
        "x-go-name" : "OnboardingID"
      },
      "aws_orgunit_id" : {
        "explode" : false,
        "in" : "path",
        "name" : "aws_orgunit_id",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/OrganizationalUnitID"
        },
        "style" : "simple",
        "x-go-name" : "OrganizationalUnitID"
      },
      "include_private" : {
        "description" : "Whether to include private plugins",
        "explode" : true,
        "in" : "query",
        "name" : "include_private",
        "required" : false,
        "schema" : {
          "type" : "boolean"
        },
        "style" : "form"
      },
      "plugin_team" : {
        "explode" : false,
        "in" : "path",
        "name" : "plugin_team",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/TeamName"
        },
        "style" : "simple"
      },
      "platform_policies_sort_bys" : {
        "allowEmptyValue" : true,
        "description" : "Sort by options",
        "explode" : true,
        "in" : "query",
        "name" : "sort_by",
        "required" : false,
        "schema" : {
          "items" : {
            "$ref" : "#/components/schemas/PlatformPolicySortBy"
          },
          "type" : "array"
        },
        "style" : "form",
        "x-go-type-skip-optional-pointer" : true,
        "x-go-name" : "PlatformPolicySortBys"
      },
      "platform_policies_sort_dirs" : {
        "allowEmptyValue" : true,
        "description" : "Platform policies sort direction options",
        "explode" : true,
        "in" : "query",
        "name" : "sort_dir",
        "required" : false,
        "schema" : {
          "items" : {
            "$ref" : "#/components/schemas/PlatformPolicySortDirection"
          },
          "type" : "array"
        },
        "style" : "form",
        "x-go-type-skip-optional-pointer" : true,
        "x-go-name" : "PlatformPolicySortDirections"
      },
      "platform_policy_frameworks_sort_bys" : {
        "allowEmptyValue" : true,
        "description" : "Sort by options",
        "explode" : true,
        "in" : "query",
        "name" : "sort_by",
        "required" : false,
        "schema" : {
          "items" : {
            "$ref" : "#/components/schemas/PlatformPolicyFrameworkSortBy"
          },
          "type" : "array"
        },
        "style" : "form",
        "x-go-type-skip-optional-pointer" : true,
        "x-go-name" : "PlatformPolicyFrameworkSortBys"
      },
      "platform_policy_rules_sort_bys" : {
        "allowEmptyValue" : true,
        "description" : "Sort by options",
        "explode" : true,
        "in" : "query",
        "name" : "sort_by",
        "required" : false,
        "schema" : {
          "items" : {
            "$ref" : "#/components/schemas/PlatformPolicyRuleSortBy"
          },
          "type" : "array"
        },
        "style" : "form",
        "x-go-type-skip-optional-pointer" : true,
        "x-go-name" : "PlatformPolicyRuleSortBys"
      },
      "platform_policy_rule_details_sort_bys" : {
        "allowEmptyValue" : true,
        "description" : "Sort by options",
        "explode" : true,
        "in" : "query",
        "name" : "sort_by",
        "required" : false,
        "schema" : {
          "items" : {
            "$ref" : "#/components/schemas/PlatformPolicyRuleDetailSortBy"
          },
          "type" : "array"
        },
        "style" : "form",
        "x-go-type-skip-optional-pointer" : true,
        "x-go-name" : "PlatformPolicyRuleDetailSortBys"
      },
      "query_tags" : {
        "allowEmptyValue" : true,
        "description" : "Query tags",
        "explode" : true,
        "in" : "query",
        "name" : "tag",
        "required" : false,
        "schema" : {
          "items" : {
            "$ref" : "#/components/schemas/QueryTag"
          },
          "type" : "array"
        },
        "style" : "form",
        "x-go-type-skip-optional-pointer" : true,
        "x-go-name" : "QueryTags"
      },
      "query_name_filter" : {
        "explode" : true,
        "in" : "query",
        "name" : "name_filter",
        "required" : false,
        "schema" : {
          "description" : "Filter by query name.",
          "type" : "string"
        },
        "style" : "form"
      },
      "query_filter" : {
        "explode" : true,
        "in" : "query",
        "name" : "query_filter",
        "required" : false,
        "schema" : {
          "description" : "Filter by query",
          "type" : "string"
        },
        "style" : "form"
      },
      "alert_configured" : {
        "description" : "Alert configured",
        "explode" : true,
        "in" : "query",
        "name" : "alert_configured",
        "required" : false,
        "schema" : {
          "type" : "boolean"
        },
        "style" : "form"
      },
      "alert_message_filter" : {
        "explode" : true,
        "in" : "query",
        "name" : "alert_message_filter",
        "required" : false,
        "schema" : {
          "description" : "Filter by alert message.",
          "type" : "string"
        },
        "style" : "form"
      },
      "alert_enabled" : {
        "description" : "Alert enabled",
        "explode" : true,
        "in" : "query",
        "name" : "alert_enabled",
        "required" : false,
        "schema" : {
          "type" : "boolean"
        },
        "style" : "form"
      },
      "query_id" : {
        "explode" : false,
        "in" : "path",
        "name" : "query_id",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/QueryID"
        },
        "style" : "simple",
        "x-go-name" : "QueryID"
      },
      "report_sort_bys" : {
        "allowEmptyValue" : true,
        "description" : "Sort by options",
        "explode" : true,
        "in" : "query",
        "name" : "sort_by",
        "required" : false,
        "schema" : {
          "items" : {
            "$ref" : "#/components/schemas/ReportSortBy"
          },
          "type" : "array"
        },
        "style" : "form",
        "x-go-type-skip-optional-pointer" : true,
        "x-go-name" : "ReportSortBys"
      },
      "report_sort_dirs" : {
        "allowEmptyValue" : true,
        "description" : "Report sort direction options",
        "explode" : true,
        "in" : "query",
        "name" : "sort_dir",
        "required" : false,
        "schema" : {
          "items" : {
            "$ref" : "#/components/schemas/ReportSortDirection"
          },
          "type" : "array"
        },
        "style" : "form",
        "x-go-type-skip-optional-pointer" : true,
        "x-go-name" : "ReportSortDirections"
      },
      "report_templates_sort_bys" : {
        "allowEmptyValue" : true,
        "description" : "Sort by options",
        "explode" : true,
        "in" : "query",
        "name" : "sort_by",
        "required" : false,
        "schema" : {
          "items" : {
            "$ref" : "#/components/schemas/ReportTemplateSortBy"
          },
          "type" : "array"
        },
        "style" : "form",
        "x-go-type-skip-optional-pointer" : true,
        "x-go-name" : "ReportTemplateSortBys"
      },
      "report_templates_sort_dirs" : {
        "allowEmptyValue" : true,
        "description" : "Report template sort direction options",
        "explode" : true,
        "in" : "query",
        "name" : "sort_dir",
        "required" : false,
        "schema" : {
          "items" : {
            "$ref" : "#/components/schemas/ReportTemplateSortDirection"
          },
          "type" : "array"
        },
        "style" : "form",
        "x-go-type-skip-optional-pointer" : true,
        "x-go-name" : "ReportTemplateSortDirections"
      },
      "sync_destination_test_connection_id" : {
        "explode" : false,
        "in" : "path",
        "name" : "sync_destination_test_connection_id",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/SyncDestinationTestConnectionID"
        },
        "style" : "simple",
        "x-go-name" : "SyncDestinationTestConnectionID"
      },
      "sync_name_filter" : {
        "explode" : true,
        "in" : "query",
        "name" : "filter",
        "required" : false,
        "schema" : {
          "description" : "Filter by name or display name",
          "pattern" : "^[a-zA-Z\\p{L}\\p{N}_][a-zA-Z\\p{L}\\p{N}_ \\-']*$",
          "type" : "string",
          "x-pattern-message" : "can contain only letters, numbers, spaces, hyphens, underscores, and apostrophes"
        },
        "style" : "form"
      },
      "sync_generic_sort_bys" : {
        "allowEmptyValue" : true,
        "description" : "Sort by options",
        "explode" : true,
        "in" : "query",
        "name" : "sort_by",
        "required" : false,
        "schema" : {
          "items" : {
            "$ref" : "#/components/schemas/SyncGenericSortBy"
          },
          "type" : "array"
        },
        "style" : "form",
        "x-go-type-skip-optional-pointer" : true,
        "x-go-name" : "SyncGenericSortBys"
      },
      "sync_sort_dirs" : {
        "allowEmptyValue" : true,
        "description" : "Sync sort direction options",
        "explode" : true,
        "in" : "query",
        "name" : "sort_dir",
        "required" : false,
        "schema" : {
          "items" : {
            "$ref" : "#/components/schemas/SyncSortDirection"
          },
          "type" : "array"
        },
        "style" : "form",
        "x-go-type-skip-optional-pointer" : true,
        "x-go-name" : "SyncSortDirections"
      },
      "sync_destination_name" : {
        "explode" : false,
        "in" : "path",
        "name" : "sync_destination_name",
        "required" : true,
        "schema" : {
          "description" : "Unique name of the sync destination",
          "pattern" : "^[a-zA-Z0-9_-]+$",
          "type" : "string",
          "x-go-name" : "SyncDestinationName",
          "x-pattern-message" : "can contain only alphanumerical characters, dashes, and underscores"
        },
        "style" : "simple"
      },
      "sync_sort_bys" : {
        "allowEmptyValue" : true,
        "description" : "Sort by options",
        "explode" : true,
        "in" : "query",
        "name" : "sort_by",
        "required" : false,
        "schema" : {
          "items" : {
            "$ref" : "#/components/schemas/SyncSortBy"
          },
          "type" : "array"
        },
        "style" : "form",
        "x-go-type-skip-optional-pointer" : true,
        "x-go-name" : "SyncSortBys"
      },
      "migration_filter" : {
        "explode" : true,
        "in" : "query",
        "name" : "migration_filter",
        "required" : false,
        "schema" : {
          "description" : "Filter by migration",
          "type" : "boolean"
        },
        "style" : "form"
      },
      "sync_test_connection_id" : {
        "explode" : false,
        "in" : "path",
        "name" : "sync_test_connection_id",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/SyncTestConnectionID"
        },
        "style" : "simple"
      },
      "sync_source_test_connection_id" : {
        "explode" : false,
        "in" : "path",
        "name" : "sync_source_test_connection_id",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/SyncSourceTestConnectionID"
        },
        "style" : "simple",
        "x-go-name" : "SyncSourceTestConnectionID"
      },
      "sync_source_name" : {
        "explode" : false,
        "in" : "path",
        "name" : "sync_source_name",
        "required" : true,
        "schema" : {
          "description" : "Unique name of the sync source",
          "pattern" : "^[a-zA-Z0-9_-]+$",
          "type" : "string",
          "x-go-name" : "SyncSourceName",
          "x-pattern-message" : "can contain only alphanumerical characters, dashes, and underscores"
        },
        "style" : "simple"
      },
      "sync_transformer_test_connection_id" : {
        "explode" : false,
        "in" : "path",
        "name" : "sync_transformer_test_connection_id",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/SyncTransformerTestConnectionID"
        },
        "style" : "simple",
        "x-go-name" : "SyncTransformerTestConnectionID"
      },
      "sync_transformer_name" : {
        "explode" : false,
        "in" : "path",
        "name" : "sync_transformer_name",
        "required" : true,
        "schema" : {
          "description" : "Unique name of the sync transformer",
          "pattern" : "^[a-zA-Z0-9_-]+$",
          "type" : "string",
          "x-go-name" : "SyncTransformerName",
          "x-pattern-message" : "can contain only alphanumerical characters, dashes, and underscores"
        },
        "style" : "simple"
      },
      "sync_upgrades_sort_bys" : {
        "allowEmptyValue" : true,
        "description" : "Sort by options",
        "explode" : true,
        "in" : "query",
        "name" : "sort_by",
        "required" : false,
        "schema" : {
          "items" : {
            "enum" : [ "kind", "path", "prev_version", "new_version", "created_at" ],
            "type" : "string"
          },
          "type" : "array"
        },
        "style" : "form",
        "x-go-type-skip-optional-pointer" : true,
        "x-go-name" : "SyncUpgradesSortBys"
      },
      "sync_upgrades_path_filter" : {
        "explode" : true,
        "in" : "query",
        "name" : "path",
        "required" : false,
        "schema" : {
          "$ref" : "#/components/schemas/SyncPluginPath"
        },
        "style" : "form"
      },
      "sync_upgrades_kind_filter" : {
        "explode" : true,
        "in" : "query",
        "name" : "kind",
        "required" : false,
        "schema" : {
          "$ref" : "#/components/schemas/PluginKind"
        },
        "style" : "form"
      },
      "sync_upgrades_platform_version_filter" : {
        "explode" : true,
        "in" : "query",
        "name" : "platform_version",
        "required" : false,
        "schema" : {
          "description" : "Filter by platform version",
          "example" : "v1.1.0",
          "type" : "string"
        },
        "style" : "form"
      },
      "sync_name" : {
        "explode" : false,
        "in" : "path",
        "name" : "sync_name",
        "required" : true,
        "schema" : {
          "description" : "Unique name of the sync",
          "pattern" : "^[a-zA-Z0-9_-]+$",
          "type" : "string",
          "x-go-name" : "SyncName",
          "x-pattern-message" : "can contain only alphanumerical characters, dashes, and underscores"
        },
        "style" : "simple"
      },
      "sync_run_id" : {
        "explode" : false,
        "in" : "path",
        "name" : "sync_run_id",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/SyncRunID"
        },
        "style" : "simple"
      }
    },
    "responses" : {
      "RequiresAuthentication" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/BasicError"
            }
          }
        },
        "description" : "Requires authentication"
      },
      "Forbidden" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/FieldError"
            }
          }
        },
        "description" : "Forbidden"
      },
      "InternalError" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/BasicError"
            }
          }
        },
        "description" : "Internal Error"
      },
      "NotFound" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/BasicError"
            }
          }
        },
        "description" : "Resource not found"
      },
      "UnprocessableEntity" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/FieldError"
            }
          }
        },
        "description" : "UnprocessableEntity"
      },
      "BadRequest" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/FieldError"
            }
          }
        },
        "description" : "Bad request"
      },
      "TooManyRequests" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/BasicError"
            }
          }
        },
        "description" : "Too Many Requests"
      },
      "MethodNotAllowed" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/BasicError"
            }
          }
        },
        "description" : "Method not allowed"
      },
      "Conflict" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/BasicError"
            }
          }
        },
        "description" : "Conflict"
      },
      "DockerError" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/DockerError"
            }
          }
        },
        "description" : "Error Returned from the Docker Authorization Handler to the Docker Registry"
      }
    },
    "schemas" : {
      "UserName" : {
        "description" : "The unique name for the user.",
        "example" : "Sarah O'Connor",
        "maxLength" : 255,
        "minLength" : 1,
        "pattern" : "^[a-zA-Z\\p{L}][a-zA-Z\\p{L} \\-']*$",
        "type" : "string",
        "x-pattern-message" : "can contain only letters, spaces, hyphens, and apostrophes, starting with a letter"
      },
      "User" : {
        "additionalProperties" : false,
        "description" : "CloudQuery User",
        "properties" : {
          "created_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "id" : {
            "description" : "ID of the User",
            "example" : "12345678-1234-1234-1234-1234567890ab",
            "format" : "uuid",
            "type" : "string",
            "x-go-name" : "ID"
          },
          "email" : {
            "example" : "user@example.com",
            "type" : "string"
          },
          "name" : {
            "$ref" : "#/components/schemas/UserName"
          },
          "updated_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "profile_image_url" : {
            "description" : "Profile image URL of user",
            "type" : "string",
            "x-go-name" : "ProfileImageURL"
          },
          "last_login_at" : {
            "format" : "date-time",
            "type" : "string"
          }
        },
        "required" : [ "email", "id" ],
        "title" : "CloudQuery User"
      },
      "AuditLogEvent" : {
        "properties" : {
          "id" : {
            "description" : "The unique identifier of the audit log event",
            "format" : "uuid",
            "type" : "string"
          },
          "user" : {
            "$ref" : "#/components/schemas/User"
          },
          "user_ip_address" : {
            "description" : "The IP address of the user who performed the action",
            "type" : "string"
          },
          "team_name" : {
            "description" : "The name of the team associated with the event",
            "type" : "string",
            "nullable" : true
          },
          "event_type" : {
            "description" : "The type of event that was logged",
            "type" : "string"
          },
          "entity_display_name" : {
            "description" : "The display name of the entity that was affected",
            "type" : "string",
            "nullable" : true
          },
          "event_details" : {
            "additionalProperties" : false,
            "description" : "Additional details about the event",
            "type" : "object"
          },
          "is_success" : {
            "description" : "Whether the event was successful",
            "type" : "boolean"
          },
          "created_at" : {
            "description" : "The timestamp when the event was created",
            "format" : "date-time",
            "type" : "string"
          }
        },
        "required" : [ "created_at", "event_type", "id", "user", "user_ip_address" ]
      },
      "ListMetadata" : {
        "properties" : {
          "total_count" : {
            "type" : "integer"
          },
          "last_page" : {
            "type" : "integer"
          },
          "page_size" : {
            "type" : "integer"
          },
          "time_ms" : {
            "type" : "integer"
          }
        },
        "required" : [ "page_size" ]
      },
      "BasicError" : {
        "additionalProperties" : false,
        "description" : "Basic Error",
        "properties" : {
          "message" : {
            "type" : "string"
          },
          "status" : {
            "type" : "integer"
          }
        },
        "required" : [ "message", "status" ],
        "title" : "Basic Error"
      },
      "FieldError" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BasicError"
        }, {
          "properties" : {
            "errors" : {
              "items" : {
                "type" : "string"
              },
              "type" : "array"
            },
            "field_errors" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          }
        } ]
      },
      "FilterTag" : {
        "description" : "A table column filter tag.",
        "type" : "string"
      },
      "FilterExpression" : {
        "description" : "A table column filter.",
        "example" : "resource_type=aws_s3_buckets",
        "type" : "string"
      },
      "TableName" : {
        "description" : "The name of the table.",
        "example" : "cloud_assets",
        "type" : "string"
      },
      "QueryID" : {
        "description" : "The unique ID for the query.",
        "format" : "uuid",
        "type" : "string",
        "x-go-name" : "QueryID"
      },
      "UserID" : {
        "description" : "ID of the User",
        "example" : "12345678-1234-1234-1234-1234567890ab",
        "format" : "uuid",
        "type" : "string",
        "x-go-name" : "UserID"
      },
      "Filter" : {
        "additionalProperties" : false,
        "description" : "Saved filter",
        "properties" : {
          "id" : {
            "description" : "ID of the Filter",
            "example" : "12345678-1234-1234-1234-1234567890ab",
            "format" : "uuid",
            "type" : "string",
            "x-go-name" : "ID"
          },
          "name" : {
            "example" : "t2.micro EC2 instances",
            "type" : "string"
          },
          "expression" : {
            "$ref" : "#/components/schemas/FilterExpression"
          },
          "description" : {
            "example" : "Filter to find all EC2 instances of type t2.micro from the aws_ec2_instance raw table",
            "type" : "string"
          },
          "table" : {
            "$ref" : "#/components/schemas/TableName"
          },
          "query_id" : {
            "$ref" : "#/components/schemas/QueryID"
          },
          "user_id" : {
            "$ref" : "#/components/schemas/UserID"
          },
          "tags" : {
            "items" : {
              "$ref" : "#/components/schemas/FilterTag"
            },
            "type" : "array",
            "x-go-type-skip-optional-pointer" : true
          },
          "created_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          }
        },
        "required" : [ "created_at", "expression", "id", "name" ],
        "title" : "Filter"
      },
      "FilterID" : {
        "description" : "The unique ID for the filter.",
        "format" : "uuid",
        "type" : "string",
        "x-go-name" : "FilterID"
      },
      "FilterUpdate" : {
        "description" : "Filter Update Definition",
        "properties" : {
          "name" : {
            "example" : "t2.micro EC2 instances",
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "expression" : {
            "$ref" : "#/components/schemas/FilterExpression"
          },
          "tags" : {
            "items" : {
              "$ref" : "#/components/schemas/FilterTag"
            },
            "type" : "array"
          }
        },
        "title" : "Filter definition for updating a filter"
      },
      "AssetViewRunType" : {
        "description" : "Type of assetview run",
        "enum" : [ "client_table", "s3_source" ],
        "type" : "string"
      },
      "AssetViewRun" : {
        "properties" : {
          "id" : {
            "description" : "ID of the run",
            "example" : "12345678-1234-1234-1234-1234567890ab",
            "format" : "uuid",
            "type" : "string",
            "x-go-name" : "ID"
          },
          "type" : {
            "$ref" : "#/components/schemas/AssetViewRunType"
          },
          "triggered_by" : {
            "description" : "The user who triggered the run",
            "type" : "string"
          },
          "error_message" : {
            "description" : "The error message if the run failed",
            "type" : "string"
          },
          "created_at" : {
            "description" : "The time the run was created",
            "example" : "2020-01-01T00:00:00Z",
            "format" : "date-time",
            "type" : "string"
          },
          "finished_at" : {
            "description" : "The time the run was finished",
            "example" : "2020-01-01T00:00:00Z",
            "format" : "date-time",
            "type" : "string"
          }
        },
        "required" : [ "created_at", "id", "type" ]
      },
      "Role" : {
        "description" : "User roles",
        "enum" : [ "admin:write", "admin:read", "general:read", "general:write" ],
        "type" : "string"
      },
      "SAMLConfig" : {
        "additionalProperties" : false,
        "properties" : {
          "platform_base_url" : {
            "description" : "Base URL to the platform.",
            "format" : "url",
            "type" : "string",
            "x-go-name" : "PlatformBaseURL"
          },
          "platform_sso_url" : {
            "description" : "SAML service URL. Only available after `platform_base_url` is set.",
            "format" : "url",
            "type" : "string",
            "x-go-name" : "PlatformSSOURL"
          },
          "platform_entity_id" : {
            "description" : "SAML Entity ID. Only available after `platform_base_url` is set.",
            "type" : "string",
            "x-go-name" : "PlatformEntityID"
          },
          "platform_metadata_download_url" : {
            "description" : "URL to download platform metadata. Only available after `platform_base_url` is set.",
            "format" : "url",
            "type" : "string",
            "x-go-name" : "PlatformMetadataDownloadURL"
          },
          "platform_certificate_download_url" : {
            "description" : "Platform Certificate download URL",
            "format" : "url",
            "type" : "string",
            "x-go-name" : "PlatformCertificateDownloadURL"
          },
          "metadata_url" : {
            "description" : "Metadata URL from identity provider. Mutually exclusive with `metadata_xml`",
            "format" : "url",
            "type" : "string",
            "x-go-name" : "MetadataURL"
          },
          "metadata_xml" : {
            "description" : "Metadata file contents from identity provider. Mutually exclusive with `metadata_url`",
            "format" : "url",
            "type" : "string",
            "x-go-name" : "MetadataXML"
          },
          "logout_url" : {
            "description" : "Logout URL from identity provider",
            "format" : "url",
            "type" : "string",
            "x-go-name" : "LogoutURL"
          },
          "role_group_key" : {
            "description" : "Role group key name",
            "example" : "groups",
            "type" : "string"
          },
          "role_mappings" : {
            "additionalProperties" : {
              "items" : {
                "$ref" : "#/components/schemas/Role"
              }
            },
            "description" : "Mapping from IdP group names to roles. Each key is a potential IdP group value for the specified role_group_key, and each value is an array of roles to assign to users in that group.",
            "example" : {
              "admins-rw" : [ "admin:write", "admin:read" ],
              "admins-ro" : [ "admin:read" ],
              "general-rw" : [ "general:write", "general:read" ],
              "general-ro" : [ "general:read" ]
            },
            "x-go-type-skip-optional-pointer" : true
          },
          "default_roles" : {
            "description" : "Default roles for new users who are not in any group",
            "items" : {
              "$ref" : "#/components/schemas/Role"
            },
            "type" : "array",
            "x-go-type-skip-optional-pointer" : true,
            "x-omitempty" : false
          },
          "disable_access_if_no_role_group" : {
            "description" : "Whether to disable access if no role group is found in the SAML assertion. If true, users without a role group will not be able to log in.",
            "type" : "boolean"
          },
          "enabled" : {
            "description" : "Whether SAML is enabled",
            "type" : "boolean"
          },
          "can_enable" : {
            "description" : "Whether SAML can be enabled",
            "type" : "boolean"
          }
        },
        "required" : [ "can_enable", "enabled", "platform_certificate_download_url" ],
        "title" : "SAML Configuration"
      },
      "SAMLConfigUpdate" : {
        "additionalProperties" : false,
        "properties" : {
          "platform_base_url" : {
            "description" : "Base URL to the platform. This should be set first. https recommended.",
            "format" : "url",
            "type" : "string",
            "x-go-name" : "PlatformBaseURL"
          },
          "metadata_url" : {
            "description" : "Metadata URL from identity provider. Mutually exclusive with `metadata_xml`",
            "format" : "url",
            "type" : "string",
            "x-go-name" : "MetadataURL"
          },
          "metadata_xml" : {
            "description" : "Metadata file contents from identity provider. Mutually exclusive with `metadata_url`",
            "format" : "url",
            "type" : "string",
            "x-go-name" : "MetadataXML"
          },
          "logout_url" : {
            "description" : "Logout URL from identity provider",
            "format" : "url",
            "type" : "string",
            "x-go-name" : "LogoutURL"
          },
          "role_group_key" : {
            "description" : "Role group key name",
            "type" : "string"
          },
          "role_mappings" : {
            "additionalProperties" : {
              "items" : {
                "$ref" : "#/components/schemas/Role"
              }
            },
            "description" : "Mapping from IdP group names to roles. Each key is a potential IdP group value for the specified role_group_key, and each value is an array of roles to assign to users in that group.",
            "example" : {
              "admins-rw" : [ "admin:write", "admin:read" ],
              "admins-ro" : [ "admin:read" ],
              "general-rw" : [ "general:write", "general:read" ],
              "general-ro" : [ "general:read" ]
            }
          },
          "default_roles" : {
            "description" : "Default roles for new users who are not in any group",
            "items" : {
              "$ref" : "#/components/schemas/Role"
            },
            "type" : "array"
          },
          "disable_access_if_no_role_group" : {
            "description" : "Whether to disable access if no role group is found in the SAML assertion. If true, users without a role group will not be able to log in.",
            "type" : "boolean"
          },
          "enabled" : {
            "description" : "Whether to enable or disable SAML",
            "type" : "boolean"
          }
        },
        "title" : "SAML Configuration Update"
      },
      "PlatformSettings" : {
        "description" : "Platform settings definition",
        "properties" : {
          "enforce_mfa" : {
            "default" : false,
            "description" : "Whether or not to require MFA for all users",
            "type" : "boolean"
          }
        },
        "required" : [ "enforce_mfa" ]
      },
      "PlatformSettingsUpdate" : {
        "description" : "Platform settings partial update",
        "properties" : {
          "enforce_mfa" : {
            "default" : false,
            "description" : "Whether or not to require MFA for all users",
            "type" : "boolean"
          }
        }
      },
      "TeamName" : {
        "description" : "The unique name for the team.",
        "example" : "cloudquery",
        "maxLength" : 255,
        "pattern" : "^[a-z](-?[a-z0-9]+)+$",
        "type" : "string",
        "x-pattern-message" : "can contain only lowercase alphanumerical characters and dashes, starting with a letter"
      },
      "TeamPlan" : {
        "description" : "The plan the team is on (trial is deprecated)",
        "enum" : [ "free", "paid", "enterprise", "trial" ],
        "type" : "string"
      },
      "Team" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Team",
        "properties" : {
          "created_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "name" : {
            "$ref" : "#/components/schemas/TeamName"
          },
          "plan" : {
            "$ref" : "#/components/schemas/TeamPlan"
          },
          "plan_end_time" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "is_trial_active" : {
            "example" : false,
            "type" : "boolean"
          },
          "trial_end_time" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "display_name" : {
            "description" : "The team's display name",
            "example" : "CloudQuery",
            "maxLength" : 255,
            "type" : "string"
          },
          "internal" : {
            "example" : false,
            "type" : "boolean"
          }
        },
        "required" : [ "display_name", "internal", "is_trial_active", "name", "plan" ],
        "title" : "Team"
      },
      "MembershipWithUser" : {
        "additionalProperties" : false,
        "properties" : {
          "roles" : {
            "items" : {
              "example" : "admin:read",
              "type" : "string"
            },
            "type" : "array"
          },
          "user" : {
            "$ref" : "#/components/schemas/User"
          }
        },
        "required" : [ "roles", "user" ],
        "title" : "CloudQuery User Membership"
      },
      "LocalUserProvider" : {
        "default" : "local",
        "enum" : [ "local", "saml" ],
        "title" : "LocalUserProvider",
        "type" : "string"
      },
      "LocalUser" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/User"
        }, {
          "properties" : {
            "roles" : {
              "description" : "Global roles for the user",
              "items" : {
                "enum" : [ "admin:write", "admin:read" ],
                "type" : "string"
              },
              "type" : "array",
              "x-go-type" : "[]string"
            },
            "enabled" : {
              "type" : "boolean"
            },
            "provider" : {
              "$ref" : "#/components/schemas/LocalUserProvider"
            },
            "tracking_opted_in" : {
              "description" : "Whether anonymous user tracking was opted into",
              "type" : "boolean"
            }
          },
          "required" : [ "enabled", "provider", "roles" ]
        } ]
      },
      "MembershipWithTeamName" : {
        "additionalProperties" : false,
        "properties" : {
          "roles" : {
            "items" : {
              "example" : "admin:read",
              "type" : "string"
            },
            "type" : "array"
          },
          "team_name" : {
            "$ref" : "#/components/schemas/TeamName"
          },
          "created_at" : {
            "format" : "date-time",
            "type" : "string"
          },
          "updated_at" : {
            "format" : "date-time",
            "type" : "string"
          }
        },
        "required" : [ "created_at", "roles", "team_name", "updated_at" ],
        "title" : "CloudQuery Team Membership (team name only)"
      },
      "LocalUserWithTeams" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/LocalUser"
        }, {
          "properties" : {
            "teams" : {
              "items" : {
                "$ref" : "#/components/schemas/MembershipWithTeamName"
              },
              "type" : "array"
            }
          },
          "required" : [ "teams" ]
        } ]
      },
      "PlatformVersion" : {
        "properties" : {
          "name" : {
            "description" : "Name of the version",
            "type" : "string"
          },
          "created_at" : {
            "description" : "Time when the version was first installed",
            "format" : "date-time",
            "type" : "string"
          }
        },
        "required" : [ "created_at", "name" ]
      },
      "PluginReleaseStage" : {
        "description" : "Official plugins can go through three release stages: Coming Soon, Preview, and GA.\nThe Coming Soon stage is for plugins that are not yet ready for Preview, but users can subscribe to be notified when they are ready.\nBoth Preview and GA plugins follow semantic versioning. The main differences between the two stages are:\nPreview plugins are still experimental and may have frequent breaking changes. Preview plugins might get deprecated due to lack of usage. Long Term Support with community Discord and bug fixes is only guaranteed for GA plugins. Premium plugins are often discounted or free during the Preview stage.",
        "enum" : [ "coming-soon", "preview", "ga", "deprecated" ],
        "type" : "string"
      },
      "PluginName" : {
        "description" : "The unique name for the plugin.",
        "example" : "aws-source",
        "maxLength" : 255,
        "pattern" : "^[a-z](-?[a-z0-9]+)+$",
        "type" : "string",
        "x-pattern-message" : "can contain only lowercase alphanumerical characters and dashes, starting with a letter"
      },
      "PluginKind" : {
        "description" : "The kind of plugin, ie. source or destination.",
        "enum" : [ "source", "destination", "transformer" ],
        "example" : "source",
        "type" : "string"
      },
      "PluginCategory" : {
        "description" : "Supported categories for plugins",
        "enum" : [ "cloud-infrastructure", "databases", "sales-marketing", "engineering-analytics", "marketing-analytics", "shipment-tracking", "product-analytics", "cloud-finops", "project-management", "fleet-management", "security", "data-warehouses", "human-resources", "finance", "customer-support", "other" ],
        "type" : "string"
      },
      "PluginPriceCategory" : {
        "description" : "Supported price categories for billing",
        "enum" : [ "api", "database", "free" ],
        "type" : "string"
      },
      "PluginTier" : {
        "deprecated" : true,
        "description" : "This field is deprecated, refer to `price_category` instead.\nThis field is only kept for backward compatibility and may be removed in a future release.\nSupported tiers for plugins.\n  - free: Free tier, with no paid tables.\n  - paid: Paid tier. These plugins may have paid tables, but can also have free tables. They require login to access.\n  - open-core: This option is deprecated, values will either be free or paid.\n",
        "enum" : [ "free", "paid", "open-core" ],
        "type" : "string"
      },
      "Plugin" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Plugin",
        "properties" : {
          "team_name" : {
            "$ref" : "#/components/schemas/TeamName"
          },
          "name" : {
            "$ref" : "#/components/schemas/PluginName"
          },
          "kind" : {
            "$ref" : "#/components/schemas/PluginKind"
          },
          "category" : {
            "$ref" : "#/components/schemas/PluginCategory"
          },
          "price_category" : {
            "$ref" : "#/components/schemas/PluginPriceCategory"
          },
          "created_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "updated_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "homepage" : {
            "example" : "https://cloudquery.io",
            "type" : "string"
          },
          "logo" : {
            "example" : "https://storage.googleapis.com/cq-cloud-images/9ac4cb31-e971-4879-8619-87dc22b0f98e",
            "type" : "string"
          },
          "display_name" : {
            "description" : "The plugin's display name",
            "example" : "AWS Source Plugin",
            "maxLength" : 50,
            "minLength" : 1,
            "type" : "string"
          },
          "official" : {
            "description" : "True if the plugin is maintained by CloudQuery, false otherwise",
            "type" : "boolean"
          },
          "release_stage" : {
            "$ref" : "#/components/schemas/PluginReleaseStage"
          },
          "repository" : {
            "example" : "https://github.com/cloudquery/cloudquery",
            "type" : "string"
          },
          "short_description" : {
            "example" : "Sync data from AWS to any destination",
            "maxLength" : 512,
            "minLength" : 1,
            "type" : "string"
          },
          "tier" : {
            "$ref" : "#/components/schemas/PluginTier"
          },
          "public" : {
            "description" : "Whether the plugin is listed in the CloudQuery Hub. If false, the plugin will not be shown in the CloudQuery Hub and will only be visible to members of the plugin's team.",
            "type" : "boolean"
          },
          "usd_per_row" : {
            "deprecated" : true,
            "description" : "Deprecated. Refer to `price_category` instead.",
            "example" : "0.0001",
            "pattern" : "^\\d+(?:\\.\\d{1,10})?$",
            "type" : "string",
            "x-go-name" : "USDPerRow",
            "x-pattern-message" : "must be a valid decimal number with up to 10 decimal places."
          },
          "free_rows_per_month" : {
            "deprecated" : true,
            "description" : "Deprecated. Refer to `price_category` instead.",
            "example" : 1000,
            "format" : "int64",
            "type" : "integer"
          },
          "minimum_cloud_version" : {
            "description" : "Minimum plugin version that is supported in CloudQuery managed syncs.",
            "example" : "v1.2.3",
            "maxLength" : 64,
            "type" : "string"
          }
        },
        "required" : [ "category", "created_at", "display_name", "free_rows_per_month", "kind", "logo", "name", "official", "release_stage", "short_description", "team_name", "tier", "updated_at", "usd_per_row" ],
        "title" : "CloudQuery Plugin"
      },
      "VersionName" : {
        "description" : "The version in semantic version format.",
        "pattern" : "^v[0-9]+\\.[0-9]+\\.[0-9]+(-[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?$",
        "type" : "string",
        "x-pattern-message" : "should be in semantic version format"
      },
      "VersionRange" : {
        "description" : "A version range in semantic version format.",
        "pattern" : "^[^~]?v[0-9]+\\.[0-9]+\\.[0-9]+(-[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?$",
        "type" : "string",
        "x-pattern-message" : "should be a version range in semantic version format"
      },
      "ListPluginPinnedVersion" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Pinned Plugin Version Info",
        "properties" : {
          "name" : {
            "$ref" : "#/components/schemas/VersionName"
          },
          "range" : {
            "$ref" : "#/components/schemas/VersionRange"
          },
          "initialized" : {
            "default" : true,
            "deprecated" : true,
            "description" : "Deprecated. Assume `true`.",
            "type" : "boolean"
          },
          "mirroring" : {
            "default" : false,
            "deprecated" : true,
            "description" : "Deprecated. Assume `false`.",
            "type" : "boolean"
          }
        },
        "required" : [ "initialized", "mirroring", "name", "range" ]
      },
      "ListPlugin" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Plugin"
        }, {
          "properties" : {
            "latest_version" : {
              "$ref" : "#/components/schemas/VersionName"
            },
            "pinned_version" : {
              "$ref" : "#/components/schemas/ListPluginPinnedVersion"
            }
          }
        } ]
      },
      "ListPlugins" : {
        "example" : [ {
          "name" : "aws",
          "kind" : "source",
          "team_name" : "cloudquery",
          "display_name" : "AWS Source Plugin",
          "category" : "cloud-infrastructure",
          "created_at" : "2017-07-14T16:53:42Z",
          "updated_at" : "2017-07-14T16:53:42Z",
          "homepage" : "https://cloudquery.io",
          "logo" : "https://storage.googleapis.com/cq-cloud-images/9ac4cb31-e971-4879-8619-87dc22b0f98e",
          "official" : true,
          "short_description" : "Sync data from AWS to any destination",
          "repository" : "https://github.com/cloudquery/cloudquery",
          "tier" : "paid",
          "usd_per_row" : "0.00123",
          "free_rows_per_month" : 10000,
          "release_stage" : "preview"
        } ],
        "items" : {
          "$ref" : "#/components/schemas/ListPlugin"
        },
        "type" : "array"
      },
      "PluginReleaseStageCreate" : {
        "default" : "coming-soon",
        "description" : "Official plugins can go through three release stages: Coming Soon, Preview, and GA.\nThe Coming Soon stage is for plugins that are not yet ready for Preview, but users can subscribe to be notified when they are ready.\nBoth Preview and GA plugins follow semantic versioning. The main differences between the two stages are:\nPreview plugins are still experimental and may have frequent breaking changes. Preview plugins might get deprecated due to lack of usage. Long Term Support with community Discord and bug fixes is only guaranteed for GA plugins. Premium plugins are often discounted or free during the Preview stage.",
        "enum" : [ "coming-soon", "preview", "ga" ],
        "type" : "string"
      },
      "PluginCreate" : {
        "properties" : {
          "team_name" : {
            "$ref" : "#/components/schemas/TeamName"
          },
          "kind" : {
            "$ref" : "#/components/schemas/PluginKind"
          },
          "name" : {
            "$ref" : "#/components/schemas/PluginName"
          },
          "category" : {
            "$ref" : "#/components/schemas/PluginCategory"
          },
          "price_category" : {
            "$ref" : "#/components/schemas/PluginPriceCategory"
          },
          "tier" : {
            "$ref" : "#/components/schemas/PluginTier"
          },
          "display_name" : {
            "description" : "The plugin's display name, as shown in the CloudQuery Hub.",
            "example" : "AWS Source Plugin",
            "maxLength" : 50,
            "minLength" : 1,
            "type" : "string"
          },
          "short_description" : {
            "description" : "Short description of the plugin. This will be shown in the CloudQuery Hub.",
            "example" : "Sync data from AWS to any destination",
            "maxLength" : 512,
            "minLength" : 1,
            "type" : "string"
          },
          "homepage" : {
            "example" : "https://cloudquery.io",
            "type" : "string"
          },
          "public" : {
            "description" : "Whether the plugin is listed in the CloudQuery Hub. If false, the plugin will not be shown in the CloudQuery Hub and will only be visible to members of the team.",
            "example" : true,
            "type" : "boolean"
          },
          "repository" : {
            "example" : "https://github.com/cloudquery/cloudquery",
            "type" : "string"
          },
          "release_stage" : {
            "$ref" : "#/components/schemas/PluginReleaseStageCreate"
          },
          "logo" : {
            "description" : "URL to the plugin's logo. This will be shown in the CloudQuery Hub.",
            "example" : "https://storage.googleapis.com/cq-cloud-images/9ac4cb31-e971-4879-8619-87dc22b0f98e",
            "format" : "url",
            "type" : "string"
          },
          "usd_per_row" : {
            "deprecated" : true,
            "description" : "Deprecated. Use `price_category` instead.",
            "example" : "0.00001",
            "pattern" : "^\\d+(?:\\.\\d{1,10})?$",
            "type" : "string",
            "x-go-name" : "USDPerRow",
            "x-pattern-message" : "must be a valid decimal number with up to 10 decimal places."
          },
          "free_rows_per_month" : {
            "deprecated" : true,
            "description" : "Deprecated. Use `price_category` instead.",
            "example" : 10000,
            "format" : "int64",
            "type" : "integer"
          }
        },
        "required" : [ "category", "display_name", "kind", "name", "public", "short_description", "team_name" ]
      },
      "PluginReleaseStageUpdate" : {
        "description" : "Official plugins can go through three release stages: Coming Soon, Preview, and GA.\nThe Coming Soon stage is for plugins that are not yet ready for Preview, but users can subscribe to be notified when they are ready.\nBoth Preview and GA plugins follow semantic versioning. The main differences between the two stages are:\nPreview plugins are still experimental and may have frequent breaking changes. Preview plugins might get deprecated due to lack of usage. Long Term Support with community Discord and bug fixes is only guaranteed for GA plugins. Premium plugins are often discounted or free during the Preview stage.",
        "enum" : [ "coming-soon", "preview", "ga", "deprecated" ],
        "type" : "string"
      },
      "PluginUpdate" : {
        "properties" : {
          "category" : {
            "$ref" : "#/components/schemas/PluginCategory"
          },
          "price_category" : {
            "$ref" : "#/components/schemas/PluginPriceCategory"
          },
          "tier" : {
            "$ref" : "#/components/schemas/PluginTier"
          },
          "display_name" : {
            "description" : "The plugin's display name, as shown in the CloudQuery Hub.",
            "example" : "AWS Source Plugin",
            "maxLength" : 50,
            "minLength" : 1,
            "type" : "string"
          },
          "short_description" : {
            "description" : "Short description of the plugin. This will be shown in the CloudQuery Hub.",
            "example" : "Sync data from AWS to any destination",
            "maxLength" : 512,
            "minLength" : 1,
            "type" : "string"
          },
          "homepage" : {
            "example" : "https://cloudquery.io",
            "type" : "string"
          },
          "repository" : {
            "example" : "https://github.com/cloudquery/cloudquery",
            "type" : "string"
          },
          "logo" : {
            "description" : "URL to the plugin's logo. This will be shown in the CloudQuery Hub.",
            "example" : "https://storage.googleapis.com/cq-cloud-images/9ac4cb31-e971-4879-8619-87dc22b0f9e8",
            "format" : "url",
            "type" : "string"
          },
          "public" : {
            "description" : "If plugin is not public, it won't be visible to other teams in the CloudQuery Hub.",
            "type" : "boolean"
          },
          "release_stage" : {
            "$ref" : "#/components/schemas/PluginReleaseStageUpdate"
          },
          "usd_per_row" : {
            "deprecated" : true,
            "description" : "Deprecated. Update `price_category` instead.",
            "example" : "0.0001",
            "pattern" : "^\\d+(?:\\.\\d{1,10})?$",
            "type" : "string",
            "x-go-name" : "USDPerRow",
            "x-pattern-message" : "must be a valid decimal number with up to 10 decimal places."
          },
          "free_rows_per_month" : {
            "deprecated" : true,
            "description" : "Deprecated. Update `price_category` instead.",
            "example" : 1000,
            "format" : "int64",
            "type" : "integer"
          }
        }
      },
      "VersionFilter" : {
        "description" : "A version filter in semantic version format with prefix ranges.",
        "pattern" : "^[^~]?v[0-9]+\\.[0-9]+\\.[0-9]+(-[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?$",
        "type" : "string",
        "x-pattern-message" : "should be in semantic version format with prefix ranges"
      },
      "PluginProtocols" : {
        "description" : "The CloudQuery protocols supported by this plugin version (only protocol 3 is supported by new plugins).",
        "items" : {
          "enum" : [ 3 ],
          "type" : "integer"
        },
        "type" : "array"
      },
      "PluginPackageType" : {
        "description" : "The package type of the plugin assets",
        "enum" : [ "native", "docker" ],
        "type" : "string"
      },
      "PluginVersionBase" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Plugin Version",
        "properties" : {
          "created_at" : {
            "description" : "The date and time the plugin version was created.",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "published_at" : {
            "description" : "The date and time the plugin version was set to non-draft (published).",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "name" : {
            "$ref" : "#/components/schemas/VersionName"
          },
          "message" : {
            "description" : "Description of what's new or changed in this version (supports markdown)",
            "example" : "- Added support for AWS S3 - Added support for AWS EC2",
            "type" : "string"
          },
          "draft" : {
            "description" : "If a plugin version is in draft, it will not show to members outside the team or be counted as the latest version.",
            "type" : "boolean"
          },
          "retracted" : {
            "description" : "If a plugin version is retracted, assets will still be available for download, but the version will be marked as retracted to discourage use.",
            "type" : "boolean"
          },
          "protocols" : {
            "$ref" : "#/components/schemas/PluginProtocols"
          },
          "supported_targets" : {
            "description" : "The targets supported by this plugin version, formatted as <os>_<arch>",
            "example" : [ "linux_arm64", "darwin_amd64", "windows_amd64" ],
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "checksums" : {
            "description" : "The checksums of the plugin assets",
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "package_type" : {
            "$ref" : "#/components/schemas/PluginPackageType"
          }
        },
        "required" : [ "checksums", "created_at", "draft", "message", "name", "package_type", "protocols", "retracted", "supported_targets" ],
        "title" : "CloudQuery Plugin Version"
      },
      "PluginVersionList" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PluginVersionBase"
        } ]
      },
      "PluginSpecJSONSchema" : {
        "description" : "The specification of the plugin. This is a JSON schema that describes the configuration of the plugin.",
        "type" : "string"
      },
      "PluginVersion" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PluginVersionBase"
        }, {
          "properties" : {
            "spec_json_schema" : {
              "$ref" : "#/components/schemas/PluginSpecJSONSchema"
            },
            "connector_required" : {
              "description" : "Whether a connector is required for this plugin version",
              "type" : "boolean"
            },
            "connector_types" : {
              "description" : "List of connector types available for this plugin version",
              "items" : {
                "type" : "string"
              },
              "type" : "array"
            }
          }
        } ]
      },
      "PluginVersionDetails" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PluginVersion"
        }, {
          "properties" : {
            "example_config" : {
              "description" : "Example configuration for the plugin. This can be used in generated quickstart guides, for example. Markdown format.",
              "type" : "string"
            },
            "ui_base_url" : {
              "description" : "Base URL for the plugin's UI. Only available for plugins with a UI and for logged in users.",
              "type" : "string",
              "x-go-name" : "UIBaseURL"
            }
          },
          "required" : [ "example_config" ]
        } ]
      },
      "PluginVersionUpdate" : {
        "properties" : {
          "message" : {
            "description" : "Description of what's new or changed in this version (supports markdown)",
            "example" : "- Added support for *AWS S3* - Added support for *AWS EC2*",
            "type" : "string"
          },
          "draft" : {
            "description" : "If a plugin version is in draft, it will not show to members outside the team or be counted as the latest version. Once draft is set to false, only certain fields can be updated.",
            "type" : "boolean"
          },
          "retracted" : {
            "description" : "If a plugin version is retracted, assets will still be available for download, but the version will be marked as retracted to discourage use.",
            "type" : "boolean"
          },
          "protocols" : {
            "$ref" : "#/components/schemas/PluginProtocols"
          },
          "supported_targets" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "checksums" : {
            "description" : "The SHA-256 checksums of the plugin binaries, one per supported target.",
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "package_type" : {
            "description" : "The package type of the plugin binaries",
            "type" : "string"
          },
          "spec_json_schema" : {
            "$ref" : "#/components/schemas/PluginSpecJSONSchema"
          }
        }
      },
      "PluginAsset" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Plugin Asset",
        "properties" : {
          "checksum" : {
            "description" : "The checksum of the plugin asset",
            "type" : "string"
          },
          "location" : {
            "description" : "The location to download the plugin asset from",
            "format" : "uri",
            "type" : "string"
          }
        },
        "required" : [ "checksum", "location" ],
        "title" : "CloudQuery Plugin Asset"
      },
      "ReleaseURL" : {
        "properties" : {
          "url" : {
            "type" : "string"
          }
        },
        "required" : [ "url" ]
      },
      "PluginDocsPageName" : {
        "description" : "The unique name for the plugin documentation page.",
        "example" : "overview",
        "maxLength" : 255,
        "pattern" : "^[\\w,\\s-]+$",
        "type" : "string",
        "x-pattern-message" : "can contain only letters, numbers, hyphens and commas"
      },
      "PluginDocsPage" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Plugin Documentation Page",
        "properties" : {
          "name" : {
            "$ref" : "#/components/schemas/PluginDocsPageName"
          },
          "content" : {
            "description" : "The content of the documentation page. Supports markdown.",
            "example" : "# Getting Started\n\nThis is the getting started page.",
            "type" : "string"
          }
        },
        "required" : [ "content", "name" ],
        "title" : "CloudQuery Plugin Documentation Page"
      },
      "PluginDocsPageCreate" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Plugin Documentation Page",
        "properties" : {
          "name" : {
            "$ref" : "#/components/schemas/PluginDocsPageName"
          },
          "content" : {
            "description" : "The content of the documentation page. Supports markdown.",
            "example" : "# Getting Started\n\nThis is the getting started page.",
            "minLength" : 1,
            "type" : "string"
          }
        },
        "required" : [ "content", "name" ],
        "title" : "CloudQuery Plugin Documentation Page"
      },
      "PluginTableName" : {
        "description" : "Name of the table",
        "example" : "aws_ec2_instances",
        "maxLength" : 255,
        "pattern" : "^[a-z](_?[a-z0-9]+)+$",
        "type" : "string",
        "x-pattern-message" : "can contain only lowercase alphanumerical characters and underscores, starting with a letter"
      },
      "PluginTable" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Plugin Table",
        "properties" : {
          "description" : {
            "description" : "Description of the table",
            "example" : "AWS S3 Buckets",
            "type" : "string"
          },
          "is_incremental" : {
            "description" : "Whether the table is incremental",
            "type" : "boolean"
          },
          "name" : {
            "$ref" : "#/components/schemas/PluginTableName"
          },
          "parent" : {
            "description" : "Name of the parent table, if any",
            "example" : "nil",
            "type" : "string"
          },
          "relations" : {
            "description" : "Names of the tables that depend on this table",
            "example" : [ "aws_s3_bucket_cors_rules" ],
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "title" : {
            "description" : "Title of the table",
            "example" : "AWS S3 Buckets",
            "type" : "string"
          },
          "is_paid" : {
            "description" : "Whether the table is paid",
            "type" : "boolean"
          }
        },
        "required" : [ "description", "is_incremental", "name", "relations", "title" ],
        "title" : "CloudQuery Plugin Table"
      },
      "PluginTableColumn" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Plugin Column",
        "properties" : {
          "description" : {
            "description" : "Description of the column",
            "type" : "string"
          },
          "incremental_key" : {
            "description" : "Whether the column is used as an incremental key",
            "type" : "boolean"
          },
          "name" : {
            "description" : "Name of the column",
            "type" : "string"
          },
          "not_null" : {
            "description" : "Whether the column is nullable",
            "type" : "boolean"
          },
          "primary_key" : {
            "description" : "Whether the column is part of the primary key",
            "type" : "boolean"
          },
          "type" : {
            "description" : "Arrow Type of the column",
            "type" : "string"
          },
          "type_schema" : {
            "description" : "For columns of type JSON, the schema of the JSON object",
            "type" : "string"
          },
          "unique" : {
            "description" : "Whether the column has a unique constraint",
            "type" : "boolean"
          }
        },
        "required" : [ "description", "incremental_key", "name", "not_null", "primary_key", "type", "unique" ],
        "title" : "CloudQuery Plugin Table Column"
      },
      "PluginTableCreate" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Plugin Table",
        "properties" : {
          "description" : {
            "description" : "Description of the table",
            "example" : "AWS S3 Buckets",
            "type" : "string"
          },
          "is_incremental" : {
            "description" : "Whether the table is incremental",
            "type" : "boolean"
          },
          "name" : {
            "$ref" : "#/components/schemas/PluginTableName"
          },
          "parent" : {
            "description" : "Name of the parent table, if any",
            "example" : "nil",
            "type" : "string"
          },
          "relations" : {
            "description" : "Names of the tables that depend on this table",
            "example" : [ "aws_s3_bucket_cors_rules" ],
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "permissions_needed" : {
            "description" : "List of permissions needed to access this table, if any",
            "example" : [ "storage.buckets.list" ],
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "title" : {
            "description" : "Title of the table",
            "example" : "AWS S3 Buckets",
            "type" : "string"
          },
          "is_paid" : {
            "description" : "Whether the table is paid",
            "type" : "boolean"
          },
          "columns" : {
            "items" : {
              "$ref" : "#/components/schemas/PluginTableColumn"
            },
            "type" : "array"
          }
        },
        "required" : [ "name" ],
        "title" : "CloudQuery Plugin Table"
      },
      "PluginTableDetails" : {
        "additionalProperties" : false,
        "properties" : {
          "columns" : {
            "description" : "List of columns",
            "items" : {
              "$ref" : "#/components/schemas/PluginTableColumn"
            },
            "type" : "array"
          },
          "description" : {
            "description" : "Description of the table",
            "type" : "string"
          },
          "is_incremental" : {
            "description" : "Whether the table is incremental",
            "type" : "boolean"
          },
          "name" : {
            "description" : "Name of the table",
            "type" : "string"
          },
          "parent" : {
            "description" : "Name of the parent table, if any",
            "type" : "string"
          },
          "relations" : {
            "description" : "Names of the tables that depend on this table",
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "title" : {
            "description" : "Title of the table",
            "type" : "string"
          },
          "is_paid" : {
            "description" : "Whether the table is paid",
            "type" : "boolean"
          },
          "permissions_needed" : {
            "description" : "List of permissions needed to access this table, if any",
            "example" : [ "storage.buckets.list" ],
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        },
        "required" : [ "columns", "description", "is_incremental", "name", "permissions_needed", "relations", "title" ]
      },
      "PluginUIAssetUploadRequest" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Plugin UI Asset Upload Request",
        "properties" : {
          "name" : {
            "description" : "The path and name of the asset",
            "example" : "scripts/main.js",
            "type" : "string"
          },
          "content_type" : {
            "description" : "Content-type of the asset",
            "example" : "application/json",
            "type" : "string"
          }
        },
        "required" : [ "name" ],
        "title" : "CloudQuery Plugin UI Asset Upload Request"
      },
      "PluginUIAsset" : {
        "additionalProperties" : false,
        "description" : "CloudQuery Plugin UI Asset",
        "properties" : {
          "name" : {
            "description" : "The path and name of the asset",
            "type" : "string"
          },
          "upload_url" : {
            "description" : "URL to upload the asset to",
            "type" : "string",
            "x-go-name" : "UploadURL"
          }
        },
        "required" : [ "name", "upload_url" ],
        "title" : "CloudQuery Plugin UI Asset"
      },
      "TableListItem" : {
        "additionalProperties" : false,
        "properties" : {
          "name" : {
            "$ref" : "#/components/schemas/TableName"
          },
          "total_rows" : {
            "type" : "integer",
            "x-go-type" : "uint64"
          }
        },
        "required" : [ "name" ],
        "title" : "TableListItem"
      },
      "TableSelect" : {
        "title" : "TableSelect",
        "type" : "string"
      },
      "TableSortBy" : {
        "title" : "TableSortBy",
        "type" : "string"
      },
      "TableSortDirection" : {
        "default" : "asc",
        "enum" : [ "asc", "desc" ],
        "title" : "TableSortDirection",
        "type" : "string"
      },
      "TableGroupBy" : {
        "title" : "TableGroupBy",
        "type" : "string"
      },
      "QueryExpression" : {
        "description" : "Query expression",
        "example" : "SELECT account_id, instance_id, instance_type, region, name, tags FROM aws_ec2_instance WHERE instance_type = 't2.micro'",
        "title" : "QueryExpression",
        "type" : "string"
      },
      "TableData" : {
        "additionalProperties" : false,
        "properties" : {
          "query" : {
            "$ref" : "#/components/schemas/QueryExpression"
          },
          "columns" : {
            "items" : {
              "$ref" : "#/components/schemas/TableData_columns_inner"
            },
            "type" : "array"
          },
          "rows" : {
            "items" : {
              "items" : { },
              "type" : "array"
            },
            "type" : "array"
          }
        },
        "required" : [ "columns", "rows" ],
        "title" : "TableData"
      },
      "TableRowID" : {
        "description" : "ID of the Resource",
        "example" : "table_12345678-1234-1234-1234-1234567890ab",
        "type" : "string"
      },
      "TableRow" : {
        "additionalProperties" : false,
        "title" : "TableRow",
        "type" : "object"
      },
      "TableRowFieldMatch" : {
        "properties" : {
          "key" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          },
          "start_index" : {
            "format" : "int64",
            "type" : "integer"
          },
          "end_index" : {
            "format" : "int64",
            "type" : "integer"
          }
        },
        "required" : [ "key", "value" ],
        "title" : "TableRowFieldMatch"
      },
      "TableSchemaColumnKind" : {
        "description" : "The kind of the schema column type",
        "enum" : [ "any", "array", "bool", "date", "datetime", "enum", "map", "number", "string", "tuple", "unknown", "uuid" ],
        "type" : "string"
      },
      "TableSchemaColumn" : {
        "additionalProperties" : false,
        "properties" : {
          "name" : {
            "description" : "Column name",
            "example" : "column_name",
            "type" : "string"
          },
          "type" : {
            "description" : "Column type",
            "example" : "Nullable(String)",
            "type" : "string"
          },
          "default_kind" : {
            "description" : "Expression type (DEFAULT, MATERIALIZED, ALIAS) for the default value, or an empty string if it is not defined.",
            "example" : "DEFAULT",
            "type" : "string"
          },
          "default_expression" : {
            "description" : "Expression for the default value, or an empty string if it is not defined.",
            "type" : "string"
          },
          "comment" : {
            "description" : "Comment on the column, or an empty string if it is not defined.",
            "type" : "string"
          },
          "kind" : {
            "$ref" : "#/components/schemas/TableSchemaColumnKind"
          },
          "nullable" : {
            "description" : "Whether the column is nullable.",
            "type" : "boolean"
          }
        },
        "required" : [ "comment", "default_expression", "default_kind", "kind", "name", "nullable", "type" ],
        "title" : "TableSchemaColumn"
      },
      "TableSchema" : {
        "items" : {
          "$ref" : "#/components/schemas/TableSchemaColumn"
        },
        "type" : "array"
      },
      "BatchTableSchemaItem" : {
        "properties" : {
          "table_name" : {
            "description" : "Table name",
            "type" : "string"
          },
          "schema" : {
            "$ref" : "#/components/schemas/TableSchema"
          },
          "default_columns" : {
            "items" : {
              "description" : "Column name",
              "type" : "string"
            },
            "type" : "array"
          }
        },
        "required" : [ "default_columns", "schema", "table_name" ],
        "title" : "BatchTableSchemaItem"
      },
      "TableColumnName" : {
        "description" : "The name of the table column.",
        "example" : "region",
        "type" : "string"
      },
      "TableColumnListItem" : {
        "additionalProperties" : false,
        "properties" : {
          "name" : {
            "$ref" : "#/components/schemas/TableColumnName"
          },
          "kind" : {
            "$ref" : "#/components/schemas/TableSchemaColumnKind"
          },
          "nullable" : {
            "description" : "Whether the column is nullable.",
            "type" : "boolean"
          }
        },
        "required" : [ "kind", "name", "nullable" ],
        "title" : "TableColumnListItem"
      },
      "TableColumnValueListItem" : {
        "additionalProperties" : false,
        "properties" : {
          "value" : {
            "type" : "string"
          },
          "kind" : {
            "$ref" : "#/components/schemas/TableSchemaColumnKind"
          }
        },
        "required" : [ "kind" ],
        "title" : "TableColumnValueListItem"
      },
      "FilterCreate" : {
        "additionalProperties" : false,
        "description" : "Saved filter",
        "properties" : {
          "name" : {
            "example" : "t2.micro EC2 instances",
            "type" : "string"
          },
          "expression" : {
            "$ref" : "#/components/schemas/FilterExpression"
          },
          "public" : {
            "default" : true,
            "description" : "Whether the filter is visible to all users in the team, or only to the user who created it",
            "type" : "boolean",
            "x-omitempty" : false,
            "x-go-type-skip-optional-pointer" : true
          },
          "tags" : {
            "items" : {
              "$ref" : "#/components/schemas/FilterTag"
            },
            "type" : "array",
            "x-go-type-skip-optional-pointer" : true
          },
          "description" : {
            "example" : "Filter to find all EC2 instances of type t2.micro from the aws_ec2_instance raw table",
            "type" : "string"
          }
        },
        "required" : [ "expression", "name" ],
        "title" : "Filter definition for creating a filter"
      },
      "TableRelation" : {
        "additionalProperties" : false,
        "properties" : {
          "table_name" : {
            "example" : "aws_ec2_images",
            "type" : "string",
            "x-go-name" : "Table"
          },
          "label" : {
            "example" : "EC2 Image",
            "type" : "string"
          },
          "query" : {
            "example" : "SELECT aws_ec2_images.* FROM aws_ec2_instances JOIN aws_ec2_images ON aws_ec2_instances.image_id = aws_ec2_images.image_id",
            "type" : "string"
          }
        },
        "required" : [ "label", "query", "table_name" ],
        "title" : "TableRelation"
      },
      "AlertState" : {
        "enum" : [ "unknown", "pending", "inactive", "triggered" ],
        "type" : "string"
      },
      "AlertSeverity" : {
        "enum" : [ "low", "medium", "high" ],
        "type" : "string"
      },
      "NotificationDestinationID" : {
        "description" : "The unique ID for the notification destination.",
        "format" : "uuid",
        "type" : "string",
        "x-go-name" : "NotificationDestinationID"
      },
      "NotificationDestinationListItem" : {
        "additionalProperties" : false,
        "description" : "Notification Destination List Item",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/NotificationDestinationID"
          },
          "name" : {
            "example" : "Send to Slack",
            "type" : "string"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "url" : {
            "example" : "https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXX",
            "type" : "string",
            "x-go-name" : "URL"
          },
          "created_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "updated_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          }
        },
        "required" : [ "created_at", "enabled", "id", "name", "updated_at", "url" ],
        "title" : "Notification Destination List Item"
      },
      "AlertDetail" : {
        "additionalProperties" : false,
        "description" : "An alert instance that can be triggered by a query including notification destinations for the alert",
        "properties" : {
          "id" : {
            "description" : "Unique identifier for the alert",
            "format" : "uuid",
            "type" : "string",
            "x-go-name" : "ID"
          },
          "query_id" : {
            "description" : "Reference to the associated query",
            "format" : "uuid",
            "type" : "string",
            "x-go-name" : "QueryID"
          },
          "enabled" : {
            "description" : "Indicates if the alert is enabled",
            "type" : "boolean"
          },
          "message" : {
            "description" : "Alert message content",
            "type" : "string"
          },
          "severity" : {
            "$ref" : "#/components/schemas/AlertSeverity"
          },
          "state" : {
            "$ref" : "#/components/schemas/AlertState"
          },
          "total_violations" : {
            "description" : "Number of violations that triggered the alert",
            "format" : "int64",
            "type" : "integer"
          },
          "last_evaluated_at" : {
            "description" : "Timestamp when the alert was last evaluated",
            "format" : "date-time",
            "type" : "string"
          },
          "triggered_at" : {
            "description" : "Timestamp when the alert was triggered",
            "format" : "date-time",
            "type" : "string"
          },
          "created_at" : {
            "description" : "Timestamp when the alert was created",
            "format" : "date-time",
            "type" : "string"
          },
          "updated_at" : {
            "description" : "Timestamp when the alert was last updated",
            "format" : "date-time",
            "type" : "string"
          },
          "notification_destinations" : {
            "description" : "List of notification destinations this alert is configured to send to",
            "items" : {
              "$ref" : "#/components/schemas/NotificationDestinationListItem"
            },
            "type" : "array",
            "x-go-type-skip-optional-pointer" : true,
            "allowEmptyValue" : true,
            "explode" : true
          }
        },
        "required" : [ "created_at", "enabled", "id", "message", "notification_destinations", "query_id", "severity", "state", "total_violations", "updated_at" ],
        "title" : "Alert Detail"
      },
      "AlertCreate" : {
        "additionalProperties" : false,
        "description" : "Create an alert",
        "properties" : {
          "message" : {
            "example" : "All resources need to be tagged",
            "type" : "string"
          },
          "severity" : {
            "$ref" : "#/components/schemas/AlertSeverity"
          },
          "enabled" : {
            "description" : "Indicates if the alert is enabled",
            "type" : "boolean"
          },
          "notification_destinations" : {
            "description" : "List of notification destinations to send alerts to",
            "items" : {
              "$ref" : "#/components/schemas/NotificationDestinationID"
            },
            "type" : "array",
            "x-go-type-skip-optional-pointer" : true,
            "allowEmptyValue" : true,
            "explode" : true
          }
        },
        "required" : [ "enabled", "message", "severity" ],
        "title" : "Alert Create"
      },
      "NotificationDestinationTestResponse" : {
        "additionalProperties" : false,
        "description" : "Notification Destination Test Response",
        "properties" : {
          "is_success" : {
            "description" : "Indicates if the test was successful",
            "type" : "boolean"
          },
          "http_status_code" : {
            "description" : "HTTP status code returned by the notification destination",
            "type" : "integer",
            "x-go-name" : "HTTPStatusCode"
          },
          "http_status" : {
            "description" : "HTTP status message returned by the notification destination",
            "type" : "string",
            "x-go-name" : "HTTPStatus"
          },
          "http_body" : {
            "description" : "Body of the HTTP response from the notification destination",
            "type" : "string",
            "x-go-name" : "HTTPBody"
          },
          "http_headers" : {
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Headers returned by the notification destination",
            "x-go-name" : "HTTPHeaders"
          }
        },
        "required" : [ "http_body", "http_headers", "http_status", "http_status_code", "is_success" ],
        "title" : "Notification Destination Test Response"
      },
      "AlertTestResponse" : {
        "additionalProperties" : false,
        "description" : "Alert Test Response",
        "properties" : {
          "destination_id" : {
            "description" : "The ID of the notification destination.",
            "type" : "string",
            "x-go-name" : "DestinationID"
          },
          "error" : {
            "description" : "An error message if the test failed, otherwise null.",
            "type" : "string"
          },
          "response" : {
            "$ref" : "#/components/schemas/NotificationDestinationTestResponse"
          }
        },
        "required" : [ "destination_id", "response" ],
        "title" : "Alert Test Response"
      },
      "APIKeyName" : {
        "description" : "Name of the API key",
        "example" : "cli-api-key",
        "maxLength" : 255,
        "minLength" : 1,
        "pattern" : "^(?:[a-zA-Z0-9][a-zA-Z0-9- ]*)?[a-zA-Z0-9]$",
        "type" : "string",
        "x-pattern-message" : "can contain only letters, numbers, spaces, and hyphens, starting and ending with a letter or number"
      },
      "APIKeyID" : {
        "description" : "ID of the API key",
        "example" : "12345678-1234-1234-1234-1234567890ab",
        "format" : "uuid",
        "type" : "string",
        "x-go-name" : "APIKeyID"
      },
      "APIKeyRole" : {
        "enum" : [ "admin:write", "admin:read", "general:read", "general:write", "ci" ],
        "type" : "string"
      },
      "APIKeyTeamRole" : {
        "properties" : {
          "team" : {
            "$ref" : "#/components/schemas/TeamName"
          },
          "role" : {
            "$ref" : "#/components/schemas/APIKeyRole"
          }
        },
        "required" : [ "role" ]
      },
      "APIKey" : {
        "description" : "API Key to interact with CloudQuery Cloud under specific team",
        "properties" : {
          "name" : {
            "$ref" : "#/components/schemas/APIKeyName"
          },
          "created_by" : {
            "description" : "email of the user that created the API key",
            "example" : "user@example.com",
            "type" : "string"
          },
          "id" : {
            "$ref" : "#/components/schemas/APIKeyID"
          },
          "key" : {
            "description" : "API key. Will be shown only in the response when creating the key.",
            "example" : "1234567890abcdef1234567890abcdef",
            "type" : "string"
          },
          "created_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "expires_at" : {
            "description" : "Timestamp at which API key will stop working",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "last_access_at" : {
            "description" : "Timestamp at which API key was last used - accurate to the day only.",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "expired" : {
            "description" : "Whether the API key has expired or not",
            "example" : false,
            "type" : "boolean"
          },
          "roles" : {
            "items" : {
              "$ref" : "#/components/schemas/APIKeyTeamRole"
            },
            "type" : "array"
          }
        },
        "required" : [ "expired", "expires_at", "id", "name", "roles" ]
      },
      "ConnectorStatus" : {
        "description" : "The status of the connector",
        "enum" : [ "created", "authenticated", "failed", "revoked" ],
        "type" : "string"
      },
      "Connector" : {
        "description" : "Connector definition",
        "properties" : {
          "id" : {
            "description" : "unique ID of the connector",
            "example" : "12345678-1234-1234-1234-1234567890ab",
            "format" : "uuid",
            "type" : "string",
            "x-go-name" : "ID"
          },
          "type" : {
            "description" : "Type of the connector",
            "type" : "string"
          },
          "name" : {
            "description" : "Name of the connector",
            "type" : "string"
          },
          "status" : {
            "$ref" : "#/components/schemas/ConnectorStatus"
          },
          "created_at" : {
            "description" : "Time the connector was created",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          }
        },
        "required" : [ "created_at", "id", "name", "status", "type" ]
      },
      "ConnectorCreate" : {
        "description" : "Connector creation request",
        "properties" : {
          "type" : {
            "description" : "Type of the connector",
            "type" : "string"
          },
          "name" : {
            "description" : "Name of the connector",
            "type" : "string"
          }
        },
        "required" : [ "name", "type" ]
      },
      "ConnectorID" : {
        "description" : "ID of the Connector",
        "example" : "12345678-1234-1234-1234-1234567890ab",
        "format" : "uuid",
        "type" : "string",
        "x-go-name" : "ConnectorID"
      },
      "ConnectorUpdate" : {
        "additionalProperties" : false,
        "properties" : {
          "name" : {
            "description" : "Name of the connector",
            "type" : "string"
          }
        }
      },
      "SyncEnvCreate" : {
        "description" : "Environment variable. Environment variables are assumed to be secret.",
        "properties" : {
          "name" : {
            "description" : "Name of the environment variable",
            "type" : "string"
          },
          "value" : {
            "description" : "Value of the environment variable",
            "type" : "string"
          }
        },
        "required" : [ "name" ]
      },
      "ConnectorAuthRequestAWS" : {
        "additionalProperties" : { },
        "description" : "AWS connector authentication request to start the authentication process",
        "properties" : {
          "plugin_team" : {
            "description" : "Team that owns the plugin we are authenticating the connector for",
            "example" : "cloudquery"
          },
          "plugin_kind" : {
            "description" : "Kind of the plugin",
            "example" : "source"
          },
          "plugin_name" : {
            "description" : "Name of the plugin",
            "example" : "aws"
          },
          "plugin_version" : {
            "description" : "Version of the plugin",
            "example" : "v27.1.0"
          },
          "spec" : {
            "additionalProperties" : false,
            "format" : "Plugin parameters, specific to each plugin"
          },
          "env" : {
            "description" : "Environment variables used in the spec.",
            "items" : {
              "$ref" : "#/components/schemas/SyncEnvCreate"
            }
          },
          "tables" : {
            "description" : "Tables to authenticate, setting from the outer spec",
            "items" : {
              "example" : "aws_s3_buckets"
            }
          },
          "skip_tables" : {
            "description" : "Tables to skip authentication, setting from the outer spec",
            "items" : {
              "example" : "aws_s3_buckets"
            }
          },
          "skip_dependent_tables" : {
            "description" : "Whether to skip dependent tables, setting from the outer spec"
          }
        },
        "required" : [ "plugin_kind", "plugin_name", "plugin_team" ]
      },
      "ConnectorAuthResponseAWS" : {
        "additionalProperties" : false,
        "description" : "AWS connector authentication response to start the authentication process",
        "properties" : {
          "redirect_url" : {
            "description" : "URL to redirect the user to, to authenticate",
            "type" : "string",
            "x-go-name" : "RedirectURL"
          },
          "role_template_url" : {
            "description" : "URL to the role template, to present to the user",
            "type" : "string",
            "x-go-name" : "RoleTemplateURL"
          },
          "suggested_external_id" : {
            "description" : "External ID suggested to enter into the role definition",
            "type" : "string",
            "x-go-name" : "SuggestedExternalID"
          },
          "suggested_policy_arns" : {
            "description" : "List of AWS policy ARNs suggested to grant inside the role definition",
            "items" : {
              "type" : "string"
            },
            "type" : "array",
            "x-go-name" : "SuggestedPolicyARNs"
          }
        },
        "required" : [ "redirect_url", "role_template_url", "suggested_external_id", "suggested_policy_arns" ]
      },
      "ConnectorAuthFinishRequestAWS" : {
        "additionalProperties" : false,
        "description" : "AWS connector authentication request, filled in after the user has authenticated through AWS",
        "properties" : {
          "role_arn" : {
            "description" : "ARN of role created by the user",
            "type" : "string",
            "x-go-name" : "RoleARN"
          },
          "external_id" : {
            "description" : "External ID in the role definition. Optional. If not provided the previously suggested external ID will be used. Empty string will remove the external ID.",
            "type" : "string",
            "x-go-name" : "ExternalID"
          }
        },
        "required" : [ "role_arn" ]
      },
      "ConnectorAuthRequestGCP" : {
        "additionalProperties" : false,
        "description" : "GCP connector authentication request to start the authentication process",
        "properties" : {
          "plugin_team" : {
            "description" : "Team that owns the plugin we are authenticating the connector for",
            "example" : "cloudquery",
            "type" : "string"
          },
          "plugin_kind" : {
            "description" : "Kind of the plugin",
            "example" : "source",
            "type" : "string"
          },
          "plugin_name" : {
            "description" : "Name of the plugin",
            "example" : "aws",
            "type" : "string"
          }
        },
        "required" : [ "plugin_kind", "plugin_name", "plugin_team" ]
      },
      "ConnectorAuthResponseGCP" : {
        "additionalProperties" : false,
        "description" : "GCP connector authentication response to start the authentication process",
        "properties" : {
          "service_account" : {
            "description" : "CloudQuery GCP Service Account to grant access to",
            "type" : "string"
          }
        },
        "required" : [ "service_account" ]
      },
      "ConnectorAuthRequestOAuth" : {
        "additionalProperties" : { },
        "description" : "OAuth connector authentication request to start the authentication process",
        "properties" : {
          "plugin_team" : {
            "description" : "Team that owns the plugin we are authenticating the connector for",
            "example" : "cloudquery"
          },
          "plugin_kind" : {
            "description" : "Kind of the plugin",
            "example" : "source"
          },
          "plugin_name" : {
            "description" : "Name of the plugin",
            "example" : "googleanalytics"
          },
          "plugin_version" : {
            "description" : "Version of the plugin",
            "example" : "v3.0.0"
          },
          "base_url" : {
            "description" : "Base of the URL the callback url will be constructed from",
            "example" : "https://cloud.cloudquery.io/oauth",
            "x-go-name" : "BaseURL"
          },
          "spec" : {
            "additionalProperties" : false,
            "format" : "Plugin parameters, specific to each plugin"
          },
          "env" : {
            "description" : "Environment variables used in the spec.",
            "items" : {
              "$ref" : "#/components/schemas/SyncEnvCreate"
            }
          },
          "tables" : {
            "description" : "Tables to authenticate, setting from the outer spec",
            "items" : {
              "example" : "github_organizations"
            }
          },
          "skip_tables" : {
            "description" : "Tables to skip authentication, setting from the outer spec",
            "items" : {
              "example" : "github_organizations"
            }
          },
          "skip_dependent_tables" : {
            "description" : "Whether to skip dependent tables, setting from the outer spec"
          },
          "flavor" : {
            "description" : "Override default flavor"
          }
        },
        "required" : [ "base_url", "plugin_kind", "plugin_name", "plugin_team" ]
      },
      "ConnectorAuthResponseOAuth" : {
        "additionalProperties" : false,
        "description" : "OAuth connector authentication response to start the authentication process",
        "properties" : {
          "redirect_url" : {
            "description" : "URL to redirect the user to, to authenticate",
            "type" : "string",
            "x-go-name" : "RedirectURL"
          }
        },
        "required" : [ "redirect_url" ]
      },
      "ConnectorAuthFinishRequestOAuth" : {
        "additionalProperties" : { },
        "description" : "OAuth connector authentication request, filled in after the user has authenticated through OAuth",
        "properties" : {
          "return_url" : {
            "description" : "URL the user was redirected to (including new parameter values) after the OAuth flow is complete",
            "x-go-name" : "ReturnURL"
          },
          "base_url" : {
            "description" : "Base of the URL the callback url was constructed from",
            "example" : "https://cloud.cloudquery.io/oauth",
            "x-go-name" : "BaseURL"
          },
          "spec" : {
            "additionalProperties" : false,
            "format" : "Plugin parameters, specific to each plugin"
          },
          "env" : {
            "description" : "Environment variables used in the spec.",
            "items" : {
              "$ref" : "#/components/schemas/SyncEnvCreate"
            }
          }
        },
        "required" : [ "base_url", "return_url" ]
      },
      "CustomColumnSortBy" : {
        "enum" : [ "id", "description", "table_name", "column_name", "label", "column_type", "value_type", "value_expr", "created_by", "team_name", "created_at", "updated_at" ],
        "title" : "CustomColumnSortBy",
        "type" : "string"
      },
      "CustomColumnSortDirection" : {
        "default" : "asc",
        "enum" : [ "asc", "desc" ],
        "title" : "CustomColumnSortDirection",
        "type" : "string"
      },
      "CustomColumnID" : {
        "description" : "The unique ID for the custom column.",
        "format" : "uuid",
        "type" : "string",
        "x-go-name" : "CustomColumnID"
      },
      "CustomColumnColumnType" : {
        "enum" : [ "String", "Integer", "Float", "Boolean", "DateTime" ],
        "type" : "string"
      },
      "CustomColumnValueType" : {
        "enum" : [ "expression", "external" ],
        "type" : "string"
      },
      "CreatedBy" : {
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/UserID"
          },
          "name" : {
            "$ref" : "#/components/schemas/UserName"
          },
          "email" : {
            "type" : "string"
          }
        },
        "required" : [ "email", "id", "name" ]
      },
      "CustomColumn" : {
        "additionalProperties" : false,
        "description" : "A custom column that is configured manually by the user.",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/CustomColumnID"
          },
          "description" : {
            "type" : "string"
          },
          "table_name" : {
            "description" : "Table this column applies to.",
            "example" : "cloud_assets",
            "type" : "string"
          },
          "column_name" : {
            "example" : "environment",
            "type" : "string"
          },
          "label" : {
            "example" : "Environment name",
            "type" : "string"
          },
          "column_type" : {
            "$ref" : "#/components/schemas/CustomColumnColumnType"
          },
          "value_type" : {
            "$ref" : "#/components/schemas/CustomColumnValueType"
          },
          "value_expr" : {
            "description" : "Value expression.\nFor value_type=expression, this is the actual SQL query.\nFor value_type=external this is the default value.\n",
            "type" : "string"
          },
          "created_by" : {
            "$ref" : "#/components/schemas/CreatedBy"
          },
          "created_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "team_name" : {
            "$ref" : "#/components/schemas/TeamName"
          }
        },
        "required" : [ "column_name", "created_at", "created_by", "id", "label", "table_name", "team_name", "value_type" ],
        "title" : "Custom Column"
      },
      "CustomColumnCreateOrUpdate" : {
        "additionalProperties" : false,
        "description" : "Create or update a custom column",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "table_name" : {
            "description" : "Table this column applies to.",
            "example" : "cloud_assets",
            "type" : "string"
          },
          "column_name" : {
            "example" : "environment",
            "type" : "string"
          },
          "label" : {
            "example" : "Environment name",
            "type" : "string"
          },
          "column_type" : {
            "$ref" : "#/components/schemas/CustomColumnColumnType"
          },
          "value_type" : {
            "$ref" : "#/components/schemas/CustomColumnValueType"
          },
          "value_expr" : {
            "description" : "Value expression.\nFor value_type=expression, this is the actual SQL query.\nFor value_type=external this is the default value.\n",
            "type" : "string"
          }
        },
        "required" : [ "column_name", "label", "table_name", "value_type" ],
        "title" : "Custom Column Create or Update"
      },
      "CustomColumnDataImport" : {
        "additionalProperties" : { },
        "description" : "Import data into the specified custom column",
        "properties" : {
          "data" : {
            "items" : {
              "additionalProperties" : false,
              "description" : "Asset Filter and corresponding value assignment",
              "title" : "Filter selecting assets, and value which should be assigned to matches."
            }
          }
        },
        "required" : [ "data" ],
        "title" : "Custom Column Data Import"
      },
      "CustomColumnDataImportAccepted" : {
        "properties" : {
          "created_at" : {
            "description" : "The time the data import was created",
            "example" : "2020-01-01T00:00:00Z",
            "format" : "date-time",
            "type" : "string"
          }
        },
        "required" : [ "created_at" ]
      },
      "CustomColumnDataValues" : {
        "additionalProperties" : { },
        "description" : "Edit one or more values within the specified custom column",
        "properties" : {
          "data" : {
            "items" : {
              "additionalProperties" : false,
              "description" : "CQ_ID and corresponding value assignment",
              "title" : "The cq_id of the row and the value to set."
            }
          }
        },
        "required" : [ "data" ],
        "title" : "Custom Column Data Values"
      },
      "ContentType" : {
        "description" : "The HTTP Content-Type of the image or asset",
        "enum" : [ "image/jpeg", "image/png", "image/webp" ],
        "example" : "image/png",
        "type" : "string"
      },
      "TeamImageCreate" : {
        "additionalProperties" : false,
        "properties" : {
          "name" : {
            "description" : "Name of image",
            "maxLength" : 64,
            "minLength" : 1,
            "type" : "string"
          },
          "checksum" : {
            "description" : "SHA1 checksum of image",
            "maxLength" : 40,
            "minLength" : 40,
            "pattern" : "^[a-f0-9]+$",
            "type" : "string",
            "x-pattern-message" : "can contain only lowercase hexadecimal characters"
          },
          "content_type" : {
            "$ref" : "#/components/schemas/ContentType"
          }
        },
        "required" : [ "checksum", "content_type", "name" ],
        "title" : "Create Team Image Request"
      },
      "TeamImage" : {
        "properties" : {
          "name" : {
            "description" : "Name of image",
            "type" : "string"
          },
          "checksum" : {
            "description" : "SHA1 checksum of image",
            "type" : "string"
          },
          "url" : {
            "description" : "URL to download image",
            "type" : "string",
            "x-go-name" : "URL"
          },
          "upload_url" : {
            "description" : "URL to upload image",
            "type" : "string",
            "x-go-name" : "UploadURL"
          },
          "required_headers" : {
            "additionalProperties" : {
              "items" : {
                "type" : "string"
              }
            },
            "description" : "Required HTTP headers to include for the upload"
          }
        },
        "required" : [ "checksum", "name", "required_headers", "url" ]
      },
      "Email" : {
        "example" : "user@example.com",
        "format" : "email",
        "type" : "string"
      },
      "Invitation" : {
        "additionalProperties" : false,
        "properties" : {
          "team_name" : {
            "$ref" : "#/components/schemas/TeamName"
          },
          "email" : {
            "$ref" : "#/components/schemas/Email"
          },
          "role" : {
            "example" : "admin",
            "type" : "string"
          },
          "created_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          }
        },
        "required" : [ "created_at", "email", "role", "team_name" ]
      },
      "MembershipWithTeam" : {
        "additionalProperties" : false,
        "properties" : {
          "roles" : {
            "items" : {
              "example" : "admin:read",
              "type" : "string"
            },
            "type" : "array"
          },
          "team" : {
            "$ref" : "#/components/schemas/Team"
          }
        },
        "required" : [ "roles", "team" ],
        "title" : "CloudQuery Team Membership"
      },
      "NotificationDestinationData" : {
        "description" : "Notification Destination Data",
        "properties" : {
          "url" : {
            "example" : "https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX",
            "type" : "string",
            "x-go-name" : "URL"
          },
          "http_headers" : {
            "additionalProperties" : {
              "type" : "string"
            },
            "x-go-name" : "HTTPHeaders",
            "x-go-type-skip-optional-pointer" : true
          },
          "http_body" : {
            "example" : "{\"text\": \"Alert: {{alert.name}}\"}",
            "type" : "string",
            "x-go-name" : "HTTPBody"
          }
        },
        "required" : [ "url" ],
        "title" : "Notification Destination Data"
      },
      "NotificationDestinationCreate" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/NotificationDestinationData"
        }, {
          "properties" : {
            "name" : {
              "example" : "Send to Slack",
              "type" : "string"
            },
            "enabled" : {
              "type" : "boolean"
            }
          },
          "required" : [ "enabled", "name" ]
        } ],
        "description" : "Create Notification Destination",
        "title" : "Create Notification Destination"
      },
      "NotificationDestination" : {
        "additionalProperties" : false,
        "description" : "Notification Destination",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/NotificationDestinationID"
          },
          "name" : {
            "example" : "Send to Slack",
            "type" : "string"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "url" : {
            "example" : "https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX",
            "type" : "string",
            "x-go-name" : "URL"
          },
          "http_headers" : {
            "additionalProperties" : {
              "type" : "string"
            },
            "x-go-name" : "HTTPHeaders",
            "x-go-type-skip-optional-pointer" : true
          },
          "http_body" : {
            "example" : "{\"text\": \"Alert: {{alert.name}}\"}",
            "type" : "string",
            "x-go-name" : "HTTPBody"
          },
          "created_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "updated_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          }
        },
        "required" : [ "created_at", "enabled", "id", "name", "updated_at", "url" ],
        "title" : "Notification Destination"
      },
      "NotificationDestinationUpdate" : {
        "additionalProperties" : false,
        "description" : "Update Notification Destination",
        "properties" : {
          "name" : {
            "example" : "Send to Slack",
            "type" : "string"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "url" : {
            "example" : "https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX",
            "type" : "string",
            "x-go-name" : "URL"
          },
          "http_headers" : {
            "additionalProperties" : {
              "type" : "string"
            },
            "x-go-name" : "HTTPHeaders"
          },
          "http_body" : {
            "example" : "{\"text\": \"Alert: {{alert.name}}\"}",
            "type" : "string",
            "x-go-name" : "HTTPBody"
          }
        },
        "title" : "Update Notification Destination"
      },
      "OnboardingID" : {
        "description" : "ID of the cloud provider onboarding session",
        "example" : "12345678-1234-1234-1234-1234567890ab",
        "format" : "uuid",
        "type" : "string",
        "x-go-name" : "OnboardingID"
      },
      "OnboardingAWSCreateResponse" : {
        "additionalProperties" : false,
        "description" : "AWS OpenID onboarding",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/OnboardingID"
          },
          "region" : {
            "description" : "An AWS region (such as 'us-east-1') where stack is deployed",
            "type" : "string"
          },
          "stack_name" : {
            "description" : "Stack name that should be used",
            "maxLength" : 128,
            "type" : "string"
          },
          "issuer_url" : {
            "description" : "URL of the OpenID server to use when setting up a trust relationship",
            "type" : "string",
            "x-go-name" : "IssuerURL"
          },
          "audience" : {
            "description" : "OpenID audience claim for the trust realshionship",
            "type" : "string",
            "x-go-name" : "Audience"
          },
          "subject" : {
            "description" : "OpenID subject claim for the trust relationship",
            "type" : "string",
            "x-go-name" : "Subject"
          },
          "notify_path" : {
            "description" : "Path of the notify endpoint to use for status updates",
            "type" : "string",
            "x-go-name" : "NotifyPath"
          },
          "template_url" : {
            "description" : "URL of the CloudFormation template to use for the authentication",
            "type" : "string",
            "x-go-name" : "TemplateURL"
          },
          "notify_token" : {
            "description" : "An authentication token that should be used for notifications",
            "type" : "string"
          }
        },
        "required" : [ "audience", "id", "issuer_url", "notify_path", "notify_token", "subject", "template_url" ]
      },
      "OnboardingAWS" : {
        "additionalProperties" : false,
        "description" : "AWS OpenID onboarding",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/OnboardingID"
          },
          "stage" : {
            "description" : "Stage of the onboarding process",
            "type" : "string",
            "x-go-name" : "OnboardingStage"
          },
          "created_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "updated_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time",
            "type" : "string"
          },
          "issuer_url" : {
            "description" : "URL of the OpenID server to use when setting up a trust relationship",
            "type" : "string",
            "x-go-name" : "IssuerURL"
          },
          "audience" : {
            "description" : "OpenID audience claim for the trust realshionship",
            "type" : "string",
            "x-go-name" : "Audience"
          },
          "subject" : {
            "description" : "OpenID subject claim for the trust relationship",
            "type" : "string",
            "x-go-name" : "Subject"
          },
          "management_role_arn" : {
            "description" : "Role used to manage the platform onboarding",
            "type" : "string",
            "x-go-name" : "ManagementRoleARN"
          },
          "failure_reason" : {
            "description" : "CloudFormation stack errors",
            "type" : "string",
            "x-go-name" : "FailureReason"
          },
          "sync_role_name" : {
            "description" : "(organization mode) The name of the sync role used to sync a specific account within the organization.\nNote: This is the role name only, not the full ARN.\n",
            "type" : "string",
            "x-go-name" : "SyncRoleName"
          },
          "organizational_units" : {
            "description" : "(organization mode) A list of Organizational Unit (OU) IDs included in this onboarding.\n",
            "items" : {
              "type" : "string"
            },
            "type" : "array",
            "x-go-name" : "OrganizationalUnitIDs"
          }
        },
        "required" : [ "audience", "created_at", "id", "issuer_url", "stage", "subject", "updated_at" ]
      },
      "BaseNotification" : {
        "properties" : {
          "status" : {
            "type" : "string"
          }
        },
        "required" : [ "status" ]
      },
      "StartedNotification" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseNotification"
        }, {
          "properties" : {
            "status" : {
              "enum" : [ "started" ],
              "type" : "string"
            }
          }
        } ]
      },
      "RevokedNotification" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseNotification"
        }, {
          "properties" : {
            "status" : {
              "enum" : [ "revoked" ],
              "type" : "string"
            }
          }
        } ]
      },
      "FailedNotification" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseNotification"
        }, {
          "properties" : {
            "status" : {
              "enum" : [ "failed" ],
              "type" : "string"
            },
            "reason" : {
              "type" : "string"
            }
          },
          "required" : [ "reason" ]
        } ]
      },
      "DeployedNotification" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseNotification"
        }, {
          "properties" : {
            "status" : {
              "enum" : [ "deployed" ],
              "type" : "string"
            },
            "management_role_arn" : {
              "type" : "string"
            },
            "deployment_mode" : {
              "type" : "string"
            },
            "stack_id" : {
              "type" : "string"
            }
          },
          "required" : [ "deployment_mode", "management_role_arn", "stack_id" ]
        } ]
      },
      "CompletedNotification" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseNotification"
        }, {
          "properties" : {
            "status" : {
              "enum" : [ "completed" ],
              "type" : "string"
            },
            "admin_role_arn" : {
              "type" : "string"
            },
            "sync_role_name" : {
              "type" : "string"
            },
            "organizational_units" : {
              "items" : {
                "type" : "string"
              },
              "type" : "array"
            },
            "skipped_accounts" : {
              "items" : {
                "type" : "string"
              },
              "type" : "array"
            },
            "failed_accounts" : {
              "type" : "number"
            },
            "additional_stack_ids" : {
              "items" : {
                "type" : "string"
              },
              "type" : "array"
            }
          },
          "required" : [ "admin_role_arn", "organizational_units", "skipped_accounts", "sync_role_name" ]
        } ]
      },
      "CompletedSingleAccountNotification" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseNotification"
        }, {
          "properties" : {
            "status" : {
              "enum" : [ "completed_account" ],
              "type" : "string"
            },
            "sync_role_arn" : {
              "type" : "string"
            },
            "stack_id" : {
              "type" : "string"
            }
          },
          "required" : [ "stack_id", "sync_role_arn" ]
        } ]
      },
      "OnboardingAWSNotification" : {
        "discriminator" : {
          "mapping" : {
            "started" : "#/components/schemas/StartedNotification",
            "revoked" : "#/components/schemas/RevokedNotification",
            "failed" : "#/components/schemas/FailedNotification",
            "deployed" : "#/components/schemas/DeployedNotification",
            "completed" : "#/components/schemas/CompletedNotification",
            "completed_account" : "#/components/schemas/CompletedSingleAccountNotification"
          },
          "propertyName" : "status"
        },
        "oneOf" : [ {
          "$ref" : "#/components/schemas/StartedNotification"
        }, {
          "$ref" : "#/components/schemas/RevokedNotification"
        }, {
          "$ref" : "#/components/schemas/FailedNotification"
        }, {
          "$ref" : "#/components/schemas/DeployedNotification"
        }, {
          "$ref" : "#/components/schemas/CompletedNotification"
        }, {
          "$ref" : "#/components/schemas/CompletedSingleAccountNotification"
        } ]
      },
      "OnboardingAWSAccounts" : {
        "additionalProperties" : false,
        "description" : "AWS OpenID onboarding account structure",
        "properties" : {
          "id" : {
            "description" : "ID of the account or OU",
            "x-go-name" : "ID"
          },
          "arn" : {
            "description" : "ARN of the account or OU",
            "x-go-name" : "ARN"
          },
          "type" : {
            "description" : "Type of the account",
            "enum" : [ "OU", "account", "root" ]
          },
          "name" : {
            "description" : "Display name of the account or OU"
          },
          "children" : {
            "description" : "Children accounts and OUs of the target account",
            "items" : {
              "$ref" : "#/components/schemas/OnboardingAWSAccounts"
            }
          }
        },
        "required" : [ "id", "type" ]
      },
      "OrganizationalUnitID" : {
        "description" : "ID of an organizational unit in AWS",
        "example" : "ou-7f3s-j8zfa1ao",
        "pattern" : "^ou-[a-z0-9]{4,32}-[a-z0-9]{8,32}$",
        "x-pattern-message" : "must start with \"ou-\" followed by 4 to 32 lowercase letters or digits, then a second \"-\" dash, and finally 8 to 32 additional lowercase letters or digits",
        "x-go-name" : "OrganizationalUnitID"
      },
      "OnboardingAWSProvision" : {
        "description" : "Stackset provisioning configuration",
        "properties" : {
          "notify_url" : {
            "description" : "URL that should be used for provisioning notifications (including scheme, hostname, and path)"
          },
          "organizational_units" : {
            "description" : "OUs to provision roles into",
            "items" : {
              "example" : "r-xvfz",
              "pattern" : "^(r-[0-9a-z]{4,32}|ou-[a-z0-9]{4,32}-[a-z0-9]{8,32})$",
              "x-pattern-message" : "must start with either \"r-\" followed by 4 to 32 lowercase letters or digits,  or \"ou-\" followed by 4 to 32 lowercase letters or digits, a hyphen, and then  8 to 32 lowercase letters or digits, with no additional characters before or after."
            }
          },
          "skip_accounts" : {
            "description" : "Account IDs to skip onboarding",
            "items" : {
              "description" : "ID of an account in AWS",
              "example" : "615713231484",
              "pattern" : "^\\d{12}$",
              "x-pattern-message" : "account ID must be exactly 12 digits"
            }
          }
        },
        "required" : [ "notify_url", "organizational_units" ]
      },
      "PlatformPolicySortBy" : {
        "enum" : [ "id", "name", "description", "status", "filter_id", "evaluated_resources", "rule_violations", "created_by", "created_at", "updated_at" ],
        "title" : "PlatformPolicySortBy"
      },
      "PlatformPolicySortDirection" : {
        "default" : "asc",
        "enum" : [ "asc", "desc" ],
        "title" : "CustomColumnSortDirection",
        "type" : "string"
      },
      "PlatformPolicy" : {
        "properties" : {
          "id" : {
            "format" : "uuid",
            "x-go-name" : "ID"
          },
          "name" : { },
          "description" : { },
          "status" : {
            "enum" : [ "paused", "active" ]
          },
          "framework_ids" : {
            "items" : {
              "format" : "uuid"
            },
            "x-go-name" : "FrameworkIDs"
          },
          "filter_id" : {
            "x-go-name" : "FilterID"
          },
          "evaluated_resources" : { },
          "rule_violations" : { },
          "created_by" : {
            "description" : "Deprecated: Use created_by2 instead"
          },
          "created_by2" : {
            "$ref" : "#/components/schemas/CreatedBy"
          },
          "updated_by" : {
            "$ref" : "#/components/schemas/CreatedBy"
          },
          "created_at" : {
            "format" : "date-time"
          },
          "updated_at" : {
            "format" : "date-time"
          }
        },
        "required" : [ "description", "framework_ids", "id", "name", "status" ]
      },
      "PlatformCreateOrUpdatePolicy" : {
        "properties" : {
          "name" : { },
          "description" : { },
          "framework_ids" : {
            "items" : {
              "format" : "uuid"
            },
            "x-go-name" : "FrameworkIDs"
          },
          "filter_id" : {
            "x-go-name" : "FilterID"
          },
          "status" : {
            "enum" : [ "paused", "active" ]
          }
        },
        "required" : [ "description", "framework_ids", "name", "status" ]
      },
      "PlatformPolicyFramework" : {
        "properties" : {
          "id" : {
            "format" : "uuid",
            "x-go-name" : "ID"
          },
          "label" : { },
          "description" : { }
        },
        "required" : [ "id", "label" ]
      },
      "PlatformPolicyFrameworkSortBy" : {
        "enum" : [ "id", "label", "description" ],
        "title" : "PlatformPolicyFrameworkSortBy"
      },
      "PlatformPolicyRuleSortBy" : {
        "enum" : [ "id", "framework_id", "name", "description", "risk", "category", "violations", "version" ],
        "title" : "PlatformPolicyRuleSortBy"
      },
      "PlatformPolicyRule" : {
        "properties" : {
          "id" : {
            "format" : "uuid",
            "x-go-name" : "ID"
          },
          "framework_id" : {
            "format" : "uuid",
            "x-go-name" : "FrameworkID"
          },
          "framework_name" : { },
          "name" : { },
          "risk" : {
            "enum" : [ "critical", "high", "medium", "low" ]
          },
          "category" : { },
          "violations" : { },
          "description" : { },
          "remediation" : { },
          "learn_more_link" : { }
        }
      },
      "PlatformPolicyRuleDetailSortBy" : {
        "enum" : [ "name", "cloud", "account", "region", "tags" ],
        "title" : "PlatformPolicyRuleDetailSortBy"
      },
      "PlatformPolicyRuleDetail" : {
        "properties" : {
          "name" : { },
          "account" : { },
          "cloud" : { },
          "region" : { },
          "tags" : {
            "items" : { }
          }
        }
      },
      "PlatformPolicyViolationHistory" : {
        "properties" : {
          "id" : {
            "format" : "uuid",
            "x-go-name" : "ID"
          },
          "rule_violations" : {
            "description" : "Number of rule violations logged."
          },
          "created_at" : {
            "description" : "Time the rule violations were logged.",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time"
          }
        },
        "required" : [ "created_at", "id", "rule_violations" ]
      },
      "QueryTag" : {
        "description" : "A saved query tag."
      },
      "Alert" : {
        "additionalProperties" : false,
        "description" : "An alert instance that can be triggered by a query",
        "properties" : {
          "id" : {
            "description" : "Unique identifier for the alert",
            "format" : "uuid",
            "x-go-name" : "ID"
          },
          "query_id" : {
            "description" : "Reference to the associated query",
            "format" : "uuid",
            "x-go-name" : "QueryID"
          },
          "enabled" : {
            "description" : "Indicates if the alert is enabled"
          },
          "message" : {
            "description" : "Alert message content"
          },
          "severity" : {
            "$ref" : "#/components/schemas/AlertSeverity"
          },
          "state" : {
            "$ref" : "#/components/schemas/AlertState"
          },
          "total_violations" : {
            "description" : "Number of violations that triggered the alert",
            "format" : "int64"
          },
          "last_evaluated_at" : {
            "description" : "Timestamp when the alert was last evaluated",
            "format" : "date-time"
          },
          "triggered_at" : {
            "description" : "Timestamp when the alert was triggered",
            "format" : "date-time"
          },
          "created_at" : {
            "description" : "Timestamp when the alert was created",
            "format" : "date-time"
          },
          "updated_at" : {
            "description" : "Timestamp when the alert was last updated",
            "format" : "date-time"
          },
          "num_destinations" : {
            "description" : "Number of notification destinations this alert is configured to send to"
          }
        },
        "required" : [ "created_at", "enabled", "id", "message", "num_destinations", "query_id", "severity", "state", "total_violations", "updated_at" ],
        "title" : "Alert"
      },
      "Query" : {
        "additionalProperties" : false,
        "description" : "Saved query",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/QueryID"
          },
          "name" : {
            "example" : "Find all t2.micro EC2 instances"
          },
          "query" : {
            "$ref" : "#/components/schemas/QueryExpression"
          },
          "description" : {
            "example" : "Query to find all EC2 instances of type t2.micro from the aws_ec2_instance raw table"
          },
          "user_id" : {
            "$ref" : "#/components/schemas/UserID"
          },
          "tags" : {
            "items" : {
              "$ref" : "#/components/schemas/QueryTag"
            },
            "x-go-type-skip-optional-pointer" : true
          },
          "created_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time"
          },
          "alert_configured" : {
            "description" : "Indicates if the query has an alert configured"
          },
          "alert" : {
            "$ref" : "#/components/schemas/Alert"
          }
        },
        "required" : [ "alert_configured", "created_at", "id", "name", "query" ],
        "title" : "Query"
      },
      "QueryCreate" : {
        "additionalProperties" : false,
        "description" : "Create a saved query",
        "properties" : {
          "name" : {
            "example" : "Find all t2.micro EC2 instances"
          },
          "query" : {
            "example" : "SELECT account_id, instance_id, instance_type, region, name, tags FROM aws_ec2_instance WHERE instance_type = 't2.micro'"
          },
          "public" : {
            "default" : true,
            "x-omitempty" : false,
            "x-go-type-skip-optional-pointer" : true
          },
          "tags" : {
            "items" : {
              "$ref" : "#/components/schemas/QueryTag"
            },
            "x-go-type-skip-optional-pointer" : true
          },
          "description" : {
            "example" : "Query to find all EC2 instances of type t2.micro from the aws_ec2_instance raw table"
          },
          "alert" : {
            "$ref" : "#/components/schemas/AlertCreate"
          }
        },
        "required" : [ "name", "query" ],
        "title" : "Query Create"
      },
      "QueryDetail" : {
        "additionalProperties" : false,
        "description" : "Query Detail",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/QueryID"
          },
          "name" : {
            "example" : "Find all t2.micro EC2 instances"
          },
          "query" : {
            "$ref" : "#/components/schemas/QueryExpression"
          },
          "description" : {
            "example" : "Query to find all EC2 instances of type t2.micro from the aws_ec2_instance raw table"
          },
          "user_id" : {
            "$ref" : "#/components/schemas/UserID"
          },
          "tags" : {
            "items" : {
              "$ref" : "#/components/schemas/QueryTag"
            },
            "x-go-type-skip-optional-pointer" : true
          },
          "created_at" : {
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time"
          },
          "alert_configured" : {
            "description" : "Indicates if the query has an alert configured. When this is set, the alert field will be populated with the alert details."
          },
          "alert" : {
            "$ref" : "#/components/schemas/AlertDetail"
          }
        },
        "required" : [ "alert_configured", "created_at", "id", "name", "query" ],
        "title" : "Query Detail"
      },
      "AlertUpdate" : {
        "description" : "Alert Update Definition",
        "properties" : {
          "message" : {
            "example" : "All resources need to be tagged"
          },
          "severity" : {
            "$ref" : "#/components/schemas/AlertSeverity"
          },
          "enabled" : {
            "description" : "Indicates if the alert is enabled"
          },
          "notification_destinations" : {
            "description" : "List of notification destinations to send alerts to",
            "items" : {
              "$ref" : "#/components/schemas/NotificationDestinationID"
            },
            "allowEmptyValue" : true,
            "explode" : true
          }
        },
        "title" : "Alert Update"
      },
      "QueryUpdate" : {
        "additionalProperties" : false,
        "description" : "Update a saved query",
        "properties" : {
          "name" : {
            "example" : "Find all t2.micro EC2 instances"
          },
          "query" : {
            "example" : "SELECT account_id, instance_id, instance_type, region, name, tags FROM aws_ec2_instances WHERE instance_type = 't2.micro'"
          },
          "public" : { },
          "tags" : {
            "items" : {
              "$ref" : "#/components/schemas/QueryTag"
            }
          },
          "description" : {
            "example" : "Query to find all EC2 instances of type t2.micro from the aws_ec2_instances raw table"
          },
          "alert" : {
            "$ref" : "#/components/schemas/AlertUpdate"
          }
        },
        "title" : "Query Update"
      },
      "ReportSortBy" : {
        "enum" : [ "id", "title", "description", "private", "created_at", "updated_at" ],
        "title" : "ReportSortBy"
      },
      "ReportSortDirection" : {
        "default" : "asc",
        "enum" : [ "asc", "desc" ],
        "title" : "ReportTemplateSortDirection"
      },
      "Report" : {
        "properties" : {
          "id" : {
            "format" : "uuid",
            "x-go-name" : "ID"
          },
          "title" : { },
          "description" : { },
          "content" : {
            "description" : "YAML body"
          },
          "private" : { },
          "created_by" : {
            "$ref" : "#/components/schemas/CreatedBy"
          },
          "updated_by" : {
            "$ref" : "#/components/schemas/CreatedBy"
          },
          "created_at" : {
            "format" : "date-time"
          },
          "updated_at" : {
            "format" : "date-time"
          }
        },
        "required" : [ "content", "description", "id", "private", "title" ]
      },
      "ReportCreateOrUpdate" : {
        "properties" : {
          "title" : { },
          "description" : { },
          "content" : {
            "description" : "YAML body"
          },
          "private" : { },
          "template_id" : {
            "description" : "Template ID, if report is being created from a template",
            "format" : "uuid",
            "x-go-name" : "TemplateID"
          }
        }
      },
      "ReportTemplateSortBy" : {
        "enum" : [ "id", "title", "description", "visible", "created_at", "updated_at" ],
        "title" : "ReportTemplateSortBy"
      },
      "ReportTemplateSortDirection" : {
        "default" : "asc",
        "enum" : [ "asc", "desc" ],
        "title" : "ReportTemplateSortDirection"
      },
      "ReportTemplate" : {
        "properties" : {
          "id" : {
            "format" : "uuid",
            "x-go-name" : "ID"
          },
          "title" : { },
          "description" : { },
          "content" : {
            "description" : "YAML body"
          },
          "visible" : { },
          "created_at" : {
            "format" : "date-time"
          },
          "updated_at" : {
            "format" : "date-time"
          }
        },
        "required" : [ "content", "description", "id", "title", "visible" ]
      },
      "ReportTemplateCreateOrUpdate" : {
        "properties" : {
          "title" : { },
          "description" : { },
          "content" : {
            "description" : "YAML body"
          },
          "visible" : { }
        }
      },
      "SyncPluginPath" : {
        "description" : "Plugin path in CloudQuery registry",
        "pattern" : "^cloudquery/[^/]+",
        "x-pattern-message" : "should be in the format cloudquery/<name>"
      },
      "SyncDestinationWriteMode" : {
        "default" : "overwrite-delete-stale",
        "description" : "Write mode for the destination",
        "enum" : [ "append", "overwrite", "overwrite-delete-stale" ]
      },
      "SyncDestinationMigrateMode" : {
        "default" : "safe",
        "description" : "Migrate mode for the destination",
        "enum" : [ "safe", "forced" ]
      },
      "SyncDestinationTestConnectionCreate" : {
        "properties" : {
          "path" : {
            "$ref" : "#/components/schemas/SyncPluginPath"
          },
          "destination_name" : {
            "description" : "Name of an existing destination"
          },
          "version" : {
            "description" : "Version of the plugin",
            "example" : "v1.2.3"
          },
          "write_mode" : {
            "$ref" : "#/components/schemas/SyncDestinationWriteMode"
          },
          "migrate_mode" : {
            "$ref" : "#/components/schemas/SyncDestinationMigrateMode"
          },
          "sync_group_id" : {
            "x-go-name" : "SyncGroupID"
          },
          "spec" : {
            "additionalProperties" : false,
            "format" : "Plugin parameters, specific to each plugin"
          },
          "env" : {
            "description" : "Environment variables for the plugin. All environment variables will be stored as secrets.",
            "items" : {
              "$ref" : "#/components/schemas/SyncEnvCreate"
            }
          },
          "connector_id" : {
            "$ref" : "#/components/schemas/ConnectorID"
          }
        },
        "required" : [ "path", "version" ],
        "title" : "Sync Destination Test Connection creation definition"
      },
      "SyncTestConnectionID" : {
        "description" : "unique ID of the test connection",
        "example" : "12345678-1234-1234-1234-1234567890ab",
        "format" : "uuid",
        "x-go-name" : "ID"
      },
      "SyncTestConnectionStatus" : {
        "description" : "The status of the sync run",
        "enum" : [ "completed", "failed", "started", "created" ]
      },
      "SyncDestinationTestConnection" : {
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/SyncTestConnectionID"
          },
          "status" : {
            "$ref" : "#/components/schemas/SyncTestConnectionStatus"
          },
          "failure_reason" : {
            "description" : "Reason for failure",
            "example" : "password authentication failed for user \"exampleuser\""
          },
          "failure_code" : {
            "description" : "Code for failure",
            "example" : "INVALID_CREDENTIALS"
          },
          "created_at" : {
            "description" : "Time the test connection was created",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time"
          },
          "completed_at" : {
            "description" : "Time the test connection was completed",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time"
          },
          "plugin_path" : {
            "$ref" : "#/components/schemas/SyncPluginPath"
          },
          "plugin_version" : {
            "$ref" : "#/components/schemas/VersionName"
          },
          "sync_group_id" : {
            "x-go-name" : "SyncGroupID"
          }
        },
        "required" : [ "created_at", "id", "status" ]
      },
      "SyncDestinationTestConnectionID" : {
        "description" : "ID of the Sync Destination Test Connection",
        "example" : "12345678-1234-1234-1234-1234567890ab",
        "format" : "uuid",
        "x-go-name" : "SyncDestinationTestConnectionID"
      },
      "DisplayName" : {
        "description" : "A human-readable display name",
        "example" : "Human Readable Name",
        "maxLength" : 255,
        "minLength" : 1,
        "pattern" : "^[a-zA-Z\\p{L}\\p{N}_][a-zA-Z\\p{L}\\p{N}_ \\-'\\(\\)\\[\\]]*$",
        "x-pattern-message" : "can contain only letters, numbers, spaces, hyphens, underscores, brackets and apostrophes"
      },
      "PromoteSyncDestinationTestConnection" : {
        "description" : "Sync Destination Definition",
        "properties" : {
          "name" : {
            "description" : "Descriptive, unique name for the destination",
            "example" : "my-destination-definition",
            "pattern" : "^[a-zA-Z0-9_-]+$",
            "x-pattern-message" : "can contain only alphanumerical characters, dashes, and underscores"
          },
          "display_name" : {
            "$ref" : "#/components/schemas/DisplayName"
          },
          "write_mode" : {
            "$ref" : "#/components/schemas/SyncDestinationWriteMode"
          },
          "migrate_mode" : {
            "$ref" : "#/components/schemas/SyncDestinationMigrateMode"
          },
          "send_sync_summary" : { },
          "overwrite_destination" : {
            "description" : "Set this to allow overwriting an existing sync destination. Defaults to true to preserve compatibility."
          }
        },
        "required" : [ "name" ],
        "title" : "Sync Destination definition for creating a new source"
      },
      "SyncLastUpdateSource" : {
        "description" : "How was the source or destination been created or updated last",
        "enum" : [ "yaml", "ui" ]
      },
      "SyncDestinationCreate" : {
        "description" : "Sync Destination Definition",
        "properties" : {
          "name" : {
            "description" : "Descriptive, unique name for the destination",
            "example" : "my-destination-definition",
            "pattern" : "^[a-zA-Z0-9_-]+$",
            "x-pattern-message" : "can contain only alphanumerical characters, dashes, and underscores"
          },
          "display_name" : {
            "$ref" : "#/components/schemas/DisplayName"
          },
          "path" : {
            "$ref" : "#/components/schemas/SyncPluginPath"
          },
          "version" : {
            "description" : "Version of the plugin",
            "example" : "v1.2.3"
          },
          "write_mode" : {
            "$ref" : "#/components/schemas/SyncDestinationWriteMode"
          },
          "migrate_mode" : {
            "$ref" : "#/components/schemas/SyncDestinationMigrateMode"
          },
          "sync_group_id" : {
            "x-go-name" : "SyncGroupID"
          },
          "send_sync_summary" : { },
          "spec" : {
            "additionalProperties" : false,
            "format" : "Plugin parameters, specific to each plugin"
          },
          "env" : {
            "description" : "Environment variables for the plugin. All environment variables will be stored as secrets.",
            "items" : {
              "$ref" : "#/components/schemas/SyncEnvCreate"
            }
          },
          "last_update_source" : {
            "$ref" : "#/components/schemas/SyncLastUpdateSource"
          },
          "connector_id" : {
            "$ref" : "#/components/schemas/ConnectorID"
          },
          "transformers" : {
            "items" : {
              "description" : "Unique name of the transformer",
              "pattern" : "^[a-zA-Z0-9_-]+$",
              "x-pattern-message" : "can contain only alphanumerical characters, dashes, and underscores"
            }
          }
        },
        "required" : [ "name", "path", "version" ],
        "title" : "Sync Destination definition for creating a new destination"
      },
      "SyncEnv" : {
        "description" : "Environment variable. Environment variables are assumed to be secret.",
        "properties" : {
          "name" : {
            "description" : "Name of the environment variable"
          }
        },
        "required" : [ "name" ]
      },
      "SyncDestination" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SyncDestinationCreate"
        }, {
          "properties" : {
            "created_at" : {
              "description" : "Time when the source was created",
              "example" : "2023-07-14T16:53:42Z",
              "format" : "date-time"
            },
            "updated_at" : {
              "description" : "Time when the source was last updated",
              "example" : "2023-07-14T16:53:42Z",
              "format" : "date-time"
            },
            "env" : {
              "description" : "Environment variables for the plugin.",
              "items" : {
                "$ref" : "#/components/schemas/SyncEnv"
              }
            },
            "draft" : {
              "description" : "If a sync destination is in draft, it cannot be used in syncs. To get it out of draft, 'promote' it using a successful test connection ID."
            },
            "previous_version" : {
              "description" : "Previous version of the plugin during a version upgrade",
              "example" : "v1.2.2"
            }
          },
          "required" : [ "created_at", "draft", "env", "updated_at" ]
        } ]
      },
      "SyncGenericSortBy" : {
        "enum" : [ "name", "display_name", "path", "version", "created_at", "updated_at", "draft" ],
        "title" : "SyncGenericSortBy"
      },
      "SyncSortDirection" : {
        "default" : "asc",
        "enum" : [ "asc", "desc" ],
        "title" : "SyncSortDirection"
      },
      "SyncDestinationWriteModeUpdate" : {
        "description" : "Write mode for the destination, for updating",
        "enum" : [ "append", "overwrite", "overwrite-delete-stale" ]
      },
      "SyncDestinationMigrateModeUpdate" : {
        "description" : "Migrate mode for the destination, for updating",
        "enum" : [ "safe", "forced" ]
      },
      "SyncDestinationUpdate" : {
        "description" : "Sync Destination Update Definition",
        "properties" : {
          "display_name" : {
            "$ref" : "#/components/schemas/DisplayName"
          },
          "write_mode" : {
            "$ref" : "#/components/schemas/SyncDestinationWriteModeUpdate"
          },
          "migrate_mode" : {
            "$ref" : "#/components/schemas/SyncDestinationMigrateModeUpdate"
          },
          "send_sync_summary" : { },
          "last_update_source" : {
            "$ref" : "#/components/schemas/SyncLastUpdateSource"
          },
          "transformers" : {
            "items" : {
              "description" : "Unique name of the transformer",
              "pattern" : "^[a-zA-Z0-9_-]+$",
              "x-pattern-message" : "can contain only alphanumerical characters, dashes, and underscores"
            }
          }
        },
        "title" : "Sync Destination definition for updating a destination"
      },
      "SyncSortBy" : {
        "enum" : [ "cpu", "created_at", "created_by", "destinations", "disabled", "display_name", "memory", "name", "schedule", "source", "updated_at", "last_run_created_at", "last_run_updated_at", "last_run_completed_at", "last_run_errors", "last_run_warnings", "last_run_total_rows", "last_run_status", "last_run_migration" ],
        "title" : "SyncSortBy"
      },
      "Sync" : {
        "description" : "Managed Sync definition",
        "properties" : {
          "name" : {
            "description" : "Descriptive, unique name for the sync",
            "pattern" : "^[a-zA-Z0-9_-]+$",
            "x-pattern-message" : "can contain only alphanumerical characters, dashes, and underscores"
          },
          "display_name" : {
            "$ref" : "#/components/schemas/DisplayName"
          },
          "source" : {
            "description" : "Unique name of the source"
          },
          "destinations" : {
            "description" : "List of destinations for the sync",
            "items" : {
              "description" : "Unique name of the destination"
            }
          },
          "disabled" : {
            "description" : "Whether the sync is disabled"
          },
          "schedule" : {
            "description" : "Cron schedule for the sync"
          },
          "cpu" : {
            "description" : "CPU quota for the sync",
            "example" : "1",
            "x-go-name" : "CPU"
          },
          "memory" : {
            "description" : "Memory quota for the sync",
            "example" : "2Gi"
          },
          "created_at" : {
            "description" : "Time when the sync was created",
            "format" : "date-time"
          },
          "updated_at" : {
            "description" : "Time when the sync was updated",
            "format" : "date-time"
          },
          "created_by" : { }
        },
        "required" : [ "cpu", "created_at", "destinations", "disabled", "display_name", "memory", "name", "schedule", "source", "updated_at" ]
      },
      "SyncRunStatus" : {
        "description" : "The status of the sync run",
        "enum" : [ "completed", "failed", "started", "cancelled", "created", "pending" ]
      },
      "SyncRunStatusReason" : {
        "description" : "The reason for the status",
        "enum" : [ "error", "oom_killed", "partial_success" ]
      },
      "ListSyncLastRun" : {
        "description" : "Managed Sync List Entry Last Run Info",
        "properties" : {
          "id" : {
            "description" : "unique ID of the run",
            "example" : "12345678-1234-1234-1234-1234567890ab",
            "format" : "uuid",
            "x-go-name" : "ID"
          },
          "status" : {
            "$ref" : "#/components/schemas/SyncRunStatus"
          },
          "status_reason" : {
            "$ref" : "#/components/schemas/SyncRunStatusReason"
          },
          "migration" : {
            "description" : "Whether the sync run was a migration"
          },
          "created_at" : {
            "description" : "Time the sync run was created",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time"
          },
          "completed_at" : {
            "description" : "Time the sync run was completed",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time"
          },
          "total_rows" : {
            "description" : "Total number of rows in the sync",
            "format" : "int64"
          },
          "warnings" : {
            "description" : "Number of warnings encountered during the sync",
            "format" : "int64"
          },
          "errors" : {
            "description" : "Number of errors encountered during the sync",
            "format" : "int64"
          }
        },
        "required" : [ "created_at", "errors", "id", "migration", "status", "total_rows", "warnings" ]
      },
      "ListSync" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Sync"
        }, {
          "properties" : {
            "last_run" : {
              "$ref" : "#/components/schemas/ListSyncLastRun"
            }
          }
        } ],
        "description" : "Managed Sync List Entry"
      },
      "SyncTestConnection" : {
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/SyncTestConnectionID"
          },
          "status" : {
            "$ref" : "#/components/schemas/SyncTestConnectionStatus"
          },
          "failure_reason" : {
            "description" : "Reason for failure",
            "example" : "password authentication failed for user \"exampleuser\""
          },
          "failure_code" : {
            "description" : "Code for failure",
            "example" : "INVALID_CREDENTIALS"
          },
          "created_at" : {
            "description" : "Time the test connection was created",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time"
          },
          "completed_at" : {
            "description" : "Time the test connection was completed",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time"
          },
          "plugin_path" : {
            "$ref" : "#/components/schemas/SyncPluginPath"
          },
          "plugin_version" : {
            "$ref" : "#/components/schemas/VersionName"
          },
          "plugin_kind" : {
            "$ref" : "#/components/schemas/PluginKind"
          }
        },
        "required" : [ "created_at", "id", "status" ]
      },
      "SyncSourceTestConnectionCreate" : {
        "properties" : {
          "path" : {
            "$ref" : "#/components/schemas/SyncPluginPath"
          },
          "source_name" : {
            "description" : "Name of an existing source"
          },
          "version" : {
            "description" : "Version of the plugin",
            "example" : "v1.2.3"
          },
          "spec" : {
            "additionalProperties" : false,
            "format" : "Plugin parameters, specific to each plugin"
          },
          "env" : {
            "description" : "Environment variables for the plugin. All environment variables will be stored as secrets.",
            "items" : {
              "$ref" : "#/components/schemas/SyncEnvCreate"
            }
          },
          "connector_id" : {
            "$ref" : "#/components/schemas/ConnectorID"
          },
          "onboarding_id" : {
            "$ref" : "#/components/schemas/OnboardingID"
          }
        },
        "required" : [ "path", "version" ],
        "title" : "Sync Source Test Connection creation definition"
      },
      "SyncSourceTestConnection" : {
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/SyncTestConnectionID"
          },
          "status" : {
            "$ref" : "#/components/schemas/SyncTestConnectionStatus"
          },
          "failure_reason" : {
            "description" : "Reason for failure",
            "example" : "password authentication failed for user \"exampleuser\"",
            "type" : "string"
          },
          "failure_code" : {
            "description" : "Code for failure",
            "example" : "INVALID_CREDENTIALS",
            "type" : "string"
          },
          "created_at" : {
            "description" : "Time the test connection was created",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time"
          },
          "completed_at" : {
            "description" : "Time the test connection was completed",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time"
          },
          "plugin_path" : {
            "$ref" : "#/components/schemas/SyncPluginPath"
          },
          "plugin_version" : {
            "$ref" : "#/components/schemas/VersionName"
          }
        },
        "required" : [ "created_at", "id", "status" ]
      },
      "SyncSourceTestConnectionID" : {
        "description" : "ID of the Sync Source Test Connection",
        "example" : "12345678-1234-1234-1234-1234567890ab",
        "format" : "uuid",
        "x-go-name" : "SyncSourceTestConnectionID"
      },
      "PromoteSyncSourceTestConnection" : {
        "description" : "Sync Source Definition",
        "properties" : {
          "name" : {
            "description" : "Descriptive, unique name for the source",
            "example" : "my-source-definition",
            "pattern" : "^[a-zA-Z0-9_-]+$",
            "x-pattern-message" : "can contain only alphanumerical characters, dashes, and underscores"
          },
          "display_name" : {
            "$ref" : "#/components/schemas/DisplayName"
          },
          "tables" : {
            "description" : "Tables to sync. Wildcards are supported. Note that child tables are excluded by default, and need to be explicitly specified.",
            "items" : { }
          },
          "skip_tables" : {
            "description" : "Tables matched by `tables` that should be skipped. Wildcards are supported.",
            "items" : { }
          },
          "overwrite_source" : {
            "description" : "Set this to allow overwriting an existing sync source. Defaults to true to preserve compatibility."
          }
        },
        "required" : [ "name", "tables" ],
        "title" : "Sync Source definition for creating a new source"
      },
      "SyncSourceCreate" : {
        "description" : "Sync Source Definition",
        "properties" : {
          "name" : {
            "description" : "Descriptive, unique name for the source",
            "example" : "my-source-definition",
            "pattern" : "^[a-zA-Z0-9_-]+$",
            "x-pattern-message" : "can contain only alphanumerical characters, dashes, and underscores"
          },
          "display_name" : {
            "$ref" : "#/components/schemas/DisplayName"
          },
          "path" : {
            "$ref" : "#/components/schemas/SyncPluginPath"
          },
          "version" : {
            "description" : "Version of the plugin",
            "example" : "v1.2.3"
          },
          "tables" : {
            "description" : "Tables to sync. Wildcards are supported. Note that child tables are excluded by default, and need to be explicitly specified.",
            "items" : { }
          },
          "skip_tables" : {
            "description" : "Tables matched by `tables` that should be skipped. Wildcards are supported.",
            "items" : { }
          },
          "spec" : {
            "additionalProperties" : false,
            "format" : "Plugin parameters, specific to each plugin"
          },
          "env" : {
            "description" : "Environment variables for the plugin. All environment variables will be stored as secrets.",
            "items" : {
              "$ref" : "#/components/schemas/SyncEnvCreate"
            }
          },
          "last_update_source" : {
            "$ref" : "#/components/schemas/SyncLastUpdateSource"
          },
          "connector_id" : {
            "$ref" : "#/components/schemas/ConnectorID"
          },
          "onboarding_id" : {
            "$ref" : "#/components/schemas/OnboardingID"
          }
        },
        "required" : [ "name", "path", "tables", "version" ],
        "title" : "Sync Source definition for creating a new source"
      },
      "SyncSource" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SyncSourceCreate"
        }, {
          "properties" : {
            "created_at" : {
              "description" : "Time when the source was created",
              "example" : "2023-07-14T16:53:42Z",
              "format" : "date-time"
            },
            "updated_at" : {
              "description" : "Time when the source was last updated",
              "example" : "2023-07-14T16:53:42Z",
              "format" : "date-time"
            },
            "env" : {
              "description" : "Environment variables for the plugin.",
              "items" : {
                "$ref" : "#/components/schemas/SyncEnv"
              }
            },
            "draft" : {
              "description" : "If a sync source is in draft, it cannot be used in syncs. To get it out of draft, 'promote' it using a successful test connection ID."
            },
            "previous_version" : {
              "description" : "Previous version of the plugin during a version upgrade",
              "example" : "v1.2.2"
            }
          },
          "required" : [ "created_at", "draft", "env", "updated_at" ]
        } ]
      },
      "SyncSourceUpdate" : {
        "description" : "Sync Source Update Definition",
        "properties" : {
          "display_name" : {
            "$ref" : "#/components/schemas/DisplayName"
          },
          "tables" : {
            "description" : "Tables to sync. Wildcards are supported. Note that child tables are excluded by default, and need to be explicitly specified.",
            "items" : { }
          },
          "skip_tables" : {
            "description" : "Tables matched by `tables` that should be skipped. Wildcards are supported.",
            "items" : { }
          },
          "last_update_source" : {
            "$ref" : "#/components/schemas/SyncLastUpdateSource"
          }
        },
        "title" : "Sync Source definition for updating a source"
      },
      "SyncTransformerTestConnectionCreate" : {
        "properties" : {
          "path" : {
            "$ref" : "#/components/schemas/SyncPluginPath"
          },
          "transformer_name" : {
            "description" : "Name of an existing transformer"
          },
          "version" : {
            "description" : "Version of the plugin",
            "example" : "v1.2.3"
          },
          "spec" : {
            "additionalProperties" : false,
            "format" : "Plugin parameters, specific to each plugin"
          },
          "env" : {
            "description" : "Environment variables for the plugin. All environment variables will be stored as secrets.",
            "items" : {
              "$ref" : "#/components/schemas/SyncEnvCreate"
            }
          },
          "connector_id" : {
            "$ref" : "#/components/schemas/ConnectorID"
          }
        },
        "required" : [ "path", "version" ],
        "title" : "Sync Transformer Test Connection creation definition"
      },
      "SyncTransformerTestConnection" : {
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/SyncTestConnectionID"
          },
          "status" : {
            "$ref" : "#/components/schemas/SyncTestConnectionStatus"
          },
          "failure_reason" : {
            "description" : "Reason for failure",
            "example" : "password authentication failed for user \"exampleuser\"",
            "type" : "string"
          },
          "failure_code" : {
            "description" : "Code for failure",
            "example" : "INVALID_CREDENTIALS",
            "type" : "string"
          },
          "created_at" : {
            "description" : "Time the test connection was created",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time"
          },
          "completed_at" : {
            "description" : "Time the test connection was completed",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time"
          },
          "plugin_path" : {
            "$ref" : "#/components/schemas/SyncPluginPath"
          },
          "plugin_version" : {
            "$ref" : "#/components/schemas/VersionName"
          }
        },
        "required" : [ "created_at", "id", "status" ]
      },
      "SyncTransformerTestConnectionID" : {
        "description" : "ID of the Sync Transformer Test Connection",
        "example" : "12345678-1234-1234-1234-1234567890ab",
        "format" : "uuid",
        "x-go-name" : "SyncTransformerTestConnectionID"
      },
      "PromoteSyncTransformerTestConnection" : {
        "description" : "Sync Transformer Definition",
        "properties" : {
          "name" : {
            "description" : "Descriptive, unique name for the transformer",
            "example" : "my-transformer-definition",
            "pattern" : "^[a-zA-Z0-9_-]+$",
            "x-pattern-message" : "can contain only alphanumerical characters, dashes, and underscores"
          },
          "display_name" : {
            "$ref" : "#/components/schemas/DisplayName"
          },
          "overwrite_transformer" : {
            "description" : "Set this to allow overwriting an existing sync transformer. Defaults to true to preserve compatibility."
          }
        },
        "required" : [ "name" ],
        "title" : "Sync Transformer definition for creating a new transformer"
      },
      "SyncTransformerCreate" : {
        "description" : "Sync Transformer Definition",
        "properties" : {
          "name" : {
            "description" : "Descriptive, unique name for the transformer",
            "example" : "my-transformer-definition",
            "pattern" : "^[a-zA-Z0-9_-]+$",
            "x-pattern-message" : "can contain only alphanumerical characters, dashes, and underscores"
          },
          "display_name" : {
            "$ref" : "#/components/schemas/DisplayName"
          },
          "path" : {
            "$ref" : "#/components/schemas/SyncPluginPath"
          },
          "version" : {
            "description" : "Version of the plugin",
            "example" : "v1.2.3"
          },
          "spec" : {
            "additionalProperties" : false,
            "format" : "Plugin parameters, specific to each plugin"
          },
          "env" : {
            "description" : "Environment variables for the plugin. All environment variables will be stored as secrets.",
            "items" : {
              "$ref" : "#/components/schemas/SyncEnvCreate"
            }
          },
          "last_update_source" : {
            "$ref" : "#/components/schemas/SyncLastUpdateSource"
          },
          "connector_id" : {
            "$ref" : "#/components/schemas/ConnectorID"
          }
        },
        "required" : [ "name", "path", "tables", "version" ],
        "title" : "Sync Transformer definition for creating a new transformer"
      },
      "SyncTransformer" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SyncTransformerCreate"
        }, {
          "properties" : {
            "created_at" : {
              "description" : "Time when the transformer was created",
              "example" : "2023-07-14T16:53:42Z",
              "format" : "date-time"
            },
            "updated_at" : {
              "description" : "Time when the transformer was last updated",
              "example" : "2023-07-14T16:53:42Z",
              "format" : "date-time"
            },
            "env" : {
              "description" : "Environment variables for the plugin.",
              "items" : {
                "$ref" : "#/components/schemas/SyncEnv"
              }
            },
            "draft" : {
              "description" : "If a sync transformer is in draft, it cannot be used in syncs. To get it out of draft, 'promote' it using a successful test connection ID."
            }
          },
          "required" : [ "created_at", "draft", "env", "updated_at" ]
        } ]
      },
      "SyncTransformerUpdate" : {
        "description" : "Sync Transformer Update Definition",
        "properties" : {
          "display_name" : {
            "$ref" : "#/components/schemas/DisplayName"
          },
          "last_update_source" : {
            "$ref" : "#/components/schemas/SyncLastUpdateSource"
          }
        },
        "title" : "Sync Transformer definition for updating a transformer"
      },
      "SyncUpgrade" : {
        "description" : "Sync Version Upgrade Definition",
        "properties" : {
          "path" : {
            "$ref" : "#/components/schemas/SyncPluginPath"
          },
          "kind" : {
            "$ref" : "#/components/schemas/PluginKind"
          },
          "prev_version" : {
            "description" : "Previous version of the plugin",
            "example" : "v1.2.3"
          },
          "new_version" : {
            "description" : "Upgraded version of the plugin",
            "example" : "v1.3.0"
          },
          "platform_version" : {
            "description" : "Version of the platform that the upgrade was made on",
            "example" : "v1.1.0"
          },
          "created_at" : {
            "description" : "Time when the upgrade record was created",
            "example" : "2023-07-14T16:53:42Z",
            "format" : "date-time"
          },
          "sync_source_destination_names" : {
            "description" : "List of sync sources or sync destinations (depending on kind) that were upgraded",
            "items" : { },
            "x-go-name" : "Names"
          },
          "sync_source_destination_display_names" : {
            "description" : "List of sync sources or sync destinations (depending on kind) display names that were upgraded",
            "items" : { },
            "x-go-name" : "DisplayNames"
          }
        },
        "required" : [ "created_at", "kind", "new_version", "path", "platform_version", "prev_version", "sync_source_destination_display_names", "sync_source_destination_names" ],
        "title" : "Sync version upgrade definition"
      },
      "SyncCreate" : {
        "description" : "Managed Sync definition",
        "properties" : {
          "name" : {
            "description" : "Descriptive, unique name for the sync",
            "pattern" : "^[a-zA-Z0-9_-]+$",
            "x-pattern-message" : "can contain only alphanumerical characters, dashes, and underscores"
          },
          "display_name" : {
            "$ref" : "#/components/schemas/DisplayName"
          },
          "source" : {
            "description" : "Unique name of the source",
            "pattern" : "^[a-zA-Z0-9_-]+$",
            "x-pattern-message" : "can contain only alphanumerical characters, dashes, and underscores"
          },
          "destinations" : {
            "items" : {
              "description" : "Unique name of the destination",
              "pattern" : "^[a-zA-Z0-9_-]+$",
              "x-pattern-message" : "can contain only alphanumerical characters, dashes, and underscores"
            },
            "minItems" : 1
          },
          "schedule" : {
            "description" : "Cron schedule for the sync"
          },
          "disabled" : {
            "default" : false,
            "description" : "Whether the sync is disabled"
          },
          "cpu" : {
            "default" : "1",
            "description" : "CPU quota for the sync",
            "x-go-name" : "CPU"
          },
          "memory" : {
            "default" : "2Gi",
            "description" : "Memory quota for the sync"
          }
        },
        "required" : [ "destinations", "name", "source" ]
      },
      "SyncUpdate" : {
        "description" : "Managed Sync definition",
        "properties" : {
          "display_name" : {
            "$ref" : "#/components/schemas/DisplayName"
          },
          "source" : {
            "description" : "Unique name of the source",
            "pattern" : "^[a-zA-Z0-9_-]+$",
            "x-pattern-message" : "can contain only alphanumerical characters, dashes, and underscores"
          },
          "destinations" : {
            "items" : {
              "description" : "Unique name of the destination",
              "pattern" : "^[a-zA-Z0-9_-]+$",
              "x-pattern-message" : "can contain only alphanumerical characters, dashes, and underscores"
            },
            "minItems" : 1
          },
          "schedule" : {
            "description" : "Cron schedule for the sync"
          },
          "disabled" : {
            "default" : false,
            "description" : "Whether the sync is disabled"
          },
          "env" : {
            "description" : "Environment variables for the sync",
            "items" : {
              "$ref" : "#/components/schemas/SyncEnv"
            }
          },
          "cpu" : {
            "default" : "1",
            "description" : "CPU quota for the sync",
            "x-go-name" : "CPU"
          },
          "memory" : {
            "default" : "2Gi",
            "description" : "Memory quota for the sync"
          }
        }
      },
      "SyncRunWorkerPhase" : {
        "description" : "Phase of the worker in the sync run",
        "enum" : [ "Pending", "Running", "Succeeded", "Failed", "Unknown" ]
      },
      "SyncRunWorkerStatus" : {
        "description" : "The worker information for a sync run",
        "properties" : {
          "phase" : {
            "$ref" : "#/components/schemas/SyncRunWorkerPhase"
          },
          "reason" : {
            "description" : "The reason for the status of the worker"
          }
        },
        "required" : [ "phase" ]
      },
      "SyncRun" : {
        "description" : "Managed Sync Run definition",
        "properties" : {
          "sync_name" : {
            "description" : "Name of the sync"
          },
          "id" : {
            "description" : "unique ID of the run",
            "example" : "12345678-1234-1234-1234-1234567890ab",
            "format" : "uuid",
            "x-go-name" : "ID"
          },
          "status" : {
            "$ref" : "#/components/schemas/SyncRunStatus"
          },
          "status_reason" : {
            "$ref" : "#/components/schemas/SyncRunStatusReason"
          },
          "workers" : {
            "description" : "Information about the workers used in the sync run",
            "items" : {
              "$ref" : "#/components/schemas/SyncRunWorkerStatus"
            }
          },
          "created_at" : {
            "description" : "Time the sync run was created",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time"
          },
          "completed_at" : {
            "description" : "Time the sync run was completed",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time"
          },
          "total_rows" : {
            "description" : "Total number of rows in the sync",
            "format" : "int64"
          },
          "warnings" : {
            "description" : "Number of warnings encountered during the sync",
            "format" : "int64"
          },
          "errors" : {
            "description" : "Number of errors encountered during the sync",
            "format" : "int64"
          },
          "migration" : {
            "description" : "Whether the sync run is a migration"
          }
        },
        "required" : [ "created_at", "errors", "id", "status", "sync_name", "total_rows", "warnings" ]
      },
      "SyncRunID" : {
        "description" : "ID of the SyncRun",
        "example" : "12345678-1234-1234-1234-1234567890ab",
        "format" : "uuid",
        "x-go-name" : "SyncRunID"
      },
      "SyncRunDetails" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SyncRun"
        }, {
          "properties" : {
            "cpu_seconds" : {
              "description" : "Total CPU seconds utilized during this sync run",
              "format" : "double",
              "x-go-name" : "CPUSeconds"
            },
            "memory_byte_seconds" : {
              "description" : "Total memory byte seconds utilized during this sync run",
              "format" : "double"
            },
            "network_egress_bytes" : {
              "description" : "Total network egress bytes during this sync run",
              "format" : "double"
            }
          }
        } ]
      },
      "SyncRunStats" : {
        "properties" : {
          "completed_tables" : {
            "description" : "Number of tables completed",
            "format" : "uint64"
          },
          "started_at" : {
            "description" : "Time the table sync was started",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time"
          },
          "last_completed_at" : {
            "description" : "Time the last table was completed",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time"
          },
          "resources" : {
            "description" : "Number of total resources fetched",
            "format" : "uint64"
          },
          "errors" : {
            "description" : "Number of total errors encountered",
            "format" : "uint64"
          },
          "panics" : {
            "description" : "Number of total panics encountered",
            "format" : "uint64"
          }
        },
        "required" : [ "completed_tables", "errors", "panics", "resources", "started_at" ]
      },
      "SyncRunTableStat" : {
        "properties" : {
          "service_name" : {
            "description" : "Name of the service",
            "example" : "aws"
          },
          "name" : {
            "description" : "Name of the table",
            "example" : "aws_ec2_instances"
          },
          "started_at" : {
            "description" : "Time the table sync was started",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time"
          },
          "completed_at" : {
            "description" : "Time the table sync was completed",
            "example" : "2017-07-14T16:53:42Z",
            "format" : "date-time"
          },
          "resources" : {
            "description" : "Number of resources fetched",
            "format" : "uint64"
          },
          "errors" : {
            "description" : "Number of errors encountered",
            "format" : "uint64"
          },
          "panics" : {
            "description" : "Number of panics encountered",
            "format" : "uint64"
          }
        },
        "required" : [ "name", "service_name", "started_at" ]
      },
      "ConnectorCredentialsResponseAWS" : {
        "additionalProperties" : false,
        "description" : "AWS connector credentials response",
        "properties" : {
          "access_key_id" : { },
          "secret_access_key" : { },
          "session_token" : { },
          "source" : { },
          "can_expire" : { },
          "expires" : {
            "format" : "date-time"
          }
        },
        "required" : [ "access_key_id", "can_expire", "expires", "secret_access_key", "session_token", "source" ]
      },
      "ConnectorCredentialsResponseOAuth" : {
        "additionalProperties" : false,
        "description" : "OAuth connector credentials response",
        "properties" : {
          "access_token" : { },
          "expires" : {
            "format" : "date-time"
          }
        },
        "required" : [ "access_token" ]
      },
      "ConnectorIdentityResponseAWS" : {
        "additionalProperties" : false,
        "description" : "AWS connector identity response",
        "properties" : {
          "role_arn" : {
            "description" : "Role ARN to assume",
            "x-go-name" : "RoleARN"
          }
        },
        "required" : [ "role_arn" ]
      },
      "UsageSummaryGroup" : {
        "description" : "A usage summary group.",
        "properties" : {
          "name" : {
            "description" : "The name of the group.",
            "example" : "plugin"
          },
          "value" : {
            "description" : "The value of the group at this index.",
            "example" : "cloudquery/source/aws"
          }
        },
        "required" : [ "name", "value" ],
        "title" : "CloudQuery Usage Summary Group"
      },
      "UsageSummaryValue" : {
        "description" : "A usage summary value.",
        "properties" : {
          "timestamp" : {
            "description" : "The timestamp marking the start of a period.",
            "format" : "date-time"
          },
          "paid_rows" : {
            "description" : "The paid rows that were synced in this period, one per group.",
            "items" : {
              "format" : "int64"
            }
          },
          "cloud_vcpu_seconds" : {
            "description" : "vCPU/seconds consumed in this period, one per group.",
            "items" : {
              "format" : "int64"
            }
          },
          "cloud_vram_byte_seconds" : {
            "description" : "vRAM/byte-seconds consumed in this period, one per group.",
            "items" : {
              "format" : "int64"
            }
          },
          "cloud_egress_bytes" : {
            "description" : "Egress bytes consumed in this period, one per group.",
            "items" : {
              "format" : "int64"
            }
          }
        },
        "required" : [ "timestamp" ],
        "title" : "CloudQuery Usage Summary Value"
      },
      "UsageSummary" : {
        "additionalProperties" : { },
        "description" : "A usage summary for a team, summarizing the paid rows synced and/or cloud resource usage over a given time range.\nNote that empty or all-zero values are not included in the response.\n",
        "properties" : {
          "groups" : {
            "description" : "The groups of the usage summary. Every group will have a corresponding value at the same index in the values array.",
            "example" : [ {
              "name" : "plugin",
              "value" : "cloudquery/source/aws"
            }, {
              "name" : "plugin",
              "value" : "cloudquery/source/gcp"
            } ],
            "items" : {
              "$ref" : "#/components/schemas/UsageSummaryGroup"
            }
          },
          "values" : {
            "example" : [ {
              "timestamp" : "2021-01-01T00:00:00Z",
              "paid_rows" : [ 100, 200 ]
            }, {
              "timestamp" : "2021-01-02T00:00:00Z",
              "paid_rows" : [ 150, 300 ]
            } ],
            "items" : {
              "$ref" : "#/components/schemas/UsageSummaryValue"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/UsageSummary_metadata"
          }
        },
        "required" : [ "groups", "metadata", "values" ],
        "title" : "CloudQuery Usage Summary"
      },
      "ImageURL" : {
        "properties" : {
          "upload_url" : {
            "example" : "https://cloudquery.io/api/v1/upload/1234567890abcdef1234567890abcdef"
          },
          "download_url" : {
            "example" : "https://cloudquery.io/api/v1/download/1234567890abcdef1234567890abcdef"
          },
          "required_headers" : {
            "additionalProperties" : {
              "items" : { }
            },
            "description" : "Required HTTP headers to include for the upload"
          }
        },
        "required" : [ "download_url", "required_headers", "upload_url" ]
      },
      "InvitationWithToken" : {
        "additionalProperties" : false,
        "allOf" : [ {
          "$ref" : "#/components/schemas/Invitation"
        }, {
          "properties" : {
            "token" : {
              "description" : "The token used to accept the invitation",
              "format" : "uuid"
            }
          },
          "required" : [ "token" ]
        } ]
      },
      "RegistryAuthToken" : {
        "additionalProperties" : false,
        "description" : "JWT token for the image registry",
        "properties" : {
          "access_token" : { },
          "token" : { }
        },
        "required" : [ "access_token", "token" ]
      },
      "DockerError" : {
        "additionalProperties" : false,
        "description" : "Error Returned from the Docker Authorization Handler to the Docker Registry",
        "properties" : {
          "details" : { }
        },
        "required" : [ "details" ],
        "title" : "Docker Error"
      },
      "Index_400_response" : {
        "allOf" : [ {
          "additionalProperties" : { },
          "description" : "Basic Error",
          "properties" : {
            "message" : { },
            "status" : { }
          },
          "required" : [ "message", "status" ],
          "title" : "Basic Error"
        }, {
          "properties" : {
            "errors" : {
              "items" : {
                "type" : "string"
              },
              "type" : "array"
            },
            "field_errors" : {
              "additionalProperties" : {
                "type" : "string"
              }
            }
          }
        } ]
      },
      "ListAuditLogs_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/AuditLogEvent"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListFilters_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/Filter"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListFilterTags_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/FilterTag"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "AssetViewGetStatus_200_response" : {
        "properties" : {
          "is_running" : {
            "description" : "Whether the assetview is currently running",
            "type" : "boolean"
          }
        },
        "required" : [ "is_running" ]
      },
      "AssetViewListLogs_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/AssetViewRun"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ManageGetPlatformRegistry_200_response" : {
        "additionalProperties" : { },
        "properties" : {
          "installation_id" : {
            "description" : "Installation ID",
            "x-go-name" : "InstallationID"
          },
          "activation_id" : {
            "description" : "Activation ID",
            "format" : "uuid",
            "x-go-name" : "ActivationID"
          },
          "team_name" : {
            "description" : "Name of the team that was activated"
          },
          "api_key_last_four" : {
            "description" : "Last 4 characters of the API key",
            "x-go-name" : "APIKeyLastFour"
          },
          "last_activated_at" : {
            "description" : "Timestamp of the last activation",
            "format" : "date-time"
          },
          "next_activation_at" : {
            "description" : "Timestamp of the next activation",
            "format" : "date-time"
          },
          "offline_license_registered_to" : {
            "description" : "Name the offline license is registered to"
          },
          "offline_license_expires_at" : {
            "description" : "Timestamp of the offline license expiration",
            "format" : "date-time"
          }
        },
        "required" : [ "installation_id" ]
      },
      "ManageRegisterPlatform_request" : {
        "additionalProperties" : { },
        "properties" : {
          "api_key" : {
            "description" : "Team API key to activate platform with",
            "minLength" : 32,
            "x-go-name" : "APIKey"
          }
        },
        "required" : [ "api_key" ]
      },
      "ManageRegisterPlatform_200_response" : {
        "additionalProperties" : { },
        "properties" : {
          "team_name" : {
            "description" : "Name of the team that was activated"
          }
        },
        "required" : [ "team_name" ]
      },
      "ManageRegisterPlatform_205_response" : {
        "additionalProperties" : { },
        "properties" : {
          "error" : {
            "description" : "Error message"
          },
          "button_text" : {
            "description" : "Text for the button"
          },
          "button_url" : {
            "description" : "URL for the button",
            "format" : "url",
            "x-go-name" : "ButtonURL"
          }
        },
        "required" : [ "error" ]
      },
      "ManageRegisterPlatformWithOfflineLicense_request" : {
        "additionalProperties" : { },
        "properties" : {
          "license" : {
            "description" : "Offline license",
            "format" : "byte"
          }
        },
        "required" : [ "license" ]
      },
      "ManageRegisterPlatformWithOfflineLicense_200_response" : {
        "additionalProperties" : { },
        "properties" : {
          "registered_to" : {
            "description" : "Name the offline license is registered to"
          },
          "expires_at" : {
            "description" : "Timestamp of the offline license expiration",
            "format" : "date-time"
          }
        },
        "required" : [ "expires_at", "registered_to" ]
      },
      "ManageListAllTeams_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/Team"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ManageListTeamMembers_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/MembershipWithUser"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ManageAddTeamMember_request" : {
        "additionalProperties" : { },
        "properties" : {
          "user_id" : {
            "description" : "ID of the User",
            "example" : "12345678-1234-1234-1234-1234567890ab",
            "format" : "uuid",
            "type" : "string",
            "x-go-name" : "UserID"
          },
          "roles" : {
            "items" : {
              "enum" : [ "admin:write", "admin:read", "general:read", "general:write" ]
            }
          }
        },
        "required" : [ "roles", "user_id" ]
      },
      "ManageRemoveTeamMember_request" : {
        "additionalProperties" : { },
        "properties" : {
          "user_id" : {
            "description" : "ID of the User",
            "example" : "12345678-1234-1234-1234-1234567890ab",
            "format" : "uuid",
            "type" : "string",
            "x-go-name" : "UserID"
          }
        },
        "required" : [ "user_id" ]
      },
      "ListLocalUsers_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/LocalUser"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "AddLocalUser_request" : {
        "additionalProperties" : { },
        "properties" : {
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          },
          "roles" : {
            "description" : "Global roles for the user",
            "items" : {
              "enum" : [ "admin:write", "admin:read" ]
            },
            "minItems" : 0
          }
        },
        "required" : [ "email", "name", "roles" ]
      },
      "UpdateLocalUser_request" : {
        "additionalProperties" : { },
        "properties" : {
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          },
          "enabled" : { },
          "roles" : {
            "description" : "Global roles for the user",
            "items" : {
              "enum" : [ "admin:write", "admin:read" ]
            }
          }
        }
      },
      "CreateLocalUserResetToken_200_response" : {
        "properties" : {
          "reset_token" : {
            "type" : "string"
          }
        },
        "required" : [ "reset_token" ]
      },
      "GetPlatformInfo_200_response" : {
        "properties" : {
          "public_ips" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        },
        "required" : [ "items" ]
      },
      "ListPlatformVersions_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/PlatformVersion"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListPlugins_200_response" : {
        "properties" : {
          "items" : {
            "$ref" : "#/components/schemas/ListPlugins"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListPluginVersions_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/PluginVersionList"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "CreatePluginVersion_request" : {
        "properties" : {
          "message" : {
            "description" : "A message describing what's new or changed in this version.\nThis message will be displayed to users in the plugin's changelog.\nSupports limited markdown syntax.\n",
            "maxLength" : 30000,
            "minLength" : 1,
            "type" : "string"
          },
          "protocols" : {
            "$ref" : "#/components/schemas/PluginProtocols"
          },
          "supported_targets" : {
            "description" : "The targets supported by this plugin version, formatted as <os>_<arch>",
            "example" : [ "linux_arm64", "darwin_amd64", "windows_amd64" ],
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "checksums" : {
            "description" : "List of SHA-256 checksums for this plugin version, one for each supported target.",
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "package_type" : {
            "$ref" : "#/components/schemas/PluginPackageType"
          },
          "spec_json_schema" : {
            "$ref" : "#/components/schemas/PluginSpecJSONSchema"
          },
          "ui_id" : {
            "format" : "uuid",
            "type" : "string",
            "x-go-name" : "UIID"
          }
        },
        "required" : [ "checksums", "message", "package_type", "protocols", "supported_targets" ]
      },
      "ListPluginVersionDocs_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/PluginDocsPage"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "CreatePluginVersionDocs_request" : {
        "properties" : {
          "pages" : {
            "items" : {
              "$ref" : "#/components/schemas/PluginDocsPageCreate"
            },
            "type" : "array"
          }
        },
        "required" : [ "pages" ]
      },
      "CreatePluginVersionDocs_201_response" : {
        "properties" : {
          "names" : {
            "items" : {
              "$ref" : "#/components/schemas/PluginDocsPageName"
            },
            "type" : "array"
          }
        }
      },
      "DeletePluginVersionDocs_request" : {
        "properties" : {
          "names" : {
            "items" : {
              "$ref" : "#/components/schemas/PluginDocsPageName"
            },
            "type" : "array"
          }
        },
        "required" : [ "names" ]
      },
      "ListPluginVersionTables_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/PluginTable"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "CreatePluginVersionTables_request" : {
        "properties" : {
          "tables" : {
            "items" : {
              "$ref" : "#/components/schemas/PluginTableCreate"
            },
            "type" : "array"
          }
        },
        "required" : [ "tables" ]
      },
      "CreatePluginVersionTables_201_response" : {
        "properties" : {
          "names" : {
            "items" : {
              "$ref" : "#/components/schemas/PluginTableName"
            },
            "type" : "array"
          }
        }
      },
      "DeletePluginVersionTables_request" : {
        "properties" : {
          "names" : {
            "items" : {
              "$ref" : "#/components/schemas/PluginTableName"
            },
            "type" : "array"
          }
        },
        "required" : [ "names" ]
      },
      "FinalizePluginUIAssetUpload_request" : {
        "properties" : {
          "ui_id" : {
            "description" : "ID representing the finished upload",
            "type" : "string",
            "x-go-name" : "UIID"
          }
        },
        "required" : [ "ui_id" ]
      },
      "UploadPluginUIAssets_request" : {
        "properties" : {
          "ui_id" : {
            "format" : "uuid",
            "type" : "string",
            "x-go-name" : "UIID"
          },
          "assets" : {
            "items" : {
              "$ref" : "#/components/schemas/PluginUIAssetUploadRequest"
            },
            "type" : "array"
          }
        },
        "required" : [ "assets" ]
      },
      "UploadPluginUIAssets_201_response" : {
        "properties" : {
          "ui_id" : {
            "description" : "ID representing this upload",
            "type" : "string",
            "x-go-name" : "UIID"
          },
          "assets" : {
            "items" : {
              "$ref" : "#/components/schemas/PluginUIAsset"
            },
            "type" : "array"
          }
        },
        "required" : [ "assets", "ui_id" ]
      },
      "ListTables_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/TableListItem"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "TableListRows_200_response" : {
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/TableData"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "data", "metadata" ]
      },
      "TableRowById_200_response" : {
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/TableRow"
          },
          "matches" : {
            "items" : {
              "$ref" : "#/components/schemas/TableRowFieldMatch"
            },
            "type" : "array"
          }
        },
        "required" : [ "data", "matches" ]
      },
      "TableSchema_200_response" : {
        "properties" : {
          "schema" : {
            "$ref" : "#/components/schemas/TableSchema"
          },
          "default_columns" : {
            "items" : {
              "description" : "Column name",
              "type" : "string"
            },
            "type" : "array"
          }
        },
        "required" : [ "default_columns", "schema" ]
      },
      "BatchTableSchemas_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/BatchTableSchemaItem"
            },
            "type" : "array"
          }
        },
        "required" : [ "items" ]
      },
      "TableListColumns_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/TableColumnListItem"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "TableColumnListValues_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/TableColumnValueListItem"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "TableListRelations_200_response" : {
        "properties" : {
          "data" : {
            "items" : {
              "$ref" : "#/components/schemas/TableRelation"
            },
            "type" : "array"
          }
        },
        "required" : [ "data" ]
      },
      "CreateTeam_request" : {
        "additionalProperties" : { },
        "properties" : {
          "name" : {
            "$ref" : "#/components/schemas/TeamName"
          },
          "display_name" : {
            "description" : "The team's display name",
            "maxLength" : 255,
            "minLength" : 1
          }
        },
        "required" : [ "display_name", "name" ]
      },
      "UpdateTeam_request" : {
        "additionalProperties" : { },
        "properties" : {
          "display_name" : {
            "description" : "The team's display name"
          }
        }
      },
      "ListAllAlerts_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/AlertDetail"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "TestUnsavedAlert_200_response" : {
        "properties" : {
          "results" : {
            "description" : "Notification results for the test alert",
            "items" : {
              "$ref" : "#/components/schemas/AlertTestResponse"
            },
            "type" : "array"
          }
        },
        "required" : [ "results" ]
      },
      "ListTeamAPIKeys_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/APIKey"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          },
          "allowed_roles" : {
            "description" : "List of allowed roles when creating a new API key",
            "items" : {
              "$ref" : "#/components/schemas/APIKeyTeamRole"
            },
            "type" : "array"
          }
        },
        "required" : [ "allowed_roles", "items", "metadata" ]
      },
      "CreateTeamAPIKey_request" : {
        "properties" : {
          "name" : {
            "$ref" : "#/components/schemas/APIKeyName"
          },
          "expires_at" : {
            "format" : "date-time",
            "type" : "string"
          },
          "roles" : {
            "items" : {
              "$ref" : "#/components/schemas/APIKeyTeamRole"
            },
            "type" : "array"
          }
        },
        "required" : [ "expires_at", "name" ]
      },
      "ListConnectors_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/Connector"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "GetConnectorAuthStatusAWS_200_response" : {
        "properties" : {
          "role_arn" : {
            "description" : "ARN of role created by the user",
            "type" : "string",
            "x-go-name" : "RoleARN"
          },
          "external_id" : {
            "description" : "External ID used for the role",
            "type" : "string",
            "x-go-name" : "ExternalID"
          }
        }
      },
      "GetConnectorAuthStatusGCP_200_response" : {
        "properties" : {
          "service_account" : {
            "description" : "CloudQuery GCP Service Account to grant access to",
            "type" : "string"
          }
        }
      },
      "ListAllCustomColumns_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/CustomColumn"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "PutCustomColumnData_202_response" : {
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/CustomColumnDataImportAccepted"
          }
        },
        "required" : [ "data" ]
      },
      "CreateTeamImages_request" : {
        "properties" : {
          "images" : {
            "items" : {
              "$ref" : "#/components/schemas/TeamImageCreate"
            },
            "minItems" : 1,
            "type" : "array"
          }
        },
        "required" : [ "images" ]
      },
      "CreateTeamImages_201_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/TeamImage"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListTeamInvitations_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/Invitation"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "DeleteTeamInvitation_request" : {
        "properties" : {
          "email" : {
            "format" : "email",
            "type" : "string"
          }
        },
        "required" : [ "email" ]
      },
      "AcceptTeamInvitation_request" : {
        "properties" : {
          "token" : {
            "format" : "uuid",
            "type" : "string"
          }
        },
        "required" : [ "token" ]
      },
      "GetTeamMemberships_200_response" : {
        "properties" : {
          "items" : {
            "example" : [ {
              "roles" : [ "admin:write" ],
              "user" : {
                "created_at" : "2017-07-14T16:53:42Z",
                "email" : "user@example.com",
                "id" : "12345678-1234-1234-1234-1234567890ab",
                "name" : "Sarah O'Connor",
                "updated_at" : "2017-07-14T16:53:42Z"
              }
            } ],
            "items" : {
              "$ref" : "#/components/schemas/MembershipWithUser"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "RemoveTeamMembership_request" : {
        "properties" : {
          "email" : {
            "type" : "string"
          }
        },
        "required" : [ "email" ]
      },
      "ListAllNotificationDestinations_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/NotificationDestinationListItem"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "CreateAWSOnboarding_request" : {
        "properties" : {
          "single_account" : {
            "description" : "Specifies the type of onboarding to create: either a single account onboarding or an organization onboarding\n",
            "type" : "boolean"
          }
        },
        "required" : [ "single_account" ]
      },
      "ListPluginsByTeam_200_response" : {
        "properties" : {
          "items" : {
            "example" : [ {
              "name" : "aws-source",
              "kind" : "source",
              "team_name" : "cloudquery",
              "display_name" : "AWS Source Plugin",
              "category" : "cloud-infrastructure",
              "created_at" : "2017-07-14T16:53:42Z",
              "updated_at" : "2017-07-14T16:53:42Z",
              "homepage" : "https://cloudquery.io",
              "logo" : "https://storage.googleapis.com/cq-cloud-images/9ac4cb31-e971-4879-8619-87dc22b0f98e",
              "official" : true,
              "short_description" : "Sync data from AWS to any destination",
              "repository" : "https://github.com/cloudquery/cloudquery",
              "tier" : "paid",
              "usd_per_row" : "0.00123",
              "free_rows_per_month" : 10000,
              "release_stage" : "preview"
            } ],
            "items" : {
              "$ref" : "#/components/schemas/Plugin"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListPolicies_200_response" : {
        "properties" : {
          "policies" : {
            "items" : {
              "$ref" : "#/components/schemas/PlatformPolicy"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "metadata", "policies" ]
      },
      "CreatePolicy_201_response" : {
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/PlatformPolicy"
          }
        },
        "required" : [ "data" ]
      },
      "ListAllFrameworks_200_response" : {
        "properties" : {
          "frameworks" : {
            "items" : {
              "$ref" : "#/components/schemas/PlatformPolicyFramework"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "frameworks", "metadata" ]
      },
      "ListPolicyRules_200_response" : {
        "properties" : {
          "rules" : {
            "items" : {
              "$ref" : "#/components/schemas/PlatformPolicyRule"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "metadata", "rules" ]
      },
      "ListPolicyRuleDetails_200_response" : {
        "properties" : {
          "details" : {
            "items" : {
              "$ref" : "#/components/schemas/PlatformPolicyRuleDetail"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "details", "metadata" ]
      },
      "GetPolicyViolationsHistory_200_response" : {
        "properties" : {
          "details" : {
            "items" : {
              "$ref" : "#/components/schemas/PlatformPolicyViolationHistory"
            },
            "type" : "array"
          }
        },
        "required" : [ "details" ]
      },
      "ListAllQueriesTeam_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/Query"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ExecuteAdHocQueryTeam_request" : {
        "additionalProperties" : { },
        "properties" : {
          "query" : {
            "example" : "SELECT account_id, instance_id, instance_type, region, name, tags FROM aws_ec2_instance WHERE instance_type = 't2.micro'"
          }
        },
        "required" : [ "query" ]
      },
      "ListQueryTagsTeam_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/QueryTag"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListReports_200_response" : {
        "properties" : {
          "reports" : {
            "items" : {
              "$ref" : "#/components/schemas/Report"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "metadata", "reports" ]
      },
      "CreateReport_201_response" : {
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/Report"
          }
        },
        "required" : [ "data" ]
      },
      "ListReportTemplates_200_response" : {
        "properties" : {
          "templates" : {
            "items" : {
              "$ref" : "#/components/schemas/ReportTemplate"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "metadata", "templates" ]
      },
      "CreateReportTemplate_201_response" : {
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/ReportTemplate"
          }
        },
        "required" : [ "data" ]
      },
      "UpdateSyncTestConnectionForSyncDestination_request" : {
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/SyncTestConnectionStatus"
          },
          "failure_reason" : {
            "description" : "Reason for failure",
            "example" : "password authentication failed for user \"exampleuser\"",
            "type" : "string"
          },
          "failure_code" : {
            "description" : "Code for failure",
            "example" : "INVALID_CREDENTIALS",
            "type" : "string"
          }
        },
        "required" : [ "status" ]
      },
      "Test_Connection_Logs" : {
        "additionalProperties" : { },
        "properties" : {
          "location" : {
            "description" : "The location to download the test connection logs from",
            "format" : "uri"
          }
        },
        "required" : [ "location" ],
        "title" : "Test Connection Logs"
      },
      "ListSyncDestinations_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/SyncDestination"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListSyncDestinationSyncs_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/ListSync"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListSyncSources_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/SyncSource"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListSyncTransformers_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/SyncTransformer"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListSyncTransformerSyncs_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/Sync"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListSyncUpgrades_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/SyncUpgrade"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ListSyncRuns_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/SyncRun"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "UpdateSyncRun_request" : {
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/SyncRunStatus"
          },
          "status_reason" : {
            "$ref" : "#/components/schemas/SyncRunStatusReason"
          }
        }
      },
      "Sync_Run_Logs" : {
        "additionalProperties" : { },
        "properties" : {
          "location" : {
            "description" : "The location to download the sync run logs from",
            "format" : "uri"
          }
        },
        "required" : [ "location" ],
        "title" : "Sync Run Logs"
      },
      "CreateSyncRunProgress_request" : {
        "properties" : {
          "rows" : {
            "description" : "Number of rows synced so far",
            "format" : "int64",
            "type" : "integer"
          },
          "warnings" : {
            "description" : "Number of warnings encountered so far",
            "format" : "int64",
            "type" : "integer"
          },
          "errors" : {
            "description" : "Number of errors encountered so far",
            "format" : "int64",
            "type" : "integer"
          },
          "status" : {
            "$ref" : "#/components/schemas/SyncRunStatus"
          },
          "shard_num" : {
            "description" : "The shard number that this progress update is for",
            "format" : "int32",
            "type" : "integer"
          },
          "shard_total" : {
            "description" : "The total number of shards for this sync run",
            "format" : "int32",
            "type" : "integer"
          }
        },
        "required" : [ "errors", "rows", "warnings" ]
      },
      "GetSyncRunTables_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/SyncRunTableStat"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "GetSyncRunConnectorCredentials_200_response" : {
        "properties" : {
          "aws" : {
            "$ref" : "#/components/schemas/ConnectorCredentialsResponseAWS"
          },
          "oauth" : {
            "$ref" : "#/components/schemas/ConnectorCredentialsResponseOAuth"
          }
        }
      },
      "GetSyncRunConnectorIdentity_200_response" : {
        "properties" : {
          "aws" : {
            "$ref" : "#/components/schemas/ConnectorIdentityResponseAWS"
          }
        }
      },
      "ListUsersByTeam_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/User"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "UploadImage_request" : {
        "properties" : {
          "content_type" : {
            "$ref" : "#/components/schemas/ContentType"
          }
        },
        "required" : [ "content_type" ]
      },
      "GetCurrentUser_200_response" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/User"
        }, {
          "properties" : {
            "event_identifiers" : {
              "additionalProperties" : { }
            },
            "group_identifier" : {
              "type" : "string"
            },
            "registered_team_name" : {
              "description" : "The name of the team that the platform is registered with",
              "type" : "string"
            },
            "registered_team_internal" : {
              "description" : "Whether the team is internal or not",
              "type" : "boolean"
            }
          }
        } ]
      },
      "GetCurrentUser_401_response" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BasicError"
        }, {
          "properties" : {
            "password_reset_required" : {
              "description" : "Whether the user needs to reset their password",
              "type" : "boolean"
            }
          }
        } ]
      },
      "UpdateCurrentUser_request" : {
        "additionalProperties" : { },
        "properties" : {
          "name" : {
            "$ref" : "#/components/schemas/UserName"
          },
          "tracking_opt_in" : {
            "description" : "Whether to opt in or out of anonymous user tracking"
          }
        }
      },
      "SendAnonymousEvent_request" : {
        "additionalProperties" : { },
        "properties" : {
          "name" : {
            "description" : "Name of event"
          },
          "anonymous_id" : {
            "description" : "Anonymous ID identifying the user",
            "x-go-name" : "AnonymousID"
          },
          "properties" : {
            "description" : "Properties of event, keys should be of string type"
          }
        },
        "required" : [ "anonymous_id", "name" ]
      },
      "AuthenticateLocalUser_request" : {
        "additionalProperties" : { },
        "properties" : {
          "email" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          }
        },
        "required" : [ "email", "password" ]
      },
      "AuthenticateLocalUser_200_response" : {
        "properties" : {
          "id_token" : {
            "type" : "string",
            "x-go-name" : "IDToken"
          }
        },
        "required" : [ "id_token" ]
      },
      "ChangeLocalUserPassword_request" : {
        "additionalProperties" : { },
        "properties" : {
          "email" : {
            "type" : "string"
          },
          "old_password" : {
            "type" : "string"
          },
          "new_password" : {
            "type" : "string"
          }
        },
        "required" : [ "email", "new_password", "old_password" ]
      },
      "UpdateCustomer_request" : {
        "additionalProperties" : { },
        "properties" : {
          "first_name" : {
            "type" : "string"
          },
          "last_name" : {
            "type" : "string"
          },
          "company_name" : {
            "type" : "string"
          },
          "learned_about_cq_from" : {
            "type" : "string"
          },
          "learned_about_cq_from_other" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          }
        },
        "required" : [ "first_name", "last_name" ]
      },
      "SendUserEvent_request" : {
        "additionalProperties" : { },
        "properties" : {
          "name" : {
            "description" : "Name of event"
          },
          "properties" : {
            "description" : "Properties of event, keys should be of string type"
          }
        },
        "required" : [ "name" ]
      },
      "ListCurrentUserInvitations_200_response" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/InvitationWithToken"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "UserTOTPVerify_request" : {
        "additionalProperties" : { },
        "properties" : {
          "otp" : {
            "type" : "string"
          }
        },
        "required" : [ "otp" ]
      },
      "UserTOTPSetup_200_response" : {
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "secret" : {
            "type" : "string"
          }
        },
        "required" : [ "secret", "url" ]
      },
      "LoginUser_request" : {
        "additionalProperties" : { },
        "properties" : {
          "id_token" : {
            "x-go-name" : "IDToken"
          }
        },
        "required" : [ "id_token" ]
      },
      "GetCurrentUserMemberships_200_response" : {
        "properties" : {
          "items" : {
            "example" : [ {
              "roles" : [ "admin:write" ],
              "team" : {
                "created_at" : "2017-07-14T16:53:42Z",
                "name" : "cloudquery",
                "display_name" : "CloudQuery",
                "plan" : "free",
                "is_trial_active" : false,
                "internal" : false
              }
            } ],
            "items" : {
              "$ref" : "#/components/schemas/MembershipWithTeam"
            },
            "type" : "array"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ListMetadata"
          }
        },
        "required" : [ "items", "metadata" ]
      },
      "ResetLocalUserPassword_request" : {
        "additionalProperties" : { },
        "properties" : {
          "email" : {
            "type" : "string"
          },
          "reset_token" : {
            "type" : "string"
          },
          "new_password" : {
            "type" : "string"
          }
        },
        "required" : [ "email", "new_password", "reset_token" ]
      },
      "CreateUserToken_201_response" : {
        "properties" : {
          "custom_token" : {
            "description" : "Token to exchange for refresh token",
            "type" : "string"
          }
        },
        "required" : [ "custom_token" ]
      },
      "TableData_columns_inner" : {
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        },
        "required" : [ "name", "type" ]
      },
      "UsageSummary_metadata" : {
        "additionalProperties" : false,
        "description" : "Additional metadata about the usage summary. This may include information about the time range, the aggregation period, or other details.",
        "properties" : {
          "start" : {
            "description" : "The inclusive start of the query time range.",
            "format" : "date-time"
          },
          "end" : {
            "description" : "The exclusive end of the query time range.",
            "format" : "date-time"
          },
          "aggregation_period" : {
            "description" : "The aggregation period to sum data over. In other words, data will be returned at this granularity.",
            "enum" : [ "day", "month" ]
          },
          "metrics" : {
            "default" : [ "paid_rows" ],
            "description" : "List of metrics included in the response.",
            "items" : {
              "enum" : [ "paid_rows", "cloud_egress_bytes", "cloud_vcpu_seconds", "cloud_vram_byte_seconds" ]
            }
          }
        },
        "required" : [ "aggregation_period", "end", "metrics", "start" ]
      }
    },
    "securitySchemes" : {
      "bearerAuth" : {
        "scheme" : "bearer",
        "type" : "http"
      },
      "basicAuth" : {
        "scheme" : "basic",
        "type" : "http"
      },
      "cookieAuth" : {
        "scheme" : "cookie",
        "type" : "http"
      }
    }
  }
}